<!DOCTYPE HTML PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">  <meta http-equiv="X-UA-Compatible" content="IE=8"> <meta name="search.content.shortId" content="gg266469"> <meta name="search.content.locale" content="en-us"> <meta name="MN" content="B9D26F3F-10:46:28 PM"> <meta http-equiv="content-language" content="en"> <link rel="canonical" href="http://msdn.microsoft.com/en-us/gg266469"> <meta name="NormalizedUrl" href="http://msdn.microsoft.com/en-us/gg266469%28d=default,l=en-us,v=MSDN.10%29.aspx"> <link href="wp7trainingcourse_2dgamedevelopmentwithxnapart2lab_topic3_files/StoCodeHighlighter.css" type="text/css" rel="stylesheet"><link href="wp7trainingcourse_2dgamedevelopmentwithxnapart2lab_topic3_files/default_003.css" type="text/css" rel="stylesheet"><link href="wp7trainingcourse_2dgamedevelopmentwithxnapart2lab_topic3_files/default.css" type="text/css" rel="stylesheet"><link href="wp7trainingcourse_2dgamedevelopmentwithxnapart2lab_topic3_files/default_002.css" type="text/css" rel="stylesheet"> <title>Exercise 2: Save and Restore the Game State</title><style type="text/css">/* Chili -- cs */
.cs__mlcom { color: #4040c2; }
.cs__com { color: green; }
.cs__string { color: teal; }
.cs__preproc { color: red; }
.cs__number { color: red; }
.cs__keyword { color: navy; font-weight: bold; }</style></head><body id="MTPS_Body" class="MsdnPageBody"> <div id="BodyBackground"> <div id="JelloSizer"> <div id="JelloExpander"> <div id="JelloWrapper"> <div class="Clear"> </div> <div class="Masthead"> <div class="BrandLogo"> <a title="Microsoft Developer Network" href="http://msdn.microsoft.com/en-us/"> <span> Microsoft Developer Network </span> </a></div><div class="Search"> <div class="SearchBox"> <form name="HeaderSearchForm" method="post" action=""> <input name="SearchAction" value="search" type="hidden"> <input value="Search MSDN with Bing" style="color: rgb(170, 170, 170); font-style: italic;" autocomplete="off" id="HeaderSearchTextBox" class="TextBoxSearch" title="Search MSDN with Bing" type="text"> <input id="HeaderSearchButton" onclick="return SearchClientClick();" class="SearchButton" alt="Click here to search" title="Search MSDN with Bing" type="button"> <span class="Bing"></span> <div style="display: none; text-align: left; border: 1px solid buttonshadow; position: absolute; z-index: 1000; padding: 2px; background-color: rgb(255, 255, 255); color: rgb(0, 0, 255); font-family: arial;" id="SearchFlyoutContainer"><div id="SuggestionContainer"><ul style="list-style: none outside none; padding: 4px 2px 0px 1px; cursor: pointer; font-size: 8pt; margin: 1px;"></ul></div><div style="width: 100%; margin: 0px; text-align: right; font-size: 8pt;" id="FooterContainer"><a href="#">Close</a></div></div></form> </div></div> <div class="GlobalBar"> <div class="PassportScarab"> <a id="idPPScarab" href="https://login.live.com/login.srf?wa=wsignin1.0&amp;rpsnv=11&amp;ct=1294037188&amp;rver=6.0.5276.0&amp;wp=MCLBI&amp;wlcxt=msdn%24msdn%24msdn&amp;wreply=http:%2F%2Fmsdn.microsoft.com%2Fen-us%2Fwp7trainingcourse_2dgamedevelopmentwithxnapart2lab_topic3&amp;lc=1033&amp;cb=&amp;id=254354"><span id="idPPScarabSIT">Sign in</span></a></div><div id="LocaleSelector"> <form id="ChangeLocaleForm" action="/en-us/SelectLocale?pageid=wp7trainingcourse_2dgamedevelopmentwithxnapart2lab_topic3"> <input name="fromPage" value="http://msdn.microsoft.com/en-us/wp7trainingcourse_2dgamedevelopmentwithxnapart2lab_topic3" type="hidden"> <div id="FlyoutTop"> <a title="Change your language" href="#Change+your+language" onclick="$('#ChangeLocaleForm').submit();return false;" id="LinkCountryLanguage" class="LocaleManagementFlyoutStaticLink"> United States (English) </a> </div> </form></div> <div class="Clear"></div> </div> <div class="Clear"></div> <div class="networkTagLineArea NetworkLogo"> <a title="Microsoft Developer Network" href="http://msdn.microsoft.com/en-us"></a> </div><div class="leftcap"></div> <div class="internav"> <a href="http://msdn.microsoft.com/en-us/default" class="normal" title="Home">Home</a><a href="http://msdn.microsoft.com/library/default.aspx" class="normal" title="Library">Library</a><a href="http://msdn.microsoft.com/en-us/bb188199" class="active" title="Learn">Learn</a><a href="http://msdn.microsoft.com/en-us/aa570309" class="normal" title="Downloads">Downloads</a><a href="http://msdn.microsoft.com/en-us/aa570318" class="normal" title="Support">Support</a><a href="http://msdn.microsoft.com/en-us/aa497440" class="normal" title="Community">Community</a><a href="http://social.msdn.microsoft.com/Forums/en-US/categories" class="normal" title="Forums">Forums</a></div><div class="rightcap"></div><div class="Clear"></div> </div> <div class="Clear"> </div> <div class="topleftcorner"> </div> <div class="toprightcorner"> </div> <div class="alley"> <div class="wrapper"> <div class="inner"> <div class="Clear"> </div> <div class="BreadCrumb"><div class="BreadCrumbInner EyebrowContainer"><a href="http://msdn.microsoft.com/en-us/default" class="EyebrowLink" title="Microsoft Developer Network">Microsoft Developer Network</a> &gt; <a href="http://msdn.microsoft.com/en-us/bb188199" class="EyebrowLink" title="Learn">Learn</a> &gt; <a href="http://msdn.microsoft.com/en-us/gg299335" class="EyebrowLink" title="Courses">Courses</a> &gt; <a href="http://msdn.microsoft.com/en-us/gg266499" class="EyebrowLink" title="Windows Phone 7 Training Course">Windows Phone 7 Training Course</a> &gt; <a href="http://msdn.microsoft.com/en-us/gg266479" class="EyebrowLink" title="XNA Framework 4.0 for Windows Phones">XNA Framework 4.0 for Windows Phones</a> &gt; <a href="http://msdn.microsoft.com/en-us/gg266465" class="EyebrowLink" title="Tombstoning, Launcher and Chooser, and then some with XNA Fremework">Tombstoning, Launcher and Chooser, and then some with XNA Fremework</a> &gt; <span class="EyebrowElement">Exercise 2: Save and Restore the Game State</span> </div></div><div id="mainSection"><div class="navpage"><table class="multicol"><tbody><tr><td class="innercol" valign="top"><div class="MainColumn"><h2 class="Title">Exercise 2: Save and Restore the Game State</h2><p>In
 this exercise, we add a new feature to the game, state persistency. 
This feature is useful for handling Windows Phone tombstoning.</p><p>The
 Windows Phone application runtime model allows only one application to 
run in the phone’s foreground at a given time. The main reason for that 
is to maximize performance and battery lifetime. Therefore, when the 
user switches from the game to another application or just presses the 
Windows button, the game stops (essentially terminates). When the user 
returns to the game, you should restore the game state to the one before
 it terminated. You will use the phone’s <strong>isolated storage</strong> to persist the game state data between invocations</p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> It worth noting, that applications do not share the data stored in isolated storage. In other words, each application<strong>&nbsp;</strong>has<strong>&nbsp;</strong>its own isolated storage. </div></div><p>Windows
 Phone provides a consistent way for you to handle the application’s 
different lifecycle events. You’ll handle those events to achieve the 
consistent persistency feature across the different game‘s invocation 
and termination scenarios.</p><p>Now, let us specify the Windows Phone Application Lifecycle events and show how they relate to persistency:</p><ul><li><strong>Launching</strong>:
 This event is raised when the player launches the game for the first 
time or if the game that was closed. At this event, we cannot use <strong>tombstoning</strong> to get the previous application state. However, if at the previous play session we saved the state in <strong>isolated storage</strong>, we can reload it from there. </li><li><strong>Closing</strong>:
 This event is raised when the player closes the game. Players can close
 the game by choosing the Exit option from the main menu, which 
basically calls the <em>Game.Exit</em> method. The game will also close if the player presses the Back button beyond the first page of the game. </li><li><strong>Activated</strong>: This event is raised when the player comes back to game from another application, for example, via the Back<strong>&nbsp;</strong>button. At this event, we can use <strong>tombstoning</strong> to get the previous application state, if you saved it before via the same technology.</li><li><strong>Deactivated</strong>: This event is raised when the player launches another application, for example, by using the Start<strong>&nbsp;</strong>button. This is the time to store the state via <strong>tombstoning</strong>. </li></ul><p>It is worth noting that storing the data in <strong>isolated storage </strong>is safer then storing it via<strong> tombstoning, </strong>because
 the deactivated application may never again be activated, and the data 
will be lost. This may happen, for example, if we call too many 
subsequent applications from our game, because the tombstoning storage 
is limited. Therefore, you should save any long-term data in Isolated 
Storage, and any transient data in the phone state dictionary. </p><p>It is time to go ahead and start implementing the code to handle the game lifecycle events.</p><p></p><a id="_Toc269861150" href="#"></a><a id="_Toc271904499" href="#"></a><h3>Task 1 – Save and restore the game state</h3><p>In this task, we extend the <strong>CatapultGame</strong> class with event handlers that save and restore the application state using <strong>tombstoning </strong>and<strong> isolated storage</strong> capabilities and assign those handlers to the correspondent events raised by the Windows Phone:</p><ol><li>Open the CatapultGame.cs file.</li><li>Replace the "Using Statements" region with the following code:<p>(Code Snippet – 2D <em>Game Development with XNA Part 2 – CatapultGame New Usings</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__preproc">#region&nbsp;Using&nbsp;Statementsusing&nbsp;System;using&nbsp;System.Collections.Generic;using&nbsp;System.Linq;using&nbsp;Microsoft.Xna.Framework;using&nbsp;Microsoft.Xna.Framework.Audio;using&nbsp;Microsoft.Xna.Framework.Content;using&nbsp;Microsoft.Xna.Framework.GamerServices;using&nbsp;Microsoft.Xna.Framework.Graphics;using&nbsp;Microsoft.Xna.Framework.Input;using&nbsp;Microsoft.Xna.Framework.Input.Touch;using&nbsp;Microsoft.Xna.Framework.Media;using&nbsp;CatapultGame;using&nbsp;GameStateManagement;using&nbsp;Microsoft.Phone.Shell;using&nbsp;System.IO.IsolatedStorage;using&nbsp;System.Xml.Serialization;using&nbsp;System.IO;#endregion</span></li></ol></code></pre></div><p></p></li><li>Locate the "Fields" region and add the following field:<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">string</span>&nbsp;fileName&nbsp;=&nbsp;<span class="cs__string">"Catapult.dat"</span>;</li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> This field stores the name of the game state file. Later, we will see how to create this file in <strong>isolated storage</strong>.</div></div><p></p></li><li>Add the following statement to the constructor:<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li>InitializePhoneServices();</li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> This function hooks up handlers to the Application Lifecycle Events, as we described the event before.</div></div><p></p></li><li>Locate the "Initialization Methods" region and add there the following code:<p>(Code Snippet – 2D <em>Game Development with XNA Part 2 – CatapultGame InitializePhoneServices</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">private</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;InitializePhoneServices(){&nbsp;PhoneApplicationService.Current.Activated&nbsp;+=&nbsp;<span class="cs__keyword">new</span>&nbsp;EventHandler&lt;ActivatedEventArgs&gt;(GameActivated);&nbsp;PhoneApplicationService.Current.Deactivated&nbsp;+=&nbsp;<span class="cs__keyword">new</span>&nbsp;EventHandler&lt;DeactivatedEventArgs&gt;(GameDeactivated);&nbsp;PhoneApplicationService.Current.Closing&nbsp;+=&nbsp;<span class="cs__keyword">new</span>&nbsp;EventHandler&lt;ClosingEventArgs&gt;(GameClosing);&nbsp;PhoneApplicationService.Current.Launching&nbsp;+=&nbsp;<span class="cs__keyword">new</span>&nbsp;EventHandler&lt;LaunchingEventArgs&gt;(GameLaunching);}</li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 This function assigns state-saving and -restoring handlers to the 
appropriate events represented by the application level object <strong>PhoneApplicationService.Current</strong>. Windows Phone provides this object to its applications and raises events in appropriate conditions.</div></div><p></p></li><li>Add to the class the following code fragment that defines the event handlers:<p>(Code Snippet – 2D <em>Game Development with XNA Part 2 – CatapultGame Event Handlers</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__preproc">#region&nbsp;Event&nbsp;Handlers///&nbsp;&lt;summary&gt;///&nbsp;Occurs&nbsp;when&nbsp;the&nbsp;game&nbsp;class&nbsp;(and&nbsp;application)&nbsp;launched///&nbsp;&lt;/summary&gt;///&nbsp;&lt;param&nbsp;name="sender"&gt;&lt;/param&gt;///&nbsp;&lt;param&nbsp;name="e"&gt;&lt;/param&gt;void&nbsp;GameLaunching(object&nbsp;sender,&nbsp;LaunchingEventArgs&nbsp;e){&nbsp;ReloadLastGameState(false);}///&nbsp;&lt;summary&gt;///&nbsp;Occurs&nbsp;when&nbsp;the&nbsp;game&nbsp;class&nbsp;(and&nbsp;application)&nbsp;exiting&nbsp;during&nbsp;exit&nbsp;cycle///&nbsp;&lt;/summary&gt;///&nbsp;&lt;param&nbsp;name="sender"&gt;&lt;/param&gt;///&nbsp;&lt;param&nbsp;name="e"&gt;&lt;/param&gt;void&nbsp;GameClosing(object&nbsp;sender,&nbsp;ClosingEventArgs&nbsp;e){&nbsp;SaveActiveGameState(false);}///&nbsp;&lt;summary&gt;///&nbsp;Occurs&nbsp;when&nbsp;the&nbsp;game&nbsp;class&nbsp;(and&nbsp;application)&nbsp;deactivated&nbsp;and&nbsp;tombstoned///&nbsp;&lt;/summary&gt;///&nbsp;&lt;param&nbsp;name="sender"&gt;&lt;/param&gt;///&nbsp;&lt;param&nbsp;name="e"&gt;&lt;/param&gt;void&nbsp;GameDeactivated(object&nbsp;sender,&nbsp;DeactivatedEventArgs&nbsp;e){&nbsp;SaveActiveGameState(true);}///&nbsp;&lt;summary&gt;///&nbsp;Occurs&nbsp;when&nbsp;the&nbsp;game&nbsp;class&nbsp;(and&nbsp;application)&nbsp;activated&nbsp;during&nbsp;return&nbsp;from&nbsp;tombstoned&nbsp;state///&nbsp;&lt;/summary&gt;///&nbsp;&lt;param&nbsp;name="sender"&gt;&lt;/param&gt;///&nbsp;&lt;param&nbsp;name="e"&gt;&lt;/param&gt;void&nbsp;GameActivated(object&nbsp;sender,&nbsp;ActivatedEventArgs&nbsp;e){&nbsp;ReloadLastGameState(true);}#endregion</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> In the event handlers region, we use the <strong>SaveActiveGameState</strong> function that saves the application state, and the <strong>ReloadLastGameState</strong>
 function that restores the application state. We pass to those 
functions a Boolean argument that indicates what capability to use: if 
the argument is true, we are handling <strong>tombstoning</strong> that is deactivating and reactivating. </div></div><p></p></li><li>You
 will need to save to either a local store or the phone state dictionary
 the relevant game’s param, such as the game score, for both the player 
and the computer, and whose turn is it. To do so, add to the 
CatapultGame.cs class the following code fragment that implements 
functions that we call from event handlers:<p>(Code Snippet – 2D <em>Game Development with XNA Part 2 – CatapultGame Private Functionality</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__preproc">#region&nbsp;Private&nbsp;functionality///&nbsp;&lt;summary&gt;///&nbsp;Reload&nbsp;last&nbsp;active&nbsp;game&nbsp;state&nbsp;from&nbsp;Isolated&nbsp;Storage&nbsp;or&nbsp;State&nbsp;object///&nbsp;&lt;/summary&gt;///&nbsp;&lt;param&nbsp;name="isTombstoning"&gt;&lt;/param&gt;private&nbsp;void&nbsp;ReloadLastGameState(bool&nbsp;isTombstoning){&nbsp;int&nbsp;playerScore&nbsp;=&nbsp;0;&nbsp;int&nbsp;computerScore&nbsp;=&nbsp;0;&nbsp;bool&nbsp;isHumanTurn&nbsp;=&nbsp;false;&nbsp;bool&nbsp;isLoaded&nbsp;=&nbsp;false;&nbsp;if&nbsp;(isTombstoning)&nbsp;isLoaded&nbsp;=&nbsp;LoadFromStateObject(out&nbsp;playerScore,&nbsp;out&nbsp;computerScore,&nbsp;out&nbsp;isHumanTurn);&nbsp;else&nbsp;{&nbsp;isLoaded&nbsp;=&nbsp;LoadFromIsolatedStorage(ref&nbsp;playerScore,&nbsp;ref&nbsp;computerScore,&nbsp;ref&nbsp;isHumanTurn);&nbsp;if&nbsp;(isLoaded)&nbsp;{&nbsp;if&nbsp;(System.Windows.MessageBox.Show("Old&nbsp;game&nbsp;available.\nDo&nbsp;you&nbsp;want&nbsp;to&nbsp;continue&nbsp;last&nbsp;game?",&nbsp;"Load&nbsp;Game",&nbsp;System.Windows.MessageBoxButton.OKCancel)&nbsp;==&nbsp;System.Windows.MessageBoxResult.OK)&nbsp;isLoaded&nbsp;|=&nbsp;true;&nbsp;else&nbsp;isLoaded&nbsp;=&nbsp;false;&nbsp;}&nbsp;}&nbsp;if&nbsp;(isLoaded)&nbsp;{&nbsp;PhoneApplicationService.Current.State.Add("playerScore",&nbsp;playerScore);&nbsp;PhoneApplicationService.Current.State.Add("computerScore",&nbsp;computerScore);&nbsp;PhoneApplicationService.Current.State.Add("isHumanTurn",&nbsp;isHumanTurn);&nbsp;GameplayScreen&nbsp;gameplayScreen&nbsp;=&nbsp;new&nbsp;GameplayScreen();&nbsp;mainMenuScreen.ScreenManager.AddScreen(gameplayScreen,&nbsp;null);&nbsp;}}private&nbsp;bool&nbsp;LoadFromIsolatedStorage(ref&nbsp;int&nbsp;playerScore,&nbsp;ref&nbsp;int&nbsp;computerScore,&nbsp;ref&nbsp;bool&nbsp;isHumanTurn){&nbsp;bool&nbsp;res&nbsp;=&nbsp;true;&nbsp;//&nbsp;Assume&nbsp;success&nbsp;//&nbsp;Load&nbsp;from&nbsp;Isolated&nbsp;Storage&nbsp;file&nbsp;using&nbsp;(IsolatedStorageFile&nbsp;isolatedStorageFile&nbsp;=&nbsp;IsolatedStorageFile.GetUserStoreForApplication())&nbsp;{&nbsp;if&nbsp;(isolatedStorageFile.FileExists(fileName))&nbsp;{&nbsp;//If&nbsp;user&nbsp;choose&nbsp;to&nbsp;save,&nbsp;create&nbsp;a&nbsp;new&nbsp;file&nbsp;using&nbsp;(IsolatedStorageFileStream&nbsp;fileStream&nbsp;=&nbsp;isolatedStorageFile.OpenFile(fileName,&nbsp;FileMode.Open))&nbsp;{&nbsp;using&nbsp;(StreamReader&nbsp;streamReader&nbsp;=&nbsp;new&nbsp;StreamReader(fileStream))&nbsp;{&nbsp;playerScore&nbsp;=&nbsp;int.Parse(streamReader.ReadLine(),&nbsp;System.Globalization.NumberStyles.Integer);&nbsp;computerScore&nbsp;=&nbsp;int.Parse(streamReader.ReadLine(),&nbsp;System.Globalization.NumberStyles.Integer);&nbsp;isHumanTurn&nbsp;=&nbsp;bool.Parse(streamReader.ReadLine());&nbsp;streamReader.Close();&nbsp;}&nbsp;}&nbsp;res&nbsp;=&nbsp;true;&nbsp;isolatedStorageFile.DeleteFile(fileName);&nbsp;}&nbsp;else&nbsp;res&nbsp;=&nbsp;false;&nbsp;}&nbsp;return&nbsp;res;}private&nbsp;bool&nbsp;LoadFromStateObject(out&nbsp;int&nbsp;playerScore,&nbsp;out&nbsp;int&nbsp;computerScore,&nbsp;out&nbsp;bool&nbsp;isHumanTurn){&nbsp;playerScore&nbsp;=&nbsp;-1;&nbsp;computerScore&nbsp;=&nbsp;-1;&nbsp;isHumanTurn&nbsp;=&nbsp;false;&nbsp;bool&nbsp;res&nbsp;=&nbsp;true;&nbsp;//&nbsp;Assume&nbsp;success&nbsp;if&nbsp;(PhoneApplicationService.Current.State.ContainsKey("HumanScore"))&nbsp;{&nbsp;playerScore&nbsp;=&nbsp;(int)PhoneApplicationService.Current.State["HumanScore"];&nbsp;PhoneApplicationService.Current.State.Remove("HumanScore");&nbsp;}&nbsp;else&nbsp;res&nbsp;=&nbsp;false;&nbsp;if&nbsp;(PhoneApplicationService.Current.State.ContainsKey("PhoneScore"))&nbsp;{&nbsp;computerScore&nbsp;=&nbsp;(int)PhoneApplicationService.Current.State["PhoneScore"];&nbsp;PhoneApplicationService.Current.State.Remove("PhoneScore");&nbsp;}&nbsp;else&nbsp;res&nbsp;=&nbsp;false;&nbsp;if&nbsp;(PhoneApplicationService.Current.State.ContainsKey("isHumanTurn"))&nbsp;{&nbsp;isHumanTurn&nbsp;=&nbsp;(bool)PhoneApplicationService.Current.State["isHumanTurn"];&nbsp;PhoneApplicationService.Current.State.Remove("isHumanTurn");&nbsp;}&nbsp;else&nbsp;res&nbsp;=&nbsp;false;&nbsp;return&nbsp;res;}///&nbsp;&lt;summary&gt;///&nbsp;Saves&nbsp;the&nbsp;current&nbsp;game&nbsp;state&nbsp;(if&nbsp;game&nbsp;is&nbsp;running)&nbsp;to&nbsp;Isolated&nbsp;Storage&nbsp;or&nbsp;State&nbsp;object///&nbsp;&lt;/summary&gt;///&nbsp;&lt;param&nbsp;name="isTombstoning"&gt;&lt;/param&gt;private&nbsp;void&nbsp;SaveActiveGameState(bool&nbsp;isTombstoning){&nbsp;//&nbsp;Try&nbsp;finding&nbsp;the&nbsp;running&nbsp;game&nbsp;instance&nbsp;&nbsp;var&nbsp;res&nbsp;=&nbsp;from&nbsp;screen&nbsp;in&nbsp;screenManager.GetScreens()&nbsp;where&nbsp;screen.GetType()&nbsp;==&nbsp;typeof(GameplayScreen)&nbsp;select&nbsp;screen;&nbsp;GameplayScreen&nbsp;gameplayScreen&nbsp;=&nbsp;res.FirstOrDefault()&nbsp;as&nbsp;GameplayScreen;&nbsp;if&nbsp;(null&nbsp;!=&nbsp;gameplayScreen)&nbsp;{&nbsp;if&nbsp;(isTombstoning)&nbsp;{&nbsp;SaveToStateObject(gameplayScreen);&nbsp;}&nbsp;else&nbsp;{&nbsp;SaveToIsolatedStorageFile(gameplayScreen,&nbsp;fileName);&nbsp;}&nbsp;}}///&nbsp;&lt;summary&gt;///&nbsp;Saves&nbsp;the&nbsp;gameplay&nbsp;screen&nbsp;data&nbsp;to&nbsp;Isolated&nbsp;storage&nbsp;file///&nbsp;&lt;/summary&gt;///&nbsp;&lt;param&nbsp;name="gameplayScreen"&gt;&lt;/param&gt;///&nbsp;&lt;param&nbsp;name="fileName"&gt;&lt;/param&gt;private&nbsp;void&nbsp;SaveToIsolatedStorageFile(GameplayScreen&nbsp;gameplayScreen,&nbsp;string&nbsp;fileName){&nbsp;//&nbsp;Save&nbsp;to&nbsp;Isolated&nbsp;Storage&nbsp;file&nbsp;using&nbsp;(IsolatedStorageFile&nbsp;isolatedStorageFile&nbsp;=&nbsp;IsolatedStorageFile.GetUserStoreForApplication())&nbsp;{&nbsp;//&nbsp;If&nbsp;user&nbsp;choose&nbsp;to&nbsp;save,&nbsp;create&nbsp;a&nbsp;new&nbsp;file&nbsp;using&nbsp;(IsolatedStorageFileStream&nbsp;fileStream&nbsp;=&nbsp;isolatedStorageFile.CreateFile(fileName))&nbsp;{&nbsp;using&nbsp;(StreamWriter&nbsp;streamWriter&nbsp;=&nbsp;new&nbsp;StreamWriter(fileStream))&nbsp;{&nbsp;//&nbsp;Write&nbsp;date&nbsp;to&nbsp;the&nbsp;file&nbsp;streamWriter.WriteLine(gameplayScreen.player.Score);&nbsp;streamWriter.WriteLine(gameplayScreen.computer.Score);&nbsp;streamWriter.WriteLine(gameplayScreen.isHumanTurn);&nbsp;streamWriter.Close();&nbsp;}&nbsp;}&nbsp;}}///&nbsp;&lt;summary&gt;///&nbsp;Saves&nbsp;the&nbsp;gameplay&nbsp;screen&nbsp;data&nbsp;to&nbsp;State&nbsp;Object///&nbsp;&lt;/summary&gt;///&nbsp;&lt;param&nbsp;name="gameplayScreen"&gt;&lt;/param&gt;private&nbsp;static&nbsp;void&nbsp;SaveToStateObject(GameplayScreen&nbsp;gameplayScreen){&nbsp;//&nbsp;Save&nbsp;date&nbsp;to&nbsp;the&nbsp;State&nbsp;object&nbsp;PhoneApplicationService.Current.State.Add("HumanScore",&nbsp;gameplayScreen.player.Score);&nbsp;PhoneApplicationService.Current.State.Add("PhoneScore",&nbsp;gameplayScreen.computer.Score);&nbsp;PhoneApplicationService.Current.State.Add("isHumanTurn",&nbsp;gameplayScreen.isHumanTurn);}#endregion</span></li></ol></code></pre></div><p></p></li><li>Open file GameplayScreen.cs located in “Screens” folder.</li><li>Add to the "Using Statements" region the following statement:<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">using</span>&nbsp;Microsoft.Phone.Shell;</li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> This statement allows us use PhoneApplicationService that we described above.</div></div><p></p></li><li>Locate the function LoadAssets and replace it with the following code:<p>(Code Snippet – 2D <em>Game Development with XNA Part 2 – GameplayScreen LoadAssets</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;LoadAssets(){&nbsp;<span class="cs__com">//&nbsp;Load&nbsp;textures&nbsp;foregroundTexture&nbsp;=&nbsp;Load&lt;Texture2D&gt;("Textures/Backgrounds/gameplay_screen");&nbsp;cloud1Texture&nbsp;=&nbsp;Load&lt;Texture2D&gt;("Textures/Backgrounds/cloud1");&nbsp;cloud2Texture&nbsp;=&nbsp;Load&lt;Texture2D&gt;("Textures/Backgrounds/cloud2");&nbsp;mountainTexture&nbsp;=&nbsp;Load&lt;Texture2D&gt;("Textures/Backgrounds/mountain");&nbsp;skyTexture&nbsp;=&nbsp;Load&lt;Texture2D&gt;("Textures/Backgrounds/sky");&nbsp;defeatTexture&nbsp;=&nbsp;Load&lt;Texture2D&gt;("Textures/Backgrounds/defeat");&nbsp;victoryTexture&nbsp;=&nbsp;Load&lt;Texture2D&gt;("Textures/Backgrounds/victory");&nbsp;hudBackgroundTexture&nbsp;=&nbsp;Load&lt;Texture2D&gt;("Textures/HUD/hudBackground");&nbsp;windArrowTexture&nbsp;=&nbsp;Load&lt;Texture2D&gt;("Textures/HUD/windArrow");&nbsp;ammoTypeTexture&nbsp;=&nbsp;Load&lt;Texture2D&gt;("Textures/HUD/ammoType");&nbsp;//&nbsp;Load&nbsp;font&nbsp;hudFont&nbsp;=&nbsp;Load&lt;SpriteFont&gt;("Fonts/HUDFont");&nbsp;//&nbsp;Define&nbsp;initial&nbsp;cloud&nbsp;position&nbsp;cloud1Position&nbsp;=&nbsp;new&nbsp;Vector2(224&nbsp;-&nbsp;cloud1Texture.Width,&nbsp;32);&nbsp;cloud2Position&nbsp;=&nbsp;new&nbsp;Vector2(64,&nbsp;90);&nbsp;//&nbsp;Define&nbsp;initial&nbsp;HUD&nbsp;positions&nbsp;playerHUDPosition&nbsp;=&nbsp;new&nbsp;Vector2(7,&nbsp;7);&nbsp;computerHUDPosition&nbsp;=&nbsp;new&nbsp;Vector2(613,&nbsp;7);&nbsp;windArrowPosition&nbsp;=&nbsp;new&nbsp;Vector2(345,&nbsp;46);&nbsp;//&nbsp;Initialize&nbsp;human&nbsp;&amp;&nbsp;AI&nbsp;players&nbsp;player&nbsp;=&nbsp;new&nbsp;Human(ScreenManager.Game,&nbsp;ScreenManager.SpriteBatch);&nbsp;player.Initialize();&nbsp;player.Name&nbsp;=&nbsp;"Player";&nbsp;computer&nbsp;=&nbsp;new&nbsp;AI(ScreenManager.Game,&nbsp;ScreenManager.SpriteBatch);&nbsp;computer.Initialize();&nbsp;computer.Name&nbsp;=&nbsp;"Phone";&nbsp;//&nbsp;Identify&nbsp;enemies&nbsp;player.Enemy&nbsp;=&nbsp;computer;&nbsp;computer.Enemy&nbsp;=&nbsp;player;&nbsp;base.LoadContent();&nbsp;if&nbsp;(PhoneApplicationService.Current.StartupMode&nbsp;==&nbsp;StartupMode.Activate)&nbsp;{&nbsp;player.Score&nbsp;=&nbsp;int.Parse(PhoneApplicationService.Current.State["playerScore"].ToString());&nbsp;computer.Score&nbsp;=&nbsp;int.Parse(PhoneApplicationService.Current.State["computerScore"].ToString());&nbsp;isHumanTurn&nbsp;=&nbsp;!bool.Parse(PhoneApplicationService.Current.State["isHumanTurn"].ToString());&nbsp;wind&nbsp;=&nbsp;Vector2.Zero;&nbsp;changeTurn&nbsp;=&nbsp;true;&nbsp;computer.Catapult.CurrentState&nbsp;=&nbsp;CatapultState.Reset;&nbsp;}&nbsp;else&nbsp;//&nbsp;Start&nbsp;the&nbsp;game&nbsp;Start();}</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> Notice the statements in the <strong>if</strong> construction at the end of the function. Those statements use the <strong>tombstoning </strong>capabilities to reload the application state, where the first highlighted statement checks if any state data is available. <p></p>Note
 that the logic of the fanction is toggled by a flag "StartupMode" 
provided by PhoneApplicationService class. This flag indicates if the 
application is launched from the scratch or if it is just reactivated.</div></div><p></p></li><li>Locate the LoadContent method and replace it with the following code:<p>(Code Snippet – 2D <em>Game Development with XNA Part 2 – GameplayScreen LoadAssets</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;LoadContent(){&nbsp;<span class="cs__keyword">base</span>.LoadContent();&nbsp;LoadAssets();}</li></ol></code></pre></div></li></ol><p></p><p>Now
 our game has a consistent persistency feature. You can test it by 
simply running the game, and them pressing the Windows button. This 
tombstones the game. Press the Back button to reactivate the game.</p><p>This
 concludes this task. Using the game updated with the persistency 
capabilities, we can move forward to the last task of launching the SMS 
application to tell a friend how great this game is. </p><p></p><p></p><div class="Center"><div class="BostonPostCard"><h4><strong><a href="http://msdn.microsoft.com/en-us/wp7trainingcourse_2dgamedevelopmentwithxnapart2lab_topic2"> &lt; previous </a> | <a href="http://msdn.microsoft.com/en-us/wp7trainingcourse_2dgamedevelopmentwithxnapart2lab_topic4"> next &gt; </a></strong></h4></div></div></div></td><td valign="top"><div class="RightAdRail"><div class="BostonPostCard"> <div style="width: 300px; height: 250px;" id="c_44bf3ef860914706b81bfbfe5cf06cee" align="center"><iframe src="wp7trainingcourse_2dgamedevelopmentwithxnapart2lab_topic3_files/a_002.htm" name="dapIfM0" id="dapIfM0" width="300" frameborder="0" height="250" scrolling="no"></iframe></div> <p></p><h4>Contents</h4><ul class="bulletedlist"><li><a href="http://msdn.microsoft.com/en-us/wp7trainingcourse_2dgamedevelopmentwithxnapart2lab_topic1#_Toc271904494#_Toc271904494"> Overview </a></li><li><a href="http://msdn.microsoft.com/en-us/wp7trainingcourse_2dgamedevelopmentwithxnapart2lab_topic2#_Toc271904495#_Toc271904495"> Exercise 1: Play Background Music </a></li><li><strong><a href="http://msdn.microsoft.com/en-us/wp7trainingcourse_2dgamedevelopmentwithxnapart2lab_topic3#_Toc271904498#_Toc271904498"> Exercise 2: Save and Restore the Game State </a></strong><ul><li><a href="http://msdn.microsoft.com/en-us/wp7trainingcourse_2dgamedevelopmentwithxnapart2lab_topic3#_Toc271904499#_Toc271904499"> Task 1 – Save and restore the game state </a></li></ul></li><li><a href="http://msdn.microsoft.com/en-us/wp7trainingcourse_2dgamedevelopmentwithxnapart2lab_topic4#_Toc271904500#_Toc271904500"> Exercise 3: Launch Another Application from the Game </a></li><li><a href="http://msdn.microsoft.com/en-us/wp7trainingcourse_2dgamedevelopmentwithxnapart2lab_topic5#_Toc271904502#_Toc271904502"> Summary </a></li></ul></div></div></td></tr></tbody></table></div></div> <div id="footerAd" style="margin-left: auto; margin-right: auto; display: table;"> <p> </p><div style="width: 728px; height: 90px;" id="c_5fe28746f4ac46c0955adc338be3d3f4" align="center"><iframe src="wp7trainingcourse_2dgamedevelopmentwithxnapart2lab_topic3_files/a_002.htm" name="dapIfM1" id="dapIfM1" width="728" frameborder="0" height="90" scrolling="no"></iframe></div> <p></p> </div> </div> </div> </div> <div class="ClearBottom"> </div> <div class="bottomleftcorner"> </div> <div class="bottomrightcorner"> </div> <div class="FooterLinks"><span class="FooterCopyright" title="© 2010  Microsoft Corporation. All rights reserved.">© 2010 Microsoft Corporation. All rights reserved.</span><a href="http://msdn.microsoft.com/cc300389.aspx" title="Terms of Use">Terms of Use</a><span class="Pipe">|</span><a href="http://www.microsoft.com/library/toolbar/3.0/trademarks/en-us.mspx" title="Trademarks">Trademarks</a><span class="Pipe">|</span><a href="http://www.microsoft.com/info/privacy.mspx" title="Privacy Statement">Privacy Statement</a><span class="Pipe" id="ctl00_Footer_PipeSpan3">|</span><a target="_blank" id="bottomsitefeedbacklink" title="Site Feedback" href="https://lab.msdn.microsoft.com/mailform/contactus.aspx?refurl=http://msdn.microsoft.com/en-us/wp7trainingcourse_2dgamedevelopmentwithxnapart2lab_topic3&amp;loc=en-us">Site Feedback</a></div> </div> </div> </div> </div> <noscript><img alt="DCSIMG" width="1" height="1" src="http://m.webtrends.com/dcsmgru7m99k7mqmgrhudo0k8_8c6m/njs.gif?dcsuri=/nojavascript&amp;WT.js=No" /></noscript><noscript><a href="http://www.omniture.com" title="Web Analytics"><img src="http://msstonojsmsdn.112.2o7.net/b/ss/msstonojsmsdn/1/H.20.2--NS/0" height="1" width="1" border="0" alt="" /></a></noscript> <script type="text/javascript" src="wp7trainingcourse_2dgamedevelopmentwithxnapart2lab_topic3_files/global.js"></script><script type="text/javascript">
    function SearchClick() {
        window.location = "http://social.msdn.microsoft.com/search/en-us/?query=" + document.getElementById("HeaderSearchTextBox").value();
    }

    function SearchClientClick() {
        if (document.getElementById("HeaderSearchTextBox").value == document.getElementById("HeaderSearchTextBox").title) return false;
        document.HeaderSearchForm.submit();return true;
    }
</script><script type="text/javascript" id="mscom.srch.searchBox" src="wp7trainingcourse_2dgamedevelopmentwithxnapart2lab_topic3_files/SearchBox.js" defer="defer"></script><script src="wp7trainingcourse_2dgamedevelopmentwithxnapart2lab_topic3_files/jquery.js" type="text/javascript"></script><script src="wp7trainingcourse_2dgamedevelopmentwithxnapart2lab_topic3_files/recipes.js" type="text/javascript"></script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript" src="wp7trainingcourse_2dgamedevelopmentwithxnapart2lab_topic3_files/dap.js"></script><script type="text/javascript">
      try {
        dapMgr.enableACB("c_44bf3ef860914706b81bfbfe5cf06cee", false);
        dapMgr.renderAd("c_44bf3ef860914706b81bfbfe5cf06cee", "&amp;PG=CMS3DB&amp;AP=1089", "300", "250");
      } catch (ex) { }
    </script><script type="text/javascript">
      try {
        dapMgr.enableACB("c_5fe28746f4ac46c0955adc338be3d3f4", false);
        dapMgr.renderAd("c_5fe28746f4ac46c0955adc338be3d3f4", "&amp;PG=CMS3DL&amp;AP=1390", "728", "90");
      } catch (ex) { }
    </script><script type="text/javascript">

      var wt_nvr_ru = "WT_NVR_RU";
      var wt_fpcdom = ".microsoft.com";
      var wt_domlist = "msdn.microsoft.com";
      var wt_pathlist = "";var wt_paramlist = "DCSext.mtps_devcenter";
      var wt_siteid = "MSDN";
      var gDomain="m.webtrends.com";
var gDcsId = "dcsmgru7m99k7mqmgrhudo0k8_8c6m";
var gFpc = "WT_FPC";
/*<![CDATA[*/
if (document.cookie.indexOf(gFpc + "=") == -1) { document.write("<scr" + "ipt type='text/javascript' src='" + "http" + (window.location.protocol.indexOf('https:') == 0 ? 's' : '') + "://" + gDomain + "/" + gDcsId + "/wtid.js" + "'><\/scr" + "ipt>"); }
/*]]>*/
var detectedLocale = "en-us";
var wtsp = "_msdn_";
var gTrackEvents = "1";
</script><script type="text/javascript" src="wp7trainingcourse_2dgamedevelopmentwithxnapart2lab_topic3_files/webtrendsscript.js"></script><script type="text/javascript">var omni_guid = 'c_44056f853cd34b229052f62ec6f5d3d3';</script><script language="javascript" type="text/javascript" src="wp7trainingcourse_2dgamedevelopmentwithxnapart2lab_topic3_files/broker.js"></script><!-- HtmlResponseFilter:32:ms --><script src="wp7trainingcourse_2dgamedevelopmentwithxnapart2lab_topic3_files/broker-config.js"></script></body></html>