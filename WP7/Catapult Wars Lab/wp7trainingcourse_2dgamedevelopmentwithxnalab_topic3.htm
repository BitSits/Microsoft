<!DOCTYPE HTML PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">  <meta http-equiv="X-UA-Compatible" content="IE=8"> <meta name="search.content.shortId" content="gg266463"> <meta name="search.content.locale" content="en-us"> <meta name="MN" content="B9D26F3F-10:43:21 PM"> <meta http-equiv="content-language" content="en"> <link rel="canonical" href="http://msdn.microsoft.com/en-us/gg266463"> <meta name="NormalizedUrl" href="http://msdn.microsoft.com/en-us/gg266463%28d=default,l=en-us,v=MSDN.10%29.aspx"> <link href="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic3_files/StoCodeHighlighter.css" type="text/css" rel="stylesheet"><link href="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic3_files/default_003.css" type="text/css" rel="stylesheet"><link href="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic3_files/default.css" type="text/css" rel="stylesheet"><link href="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic3_files/default_002.css" type="text/css" rel="stylesheet"> <title>Exercise 2: Game polish and menus</title><style type="text/css">/* Chili -- cs */
.cs__mlcom { color: #4040c2; }
.cs__com { color: green; }
.cs__string { color: teal; }
.cs__preproc { color: red; }
.cs__number { color: red; }
.cs__keyword { color: navy; font-weight: bold; }</style></head><body id="MTPS_Body" class="MsdnPageBody"> <div id="BodyBackground"> <div id="JelloSizer"> <div id="JelloExpander"> <div id="JelloWrapper"> <div class="Clear"> </div> <div class="Masthead"> <div class="BrandLogo"> <a title="Microsoft Developer Network" href="http://msdn.microsoft.com/en-us/"> <span> Microsoft Developer Network </span> </a></div><div class="Search"> <div class="SearchBox"> <form name="HeaderSearchForm" method="post" action=""> <input name="SearchAction" value="search" type="hidden"> <input value="Search MSDN with Bing" style="color: rgb(170, 170, 170); font-style: italic;" autocomplete="off" id="HeaderSearchTextBox" class="TextBoxSearch" title="Search MSDN with Bing" type="text"> <input id="HeaderSearchButton" onclick="return SearchClientClick();" class="SearchButton" alt="Click here to search" title="Search MSDN with Bing" type="button"> <span class="Bing"></span> <div style="display: none; text-align: left; border: 1px solid buttonshadow; position: absolute; z-index: 1000; padding: 2px; background-color: rgb(255, 255, 255); color: rgb(0, 0, 255); font-family: arial;" id="SearchFlyoutContainer"><div id="SuggestionContainer"><ul style="list-style: none outside none; padding: 4px 2px 0px 1px; cursor: pointer; font-size: 8pt; margin: 1px;"></ul></div><div style="width: 100%; margin: 0px; text-align: right; font-size: 8pt;" id="FooterContainer"><a href="#">Close</a></div></div></form> </div></div> <div class="GlobalBar"> <div class="PassportScarab"> <a id="idPPScarab" href="https://login.live.com/login.srf?wa=wsignin1.0&amp;rpsnv=11&amp;ct=1294037001&amp;rver=6.0.5276.0&amp;wp=MCLBI&amp;wlcxt=msdn%24msdn%24msdn&amp;wreply=http:%2F%2Fmsdn.microsoft.com%2Fen-us%2Fwp7trainingcourse_2dgamedevelopmentwithxnalab_topic3&amp;lc=1033&amp;cb=&amp;id=254354"><span id="idPPScarabSIT">Sign in</span></a></div><div id="LocaleSelector"> <form id="ChangeLocaleForm" action="/en-us/SelectLocale?pageid=wp7trainingcourse_2dgamedevelopmentwithxnalab_topic3"> <input name="fromPage" value="http://msdn.microsoft.com/en-us/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic3" type="hidden"> <div id="FlyoutTop"> <a title="Change your language" href="#Change+your+language" onclick="$('#ChangeLocaleForm').submit();return false;" id="LinkCountryLanguage" class="LocaleManagementFlyoutStaticLink"> United States (English) </a> </div> </form></div> <div class="Clear"></div> </div> <div class="Clear"></div> <div class="networkTagLineArea NetworkLogo"> <a title="Microsoft Developer Network" href="http://msdn.microsoft.com/en-us"></a> </div><div class="leftcap"></div> <div class="internav"> <a href="http://msdn.microsoft.com/en-us/default" class="normal" title="Home">Home</a><a href="http://msdn.microsoft.com/library/default.aspx" class="normal" title="Library">Library</a><a href="http://msdn.microsoft.com/en-us/bb188199" class="active" title="Learn">Learn</a><a href="http://msdn.microsoft.com/en-us/aa570309" class="normal" title="Downloads">Downloads</a><a href="http://msdn.microsoft.com/en-us/aa570318" class="normal" title="Support">Support</a><a href="http://msdn.microsoft.com/en-us/aa497440" class="normal" title="Community">Community</a><a href="http://social.msdn.microsoft.com/Forums/en-US/categories" class="normal" title="Forums">Forums</a></div><div class="rightcap"></div><div class="Clear"></div> </div> <div class="Clear"> </div> <div class="topleftcorner"> </div> <div class="toprightcorner"> </div> <div class="alley"> <div class="wrapper"> <div class="inner"> <div class="Clear"> </div> <div class="BreadCrumb"><div class="BreadCrumbInner EyebrowContainer"><a href="http://msdn.microsoft.com/en-us/default" class="EyebrowLink" title="Microsoft Developer Network">Microsoft Developer Network</a> &gt; <a href="http://msdn.microsoft.com/en-us/bb188199" class="EyebrowLink" title="Learn">Learn</a> &gt; <a href="http://msdn.microsoft.com/en-us/gg299335" class="EyebrowLink" title="Courses">Courses</a> &gt; <a href="http://msdn.microsoft.com/en-us/gg266499" class="EyebrowLink" title="Windows Phone 7 Training Course">Windows Phone 7 Training Course</a> &gt; <a href="http://msdn.microsoft.com/en-us/gg266479" class="EyebrowLink" title="XNA Framework 4.0 for Windows Phones">XNA Framework 4.0 for Windows Phones</a> &gt; <a href="http://msdn.microsoft.com/en-us/gg266460" class="EyebrowLink" title="Catapult Wars Lab">Catapult Wars Lab</a> &gt; <span class="EyebrowElement">Exercise 2: Game polish and menus</span> </div></div><div id="mainSection"><div class="navpage"><table class="multicol"><tbody><tr><td class="innercol" valign="top"><div class="MainColumn"><h2 class="Title">Exercise 2: Game polish and menus</h2><p>In
 the previous exercise, we implemented a game with playable logic. While
 the game is fully playable in its current state, the game experience 
lacks polish. Our first task in this exercise is to improve the game’s 
presentation by incorporating sound and animation.</p><p>Later in the 
exercise, we will add additional elements that are part of the game but 
are not part of the actual gameplay screen. We will add a main menu and 
an instructions screen, and give the user the ability to pause the game 
and display a pause screen.</p><p></p><a id="_Toc271900421" href="#"></a><h3>Task 1 – Polishing the game – sounds and animations</h3><ol><li>Create a new project folder under the “CatapultGame” project and name it <strong>Utility</strong>.</li><li>Create a new class under the “Utility” project folder and name it <strong>Animation</strong>.</li><li>Add the following using statements to the beginning of the new class file:<p>(Code Snippet – 2D <em>Game Development with XNA – Animation Usings</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">using</span>&nbsp;Microsoft.Xna.Framework;<span class="cs__keyword">using</span>&nbsp;Microsoft.Xna.Framework.Graphics;</li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"><strong>&nbsp;</strong>remember to keep setting the namespace for new classes to “CatapultGame”.</div></div><p></p></li><li>Add the following fields to the Animation class:<p>(Code Snippet – 2D <em>Game Development with XNA – Animation Fields</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__com">//&nbsp;Animation&nbsp;variablesTexture2D&nbsp;animatedCharacter;Point&nbsp;sheetSize;&nbsp;public&nbsp;Point&nbsp;currentFrame;public&nbsp;Point&nbsp;frameSize;</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 the preceding fields allow the animation class to save a texture that 
serves as the animation strip as well as allow tracking of the 
animation’s dimensions and state.</div></div><p></p></li><li>Add the following properties to the Animation class:<p>(Code Snippet – 2D <em>Game Development with XNA – Animation Properties</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">int</span>&nbsp;FrameCount{&nbsp;get&nbsp;{&nbsp;<span class="cs__keyword">return</span>&nbsp;sheetSize.X&nbsp;*&nbsp;sheetSize.Y;&nbsp;}}<span class="cs__keyword">public</span>&nbsp;Vector2&nbsp;Offset&nbsp;{&nbsp;get;&nbsp;set;&nbsp;}<span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">int</span>&nbsp;FrameIndex{&nbsp;get&nbsp;{&nbsp;<span class="cs__keyword">return</span>&nbsp;sheetSize.X&nbsp;*&nbsp;currentFrame.Y&nbsp;+&nbsp;currentFrame.X;&nbsp;}&nbsp;set&nbsp;{&nbsp;<span class="cs__keyword">if</span>&nbsp;(value&nbsp;&gt;=&nbsp;sheetSize.X&nbsp;*&nbsp;sheetSize.Y&nbsp;+&nbsp;<span class="cs__number">1</span>)&nbsp;{&nbsp;<span class="cs__keyword">throw</span>&nbsp;<span class="cs__keyword">new</span>&nbsp;InvalidOperationException(&nbsp;<span class="cs__string">"Specified&nbsp;frame&nbsp;index&nbsp;exeeds&nbsp;available&nbsp;frames"</span>);&nbsp;}&nbsp;currentFrame.Y&nbsp;=&nbsp;value&nbsp;/&nbsp;sheetSize.X;&nbsp;currentFrame.X&nbsp;=&nbsp;value&nbsp;%&nbsp;sheetSize.X;&nbsp;}}<span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">bool</span>&nbsp;IsActive&nbsp;{&nbsp;get;&nbsp;<span class="cs__keyword">private</span>&nbsp;set;&nbsp;}</li></ol></code></pre></div><p></p><p>To clarify the meaning of the preceding properties: </p><ul><li>“FrameCount” simply returns the number of frames contained in the animation represented by the Animation object</li><li>“Offset” is used to draw the animation at a specified offset by adding the offset value to the position passed to the existing <strong>Draw</strong> call</li><li>“FrameIndex” returns the index of the animation’s current frame or sets it</li><li>“IsActive” can be used to pause the animation by setting it to false.<p></p></li></ul></li><li>Add the following constructor to the Animation class:<p>(Code Snippet – 2D <em>Game Development with XNA – Animation Constructor</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;Animation(Texture2D&nbsp;frameSheet,&nbsp;Point&nbsp;size,&nbsp;Point&nbsp;frameSheetSize){&nbsp;animatedCharacter&nbsp;=&nbsp;frameSheet;&nbsp;frameSize&nbsp;=&nbsp;size;&nbsp;sheetSize&nbsp;=&nbsp;frameSheetSize;&nbsp;Offset&nbsp;=&nbsp;Vector2.Zero;}</li></ol></code></pre></div><p></p></li><li>Add a new method to the Animation class and name it <strong>Update</strong>. <div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> notice that this method is not an override and will need to be explicitly called in order to advance the animation:</div></div><p></p><p>(Code Snippet – 2D <em>Game Development with XNA – Animation Update</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;Update(){&nbsp;<span class="cs__keyword">if</span>&nbsp;(IsActive)&nbsp;{&nbsp;<span class="cs__keyword">if</span>&nbsp;(FrameIndex&nbsp;&gt;=&nbsp;FrameCount&nbsp;-&nbsp;<span class="cs__number">1</span>)&nbsp;{&nbsp;IsActive&nbsp;=&nbsp;<span class="cs__keyword">false</span>;&nbsp;FrameIndex&nbsp;=&nbsp;FrameCount&nbsp;-&nbsp;<span class="cs__number">1</span>;&nbsp;<span class="cs__com">//&nbsp;Stop&nbsp;at&nbsp;last&nbsp;frame&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;//&nbsp;Remember&nbsp;that&nbsp;updating&nbsp;"currentFrame"&nbsp;will&nbsp;also&nbsp;//&nbsp;update&nbsp;the&nbsp;FrameIndex&nbsp;property.&nbsp;currentFrame.X++;&nbsp;if&nbsp;(currentFrame.X&nbsp;&gt;=&nbsp;sheetSize.X)&nbsp;{&nbsp;currentFrame.X&nbsp;=&nbsp;0;&nbsp;currentFrame.Y++;&nbsp;}&nbsp;if&nbsp;(currentFrame.Y&nbsp;&gt;=&nbsp;sheetSize.Y)&nbsp;currentFrame.Y&nbsp;=&nbsp;0;&nbsp;}&nbsp;}}</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> the preceding method simply advances the animation by a single frame, stopping the animation if it has reached the final frame.</div></div><p></p></li><li>Add the following to <strong>Draw</strong> methods to the animation class:<p>(Code Snippet – 2D <em>Game Development with XNA – Animation Draw</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;Draw(SpriteBatch&nbsp;spriteBatch,&nbsp;Vector2&nbsp;position,&nbsp;SpriteEffects&nbsp;spriteEffect){&nbsp;Draw(spriteBatch,&nbsp;position,&nbsp;<span class="cs__number">1</span>.0f,&nbsp;spriteEffect);}<span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;Draw(SpriteBatch&nbsp;spriteBatch,&nbsp;Vector2&nbsp;position,&nbsp;<span class="cs__keyword">float</span>&nbsp;scale,&nbsp;SpriteEffects&nbsp;spriteEffect){&nbsp;spriteBatch.Draw(animatedCharacter,&nbsp;position&nbsp;+&nbsp;Offset,&nbsp;<span class="cs__keyword">new</span>&nbsp;Rectangle(&nbsp;frameSize.X&nbsp;*&nbsp;currentFrame.X,&nbsp;frameSize.Y&nbsp;*&nbsp;currentFrame.Y,&nbsp;frameSize.X,&nbsp;frameSize.Y),&nbsp;Color.White,&nbsp;0f,&nbsp;Vector2.Zero,&nbsp;scale,&nbsp;spriteEffect,&nbsp;<span class="cs__number">0</span>);}</li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 the preceding methods simply draw the portion of the animation sheet 
that matches the current frame, with the second override allowing the 
animation to be scaled.</div></div><p></p></li><li>Add a final method to the Animation class and name it <strong>PlayFromFrameIndex</strong>. Use this method for playing an animation from a specified frame.<p>(Code Snippet – 2D <em>Game Development with XNA – PlayFromFrameIndex</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;PlayFromFrameIndex(<span class="cs__keyword">int</span>&nbsp;frameIndex){&nbsp;FrameIndex&nbsp;=&nbsp;frameIndex;&nbsp;IsActive&nbsp;=&nbsp;<span class="cs__keyword">true</span>;}</li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 We now have a class that represents an animation and encapsulates its 
functionality. Next, we add an additional class to support sound 
playback.</div></div><p></p></li><li>Add a new class under the “Utility” project folder and name it <strong>AudioManager</strong>.</li><li>Add the following using statements to the beginning of the new class file:<p>(Code Snippet – 2D <em>Game Development with XNA – AudioManager Usings</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">using</span>&nbsp;Microsoft.Xna.Framework;<span class="cs__keyword">using</span>&nbsp;Microsoft.Xna.Framework.Audio;</li></ol></code></pre></div><p></p></li><li>We would like this class to be a singleton game component. First, alter the class to inherit from the GameComponent class:<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">class</span>&nbsp;AudioManager&nbsp;:&nbsp;GameComponent{}</li></ol></code></pre></div><p></p></li><li>Add the following field to contain the AudioManager’s singleton instance and maintain sound related data:<p>(Code Snippet – 2D <em>Game Development with XNA – AudioManager Fields</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">private</span>&nbsp;<span class="cs__keyword">static</span>&nbsp;AudioManager&nbsp;audioManager&nbsp;=&nbsp;<span class="cs__keyword">null</span>;<span class="cs__keyword">private</span>&nbsp;SoundEffectInstance&nbsp;musicSound;<span class="cs__keyword">private</span>&nbsp;Dictionary&lt;<span class="cs__keyword">string</span>,&nbsp;SoundEffectInstance&gt;&nbsp;soundBank;<span class="cs__keyword">private</span>&nbsp;<span class="cs__keyword">string</span>[,]&nbsp;soundNames;</li></ol></code></pre></div><p></p></li><li>Add the following constructor to the class:<p>(Code Snippet – 2D <em>Game Development with XNA – AudioManager Constructor</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">private</span>&nbsp;AudioManager(Game&nbsp;game)&nbsp;:&nbsp;<span class="cs__keyword">base</span>(game)&nbsp;{&nbsp;}</li></ol></code></pre></div><p></p></li><li>Add a method and name it <strong>Initialize</strong>. This method initializes the singleton instance and registers it with the game:<p>(Code Snippet – 2D <em>Game Development with XNA – AudioManager Initialize</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">static</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;Initialize(Game&nbsp;game){&nbsp;audioManager&nbsp;=&nbsp;<span class="cs__keyword">new</span>&nbsp;AudioManager(game);&nbsp;<span class="cs__keyword">if</span>&nbsp;(game&nbsp;!=&nbsp;<span class="cs__keyword">null</span>)&nbsp;{&nbsp;game.Components.Add(audioManager);&nbsp;}}</li></ol></code></pre></div><p></p></li><li>Add a new method and name it <strong>LoadSounds</strong>. This method loads a predefined set of sound assets, which we added to the content project during the first exercise:<p>(Code Snippet – 2D <em>Game Development with XNA – AudioManager LoadSounds</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">static</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;LoadSounds(){&nbsp;<span class="cs__keyword">string</span>&nbsp;soundLocation&nbsp;=&nbsp;<span class="cs__string">"Sounds/"</span>;&nbsp;audioManager.soundNames&nbsp;=&nbsp;<span class="cs__keyword">new</span>&nbsp;<span class="cs__keyword">string</span>[,]&nbsp;{&nbsp;&nbsp;{<span class="cs__string">"CatapultExplosion"</span>,&nbsp;<span class="cs__string">"catapultExplosion"</span>},&nbsp;&nbsp;{<span class="cs__string">"Lose"</span>,&nbsp;<span class="cs__string">"gameOver_Lose"</span>},&nbsp;{<span class="cs__string">"Win"</span>,&nbsp;<span class="cs__string">"gameOver_Win"</span>},&nbsp;{<span class="cs__string">"BoulderHit"</span>,&nbsp;<span class="cs__string">"boulderHit"</span>},&nbsp;{<span class="cs__string">"CatapultFire"</span>,&nbsp;<span class="cs__string">"catapultFire"</span>},&nbsp;{<span class="cs__string">"RopeStretch"</span>,&nbsp;<span class="cs__string">"ropeStretch"</span>}};&nbsp;audioManager.soundBank&nbsp;=&nbsp;<span class="cs__keyword">new</span>&nbsp;Dictionary&lt;<span class="cs__keyword">string</span>,&nbsp;SoundEffectInstance&gt;();&nbsp;<span class="cs__keyword">for</span>&nbsp;(<span class="cs__keyword">int</span>&nbsp;i&nbsp;=&nbsp;<span class="cs__number">0</span>;&nbsp;i&nbsp;&lt;&nbsp;audioManager.soundNames.GetLength(<span class="cs__number">0</span>);&nbsp;i++)&nbsp;{&nbsp;SoundEffect&nbsp;se&nbsp;=&nbsp;audioManager.Game.Content.Load&lt;SoundEffect&gt;(&nbsp;soundLocation&nbsp;+&nbsp;audioManager.soundNames[i,&nbsp;<span class="cs__number">0</span>]);&nbsp;audioManager.soundBank.Add(&nbsp;audioManager.soundNames[i,&nbsp;<span class="cs__number">1</span>],&nbsp;se.CreateInstance());&nbsp;}}</li></ol></code></pre></div><p></p></li><li>Add the following methods to the AudioManager class:<p>(Code Snippet – 2D <em>Game Development with XNA – Play and Stop Sound</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">static</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;PlaySound(<span class="cs__keyword">string</span>&nbsp;soundName){&nbsp;<span class="cs__com">//&nbsp;If&nbsp;the&nbsp;sound&nbsp;exists,&nbsp;start&nbsp;it&nbsp;if&nbsp;(audioManager.soundBank.ContainsKey(soundName))&nbsp;audioManager.soundBank[soundName].Play();}public&nbsp;static&nbsp;void&nbsp;PlaySound(string&nbsp;soundName,&nbsp;bool&nbsp;isLooped){&nbsp;//&nbsp;If&nbsp;the&nbsp;sound&nbsp;exists,&nbsp;start&nbsp;it&nbsp;if&nbsp;(audioManager.soundBank.ContainsKey(soundName))&nbsp;{&nbsp;if&nbsp;(audioManager.soundBank[soundName].IsLooped&nbsp;!=&nbsp;isLooped)&nbsp;audioManager.soundBank[soundName].IsLooped&nbsp;=&nbsp;isLooped;&nbsp;audioManager.soundBank[soundName].Play();&nbsp;}}public&nbsp;static&nbsp;void&nbsp;StopSound(string&nbsp;soundName){&nbsp;//&nbsp;If&nbsp;the&nbsp;sound&nbsp;exists,&nbsp;stop&nbsp;it&nbsp;if&nbsp;(audioManager.soundBank.ContainsKey(soundName))&nbsp;audioManager.soundBank[soundName].Stop();}public&nbsp;static&nbsp;void&nbsp;StopSounds(){&nbsp;var&nbsp;soundEffectInstances&nbsp;=&nbsp;from&nbsp;sound&nbsp;in&nbsp;audioManager.soundBank.Values&nbsp;where&nbsp;sound.State&nbsp;!=&nbsp;SoundState.Stopped&nbsp;select&nbsp;sound;&nbsp;foreach&nbsp;(var&nbsp;soundeffectInstance&nbsp;in&nbsp;soundEffectInstances)&nbsp;soundeffectInstance.Stop();}public&nbsp;static&nbsp;void&nbsp;PauseResumeSounds(bool&nbsp;isPause){&nbsp;SoundState&nbsp;state&nbsp;=&nbsp;isPause&nbsp;?&nbsp;SoundState.Paused&nbsp;:&nbsp;SoundState.Playing;&nbsp;var&nbsp;soundEffectInstances&nbsp;=&nbsp;from&nbsp;sound&nbsp;in&nbsp;audioManager.soundBank.Values&nbsp;where&nbsp;sound.State&nbsp;==&nbsp;state&nbsp;select&nbsp;sound;&nbsp;foreach&nbsp;(var&nbsp;soundeffectInstance&nbsp;in&nbsp;soundEffectInstances)&nbsp;{&nbsp;if&nbsp;(isPause)&nbsp;soundeffectInstance.Play();&nbsp;else&nbsp;soundeffectInstance.Pause();&nbsp;}}public&nbsp;static&nbsp;void&nbsp;PlayMusic(string&nbsp;musicSoundName){&nbsp;//&nbsp;Stop&nbsp;the&nbsp;old&nbsp;music&nbsp;sound&nbsp;if&nbsp;(audioManager.musicSound&nbsp;!=&nbsp;null)&nbsp;audioManager.musicSound.Stop(true);&nbsp;//&nbsp;If&nbsp;the&nbsp;music&nbsp;sound&nbsp;exists&nbsp;if&nbsp;(audioManager.soundBank.ContainsKey(musicSoundName))&nbsp;{&nbsp;//&nbsp;Get&nbsp;the&nbsp;instance&nbsp;and&nbsp;start&nbsp;it&nbsp;audioManager.musicSound&nbsp;=&nbsp;audioManager.soundBank[musicSoundName];&nbsp;if&nbsp;(!audioManager.musicSound.IsLooped)&nbsp;audioManager.musicSound.IsLooped&nbsp;=&nbsp;true;&nbsp;audioManager.musicSound.Play();&nbsp;}}</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 the preceding methods allows playing and stopping the sounds loaded 
with the LoadSounds method, stopping all currently playing sounds, 
pausing all currently playing sounds, and resuming all currently paused 
sounds. The final method enables support for background music, but is 
not used during this exercise.</div></div><p></p></li><li>Add a final method to the AudioManager class by overriding the <strong>Dispose</strong> method:<p>(Code Snippet – 2D <em>Game Development with XNA – AudioManager Dispose</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">protected</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;Dispose(<span class="cs__keyword">bool</span>&nbsp;disposing){&nbsp;<span class="cs__keyword">try</span>&nbsp;{&nbsp;<span class="cs__keyword">if</span>&nbsp;(disposing)&nbsp;{&nbsp;<span class="cs__keyword">foreach</span>&nbsp;(var&nbsp;item&nbsp;<span class="cs__keyword">in</span>&nbsp;soundBank)&nbsp;{&nbsp;item.Value.Dispose();&nbsp;}&nbsp;soundBank.Clear();&nbsp;soundBank&nbsp;=&nbsp;<span class="cs__keyword">null</span>;&nbsp;}&nbsp;}&nbsp;<span class="cs__keyword">finally</span>&nbsp;{&nbsp;<span class="cs__keyword">base</span>.Dispose(disposing);&nbsp;}}</li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> The preceding method disposes of all sound instances created by the AudioManager.<p></p>Now
 that we have support for both animation and sound, we can revisit the 
various classes created during the previous exercise in order to enhance
 their functionality.</div></div><p></p></li><li>Open the <strong>Catapult.cs</strong>
 under the "Catapult" folder and examine the class’s fields. Two fields 
are commented out using the prefix “UNCOMMENT”. Restore these fields to 
make them available. The field section should now look as follows:<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li>...<span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">string</span>&nbsp;Name;<span class="cs__com">//&nbsp;In&nbsp;some&nbsp;cases&nbsp;the&nbsp;game&nbsp;need&nbsp;to&nbsp;start&nbsp;second&nbsp;animation&nbsp;while&nbsp;first&nbsp;animation&nbsp;is&nbsp;still&nbsp;running;//&nbsp;this&nbsp;variable&nbsp;define&nbsp;at&nbsp;which&nbsp;frame&nbsp;the&nbsp;second&nbsp;animation&nbsp;should&nbsp;startDictionary&lt;string,&nbsp;int&gt;&nbsp;splitFrames;Texture2D&nbsp;idleTexture;Dictionary&lt;string,&nbsp;Animation&gt;&nbsp;animations;SpriteEffects&nbsp;spriteEffects;...</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> these new fields map animations to a specific name and define important frames during specific animations.</div></div><p></p></li><li>Navigate to the Catapult class’s constructor and uncomment the final two lines. The constructor should now look as follows:<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;Catapult(Game&nbsp;game,&nbsp;SpriteBatch&nbsp;screenSpriteBatch,&nbsp;&nbsp;&nbsp;&nbsp;<span class="cs__keyword">string</span>&nbsp;IdleTexture,&nbsp;&nbsp;&nbsp;&nbsp;Vector2&nbsp;CatapultPosition,&nbsp;SpriteEffects&nbsp;SpriteEffect,&nbsp;<span class="cs__keyword">bool</span>&nbsp;IsAI)&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;<span class="cs__keyword">this</span>(game){&nbsp;&nbsp;&nbsp;&nbsp;idleTextureName&nbsp;=&nbsp;IdleTexture;&nbsp;&nbsp;&nbsp;&nbsp;catapultPosition&nbsp;=&nbsp;CatapultPosition;&nbsp;&nbsp;&nbsp;&nbsp;spriteEffects&nbsp;=&nbsp;SpriteEffect;&nbsp;&nbsp;&nbsp;&nbsp;spriteBatch&nbsp;=&nbsp;screenSpriteBatch;&nbsp;&nbsp;&nbsp;&nbsp;isAI&nbsp;=&nbsp;IsAI;&nbsp;splitFrames&nbsp;=&nbsp;<span class="cs__keyword">new</span>&nbsp;Dictionary&lt;<span class="cs__keyword">string</span>,&nbsp;<span class="cs__keyword">int</span>&gt;();&nbsp;animations&nbsp;=&nbsp;<span class="cs__keyword">new</span>&nbsp;Dictionary&lt;<span class="cs__keyword">string</span>,&nbsp;Animation&gt;();}</li></ol></code></pre></div><p></p></li><li>Navigate to the Catapult class’s <strong>Initialize</strong> method. Locate the comment “// TODO: Update hit offset”, and change the code directly below it to the following:<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li>...Vector2&nbsp;projectileStartPosition;<span class="cs__keyword">if</span>&nbsp;(isAI)&nbsp;&nbsp;&nbsp;&nbsp;projectileStartPosition&nbsp;=&nbsp;<span class="cs__keyword">new</span>&nbsp;Vector2(<span class="cs__number">630</span>,&nbsp;<span class="cs__number">340</span>);<span class="cs__keyword">else</span>&nbsp;&nbsp;&nbsp;&nbsp;projectileStartPosition&nbsp;=&nbsp;<span class="cs__keyword">new</span>&nbsp;Vector2(<span class="cs__number">175</span>,&nbsp;<span class="cs__number">340</span>);projectile&nbsp;=&nbsp;<span class="cs__keyword">new</span>&nbsp;Projectile(curGame,&nbsp;spriteBatch,&nbsp;<span class="cs__string">"Textures/Ammo/rock_ammo"</span>,&nbsp;projectileStartPosition,&nbsp;animations[<span class="cs__string">"Fire"</span>].frameSize.Y,&nbsp;isAI,&nbsp;gravity);projectile.Initialize();AnimationRunning&nbsp;=&nbsp;<span class="cs__keyword">false</span>;stallUpdateCycles&nbsp;=&nbsp;<span class="cs__number">0</span>;...</li></ol></code></pre></div><p></p></li><li>Further modify the <strong>Initialize</strong> method by adding the following code at the top of the method:<p>(Code Snippet – 2D <em>Game Development with XNA – Catapult Initialize Animations</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li>...{<span class="cs__com">//&nbsp;Load&nbsp;multiple&nbsp;animations&nbsp;form&nbsp;XML&nbsp;definitionXDocument&nbsp;doc&nbsp;=&nbsp;XDocument.Load("Content/Textures/Catapults/AnimationsDef.xml");XName&nbsp;name&nbsp;=&nbsp;XName.Get("Definition");var&nbsp;definitions&nbsp;=&nbsp;doc.Document.Descendants(name);//&nbsp;Loop&nbsp;over&nbsp;all&nbsp;definitions&nbsp;in&nbsp;XMLforeach&nbsp;(var&nbsp;animationDefinition&nbsp;in&nbsp;definitions){&nbsp;bool?&nbsp;toLoad&nbsp;=&nbsp;null;&nbsp;bool&nbsp;val;&nbsp;if&nbsp;(bool.TryParse(animationDefinition.Attribute("IsAI").Value,&nbsp;out&nbsp;val))&nbsp;toLoad&nbsp;=&nbsp;val;&nbsp;//&nbsp;Check&nbsp;if&nbsp;the&nbsp;animation&nbsp;definition&nbsp;needs&nbsp;to&nbsp;be&nbsp;loaded&nbsp;for&nbsp;current&nbsp;//&nbsp;catapult&nbsp;if&nbsp;(toLoad&nbsp;==&nbsp;isAI&nbsp;||&nbsp;null&nbsp;==&nbsp;toLoad)&nbsp;{&nbsp;//&nbsp;Get&nbsp;a&nbsp;name&nbsp;of&nbsp;the&nbsp;animation&nbsp;string&nbsp;animatonAlias&nbsp;=&nbsp;animationDefinition.Attribute("Alias").Value;&nbsp;Texture2D&nbsp;texture&nbsp;=&nbsp;curGame.Content.Load&lt;Texture2D&gt;(&nbsp;animationDefinition.Attribute("SheetName").Value);&nbsp;//&nbsp;Get&nbsp;the&nbsp;frame&nbsp;size&nbsp;(width&nbsp;&amp;&nbsp;height)&nbsp;Point&nbsp;frameSize&nbsp;=&nbsp;new&nbsp;Point();&nbsp;frameSize.X&nbsp;=&nbsp;int.Parse(&nbsp;animationDefinition.Attribute("FrameWidth").Value);&nbsp;frameSize.Y&nbsp;=&nbsp;int.Parse(&nbsp;animationDefinition.Attribute("FrameHeight").Value);&nbsp;//&nbsp;Get&nbsp;the&nbsp;frames&nbsp;sheet&nbsp;dimensions&nbsp;Point&nbsp;sheetSize&nbsp;=&nbsp;new&nbsp;Point();&nbsp;sheetSize.X&nbsp;=&nbsp;int.Parse(&nbsp;animationDefinition.Attribute("SheetColumns").Value);&nbsp;sheetSize.Y&nbsp;=&nbsp;int.Parse(&nbsp;animationDefinition.Attribute("SheetRows").Value);&nbsp;//&nbsp;If&nbsp;definition&nbsp;has&nbsp;a&nbsp;"SplitFrame",&nbsp;it&nbsp;means&nbsp;that&nbsp;other&nbsp;animation&nbsp;//&nbsp;should&nbsp;start&nbsp;here&nbsp;-&nbsp;load&nbsp;it&nbsp;if&nbsp;(null&nbsp;!=&nbsp;animationDefinition.Attribute("SplitFrame"))&nbsp;splitFrames.Add(animatonAlias,&nbsp;int.Parse(animationDefinition.Attribute("SplitFrame").Value));&nbsp;//&nbsp;Defing&nbsp;animation&nbsp;speed&nbsp;TimeSpan&nbsp;frameInterval&nbsp;=&nbsp;TimeSpan.FromSeconds((float)1&nbsp;/&nbsp;int.Parse(animationDefinition.Attribute("Speed").Value));&nbsp;Animation&nbsp;animation&nbsp;=&nbsp;new&nbsp;Animation(texture,&nbsp;frameSize,&nbsp;sheetSize);&nbsp;//&nbsp;If&nbsp;definition&nbsp;has&nbsp;an&nbsp;offset&nbsp;defined,&nbsp;it&nbsp;means&nbsp;that&nbsp;it&nbsp;should&nbsp;be&nbsp;//&nbsp;rendered&nbsp;relatively&nbsp;to&nbsp;some&nbsp;element/other&nbsp;animation&nbsp;-&nbsp;load&nbsp;it&nbsp;if&nbsp;(null&nbsp;!=&nbsp;animationDefinition.Attribute("OffsetX")&nbsp;&amp;&amp;&nbsp;null&nbsp;!=&nbsp;animationDefinition.Attribute("OffsetY"))&nbsp;{&nbsp;animation.Offset&nbsp;=&nbsp;new&nbsp;Vector2(int.Parse(&nbsp;animationDefinition.Attribute("OffsetX").Value),&nbsp;int.Parse(animationDefinition.Attribute("OffsetY").Value));&nbsp;}&nbsp;animations.Add(animatonAlias,&nbsp;animation);&nbsp;}}//&nbsp;Define&nbsp;initial&nbsp;state&nbsp;of&nbsp;the&nbsp;catapultcurrentState&nbsp;=&nbsp;CatapultState.Idle;...</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 the preceding code read the animation definition XML file, which is one
 of the assets contained in the project, and translates the animations 
defined in the file into instances of the Animation class we have 
defined.</div></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">the animation definition XML is located in the <strong>CatapultGameContent</strong> project under <strong>Textures</strong> and then under <strong>Catapults</strong>.</div></div><p></p></li><li>Replace the Catapult class’s <strong>CheckHit</strong>
 method. This version of the method takes the catapults size into 
account, instead of using constants, and it also plays back sounds when a
 projectile hits a catapult:<p>(Code Snippet – 2D <em>Game Development with XNA – Catapult New CheckHit</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">private</span>&nbsp;<span class="cs__keyword">bool</span>&nbsp;CheckHit(){&nbsp;<span class="cs__keyword">bool</span>&nbsp;bRes&nbsp;=&nbsp;<span class="cs__keyword">false</span>;&nbsp;<span class="cs__com">//&nbsp;Build&nbsp;a&nbsp;sphere&nbsp;around&nbsp;a&nbsp;projectile&nbsp;Vector3&nbsp;center&nbsp;=&nbsp;new&nbsp;Vector3(projectile.ProjectilePosition,&nbsp;0);&nbsp;BoundingSphere&nbsp;sphere&nbsp;=&nbsp;new&nbsp;BoundingSphere(center,&nbsp;&nbsp;Math.Max(projectile.ProjectileTexture.Width&nbsp;/&nbsp;2,&nbsp;&nbsp;projectile.ProjectileTexture.Height&nbsp;/&nbsp;2));&nbsp;//&nbsp;Check&nbsp;Self-Hit&nbsp;-&nbsp;create&nbsp;a&nbsp;bounding&nbsp;box&nbsp;around&nbsp;self&nbsp;Vector3&nbsp;min&nbsp;=&nbsp;new&nbsp;Vector3(catapultPosition,&nbsp;0);&nbsp;Vector3&nbsp;max&nbsp;=&nbsp;new&nbsp;Vector3(catapultPosition&nbsp;+&nbsp;&nbsp;new&nbsp;Vector2(animations["Fire"].frameSize.X,&nbsp;&nbsp;animations["Fire"].frameSize.Y),&nbsp;0);&nbsp;BoundingBox&nbsp;selfBox&nbsp;=&nbsp;new&nbsp;BoundingBox(min,&nbsp;max);&nbsp;//&nbsp;Check&nbsp;enemy&nbsp;-&nbsp;create&nbsp;a&nbsp;bounding&nbsp;box&nbsp;around&nbsp;the&nbsp;enemy&nbsp;min&nbsp;=&nbsp;new&nbsp;Vector3(enemy.Catapult.Position,&nbsp;0);&nbsp;max&nbsp;=&nbsp;new&nbsp;Vector3(enemy.Catapult.Position&nbsp;+&nbsp;&nbsp;new&nbsp;Vector2(animations["Fire"].frameSize.X,&nbsp;&nbsp;animations["Fire"].frameSize.Y),&nbsp;0);&nbsp;BoundingBox&nbsp;enemyBox&nbsp;=&nbsp;new&nbsp;BoundingBox(min,&nbsp;max);&nbsp;//&nbsp;Check&nbsp;self&nbsp;hit&nbsp;if&nbsp;(sphere.Intersects(selfBox)&nbsp;&amp;&amp;&nbsp;currentState&nbsp;!=&nbsp;CatapultState.Hit)&nbsp;{&nbsp;AudioManager.PlaySound("catapultExplosion");&nbsp;//&nbsp;Launch&nbsp;hit&nbsp;animation&nbsp;sequence&nbsp;on&nbsp;self&nbsp;Hit();&nbsp;enemy.Score++;&nbsp;bRes&nbsp;=&nbsp;true;&nbsp;}&nbsp;//&nbsp;Check&nbsp;if&nbsp;enemy&nbsp;was&nbsp;hit&nbsp;else&nbsp;if&nbsp;(sphere.Intersects(enemyBox)&nbsp;&amp;&amp;&nbsp;enemy.Catapult.CurrentState&nbsp;!=&nbsp;CatapultState.Hit&nbsp;&amp;&amp;&nbsp;enemy.Catapult.CurrentState&nbsp;!=&nbsp;CatapultState.Reset)&nbsp;{&nbsp;AudioManager.PlaySound("catapultExplosion");&nbsp;//&nbsp;Launch&nbsp;enemy&nbsp;hit&nbsp;animaton&nbsp;enemy.Catapult.Hit();&nbsp;self.Score++;&nbsp;bRes&nbsp;=&nbsp;true;&nbsp;currentState&nbsp;=&nbsp;CatapultState.Reset;&nbsp;}&nbsp;return&nbsp;bRes;}</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">compare this version with the previous one, focusing on the code near the “TODO” marker comments.</div></div><p></p></li><li>Replace the Catapult class’s <strong>Hit</strong> method with the following:<p>(Code Snippet – 2D <em>Game Development with XNA – Catapult New Hit</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;Hit(){&nbsp;AnimationRunning&nbsp;=&nbsp;<span class="cs__keyword">true</span>;&nbsp;animations[<span class="cs__string">"Destroyed"</span>].PlayFromFrameIndex(<span class="cs__number">0</span>);&nbsp;animations[<span class="cs__string">"hitSmoke"</span>].PlayFromFrameIndex(<span class="cs__number">0</span>);&nbsp;currentState&nbsp;=&nbsp;CatapultState.Hit;}</li></ol></code></pre></div><p></p></li><li>Add an additional reference to the CatapultGame project. The reference is for the <strong>Microsoft.Phone</strong> assembly.</li><li>Replace the Catapult class’s <strong>Update</strong> method with the following:<p>(Code Snippet – 2D <em>Game Development with XNA – Catapult New Update</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;Update(GameTime&nbsp;gameTime){&nbsp;<span class="cs__keyword">bool</span>&nbsp;isGroundHit;&nbsp;<span class="cs__keyword">bool</span>&nbsp;startStall;&nbsp;CatapultState&nbsp;postUpdateStateChange&nbsp;=&nbsp;<span class="cs__number">0</span>;&nbsp;<span class="cs__keyword">if</span>&nbsp;(gameTime&nbsp;==&nbsp;<span class="cs__keyword">null</span>)&nbsp;<span class="cs__keyword">throw</span>&nbsp;<span class="cs__keyword">new</span>&nbsp;ArgumentNullException(<span class="cs__string">"gameTime"</span>);&nbsp;<span class="cs__com">//&nbsp;The&nbsp;catapult&nbsp;is&nbsp;inactive,&nbsp;so&nbsp;there&nbsp;is&nbsp;nothing&nbsp;to&nbsp;update&nbsp;if&nbsp;(!IsActive)&nbsp;{&nbsp;base.Update(gameTime);&nbsp;return;&nbsp;}&nbsp;switch&nbsp;(currentState)&nbsp;{&nbsp;case&nbsp;CatapultState.Idle:&nbsp;//&nbsp;Nothing&nbsp;to&nbsp;do&nbsp;break;&nbsp;case&nbsp;CatapultState.Aiming:&nbsp;if&nbsp;(lastUpdateState&nbsp;!=&nbsp;CatapultState.Aiming)&nbsp;{&nbsp;AudioManager.PlaySound("ropeStretch",&nbsp;true);&nbsp;AnimationRunning&nbsp;=&nbsp;true;&nbsp;if&nbsp;(isAI&nbsp;==&nbsp;true)&nbsp;{&nbsp;animations["Aim"].PlayFromFrameIndex(0);&nbsp;stallUpdateCycles&nbsp;=&nbsp;20;&nbsp;startStall&nbsp;=&nbsp;false;&nbsp;}&nbsp;}&nbsp;//&nbsp;Progress&nbsp;Aiming&nbsp;"animation"&nbsp;if&nbsp;(isAI&nbsp;==&nbsp;false)&nbsp;{&nbsp;UpdateAimAccordingToShotStrength();&nbsp;}&nbsp;else&nbsp;{&nbsp;animations["Aim"].Update();&nbsp;startStall&nbsp;=&nbsp;AimReachedShotStrength();&nbsp;currentState&nbsp;=&nbsp;(startStall)&nbsp;?&nbsp;&nbsp;CatapultState.Stalling&nbsp;:&nbsp;CatapultState.Aiming;&nbsp;}&nbsp;break;&nbsp;case&nbsp;CatapultState.Stalling:&nbsp;if&nbsp;(stallUpdateCycles--&nbsp;&lt;=&nbsp;0)&nbsp;{&nbsp;//&nbsp;We've&nbsp;finished&nbsp;stalling;&nbsp;fire&nbsp;the&nbsp;projectile&nbsp;Fire(ShotVelocity);&nbsp;postUpdateStateChange&nbsp;=&nbsp;CatapultState.Firing;&nbsp;}&nbsp;break;&nbsp;case&nbsp;CatapultState.Firing:&nbsp;//&nbsp;Progress&nbsp;Fire&nbsp;animation&nbsp;if&nbsp;(lastUpdateState&nbsp;!=&nbsp;CatapultState.Firing)&nbsp;{&nbsp;AudioManager.StopSound("ropeStretch");&nbsp;AudioManager.PlaySound("catapultFire");&nbsp;StartFiringFromLastAimPosition();&nbsp;}&nbsp;animations["Fire"].Update();&nbsp;//&nbsp;If&nbsp;in&nbsp;the&nbsp;"split"&nbsp;point&nbsp;of&nbsp;the&nbsp;animation&nbsp;start&nbsp;&nbsp;//&nbsp;projectile&nbsp;fire&nbsp;sequence&nbsp;if&nbsp;(animations["Fire"].FrameIndex&nbsp;==&nbsp;splitFrames["Fire"])&nbsp;{&nbsp;postUpdateStateChange&nbsp;=&nbsp;&nbsp;currentState&nbsp;|&nbsp;CatapultState.ProjectileFlying;&nbsp;projectile.ProjectilePosition&nbsp;=&nbsp;&nbsp;projectile.ProjectileStartPosition;&nbsp;}&nbsp;break;&nbsp;case&nbsp;CatapultState.Firing&nbsp;|&nbsp;CatapultState.ProjectileFlying:&nbsp;//&nbsp;Progress&nbsp;Fire&nbsp;animation&nbsp;&nbsp;animations["Fire"].Update();&nbsp;//&nbsp;Update&nbsp;projectile&nbsp;velocity&nbsp;&amp;&nbsp;position&nbsp;in&nbsp;flight&nbsp;projectile.UpdateProjectileFlightData(gameTime,&nbsp;wind,&nbsp;&nbsp;gravity,&nbsp;out&nbsp;isGroundHit);&nbsp;if&nbsp;(isGroundHit)&nbsp;{&nbsp;//&nbsp;Start&nbsp;hit&nbsp;sequence&nbsp;postUpdateStateChange&nbsp;=&nbsp;CatapultState.ProjectileHit;&nbsp;animations["fireMiss"].PlayFromFrameIndex(0);&nbsp;}&nbsp;break;&nbsp;case&nbsp;CatapultState.ProjectileFlying:&nbsp;//&nbsp;Update&nbsp;projectile&nbsp;velocity&nbsp;&amp;&nbsp;position&nbsp;in&nbsp;flight&nbsp;projectile.UpdateProjectileFlightData(gameTime,&nbsp;wind,&nbsp;&nbsp;gravity,&nbsp;out&nbsp;isGroundHit);&nbsp;if&nbsp;(isGroundHit)&nbsp;{&nbsp;//&nbsp;Start&nbsp;hit&nbsp;sequence&nbsp;postUpdateStateChange&nbsp;=&nbsp;CatapultState.ProjectileHit;&nbsp;animations["fireMiss"].PlayFromFrameIndex(0);&nbsp;}&nbsp;break;&nbsp;case&nbsp;CatapultState.ProjectileHit:&nbsp;//&nbsp;Check&nbsp;hit&nbsp;on&nbsp;ground&nbsp;impact.&nbsp;if&nbsp;(!CheckHit())&nbsp;{&nbsp;if&nbsp;(lastUpdateState&nbsp;!=&nbsp;CatapultState.ProjectileHit)&nbsp;{&nbsp;VibrateController.Default.Start(&nbsp;TimeSpan.FromMilliseconds(100));&nbsp;//&nbsp;Play&nbsp;hit&nbsp;sound&nbsp;only&nbsp;on&nbsp;a&nbsp;missed&nbsp;hit;&nbsp;//&nbsp;a&nbsp;direct&nbsp;hit&nbsp;will&nbsp;trigger&nbsp;the&nbsp;explosion&nbsp;sound.&nbsp;AudioManager.PlaySound("boulderHit");&nbsp;}&nbsp;//&nbsp;Hit&nbsp;animation&nbsp;finished&nbsp;playing&nbsp;if&nbsp;(animations["fireMiss"].IsActive&nbsp;==&nbsp;false)&nbsp;{&nbsp;postUpdateStateChange&nbsp;=&nbsp;CatapultState.Reset;&nbsp;}&nbsp;animations["fireMiss"].Update();&nbsp;}&nbsp;else&nbsp;{&nbsp;//&nbsp;Catapult&nbsp;hit&nbsp;-&nbsp;start&nbsp;longer&nbsp;vibration&nbsp;on&nbsp;any&nbsp;catapult&nbsp;hit.&nbsp;//&nbsp;Remember&nbsp;that&nbsp;the&nbsp;call&nbsp;to&nbsp;"CheckHit"&nbsp;updates&nbsp;the&nbsp;catapult's&nbsp;//&nbsp;state&nbsp;to&nbsp;"Hit".&nbsp;VibrateController.Default.Start(&nbsp;TimeSpan.FromMilliseconds(500));&nbsp;}&nbsp;break;&nbsp;case&nbsp;CatapultState.Hit:&nbsp;//&nbsp;Progress&nbsp;hit&nbsp;animation&nbsp;if&nbsp;((animations["Destroyed"].IsActive&nbsp;==&nbsp;false)&nbsp;&amp;&amp;&nbsp;(animations["hitSmoke"].IsActive&nbsp;==&nbsp;false))&nbsp;{&nbsp;if&nbsp;(enemy.Score&nbsp;&gt;=&nbsp;winScore)&nbsp;{&nbsp;GameOver&nbsp;=&nbsp;true;&nbsp;break;&nbsp;}&nbsp;postUpdateStateChange&nbsp;=&nbsp;CatapultState.Reset;&nbsp;}&nbsp;animations["Destroyed"].Update();&nbsp;animations["hitSmoke"].Update();&nbsp;break;&nbsp;case&nbsp;CatapultState.Reset:&nbsp;AnimationRunning&nbsp;=&nbsp;false;&nbsp;break;&nbsp;default:&nbsp;break;&nbsp;}&nbsp;lastUpdateState&nbsp;=&nbsp;currentState;&nbsp;if&nbsp;(postUpdateStateChange&nbsp;!=&nbsp;0)&nbsp;{&nbsp;currentState&nbsp;=&nbsp;postUpdateStateChange;&nbsp;}&nbsp;base.Update(gameTime);}</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 the preceding version of the method now contains code to support 
animation and sound playback. In some places, we added logic to wait for
 animations to finish playing back before advancing the state of the 
catapult. Additionally, the method now uses several helper methods, 
which we implement.<p></p>Take the time to examine the preceding method, because it demonstrates how to allow for animation times.</div></div><p></p></li><li>Create a new method called <strong>UpdateAimAccordingToShotStrength</strong>:<p>(Code Snippet – 2D <em>Game Development with XNA – UpdateAimAccordingToShotStrength</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">private</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;UpdateAimAccordingToShotStrength(){&nbsp;var&nbsp;aimAnimation&nbsp;=&nbsp;animations[<span class="cs__string">"Aim"</span>];&nbsp;<span class="cs__keyword">int</span>&nbsp;frameToDisplay&nbsp;=&nbsp;Convert.ToInt32(aimAnimation.FrameCount&nbsp;*&nbsp;ShotStrength);&nbsp;aimAnimation.FrameIndex&nbsp;=&nbsp;frameToDisplay;}</li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 this method translates the current shot strength into a frame in the 
catapult’s aiming animation. This makes the catapult arm stretch further
 as the user increases the shot power.</div></div><p></p></li><li>Create a new method called <strong>AimReachedShotStrength</strong>:<p>(Code Snippet – 2D <em>Game Development with XNA – AimReachedShotStrength</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">private</span>&nbsp;<span class="cs__keyword">bool</span>&nbsp;AimReachedShotStrength(){&nbsp;<span class="cs__keyword">return</span>&nbsp;(animations[<span class="cs__string">"Aim"</span>].FrameIndex&nbsp;==&nbsp;(Convert.ToInt32(animations[<span class="cs__string">"Aim"</span>].FrameCount&nbsp;*&nbsp;ShotStrength)&nbsp;-&nbsp;<span class="cs__number">1</span>));}</li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 the preceding method complements the “UpdateAimAccordingToShotStrength”
 method, checking whether the current aim animation frame matches the 
shot strength.</div></div><p></p></li><li>Create a new method called <strong>StartFiringFromLastAimPosition</strong>:<p>(Code Snippet – 2D <em>Game Development with XNA – StartFiringFromLastAimPosition</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">private</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;StartFiringFromLastAimPosition(){&nbsp;<span class="cs__keyword">int</span>&nbsp;startFrame&nbsp;=&nbsp;animations[<span class="cs__string">"Aim"</span>].FrameCount&nbsp;-&nbsp;animations[<span class="cs__string">"Aim"</span>].FrameIndex;&nbsp;animations[<span class="cs__string">"Fire"</span>].PlayFromFrameIndex(startFrame);}</li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 the preceding method translates the current aim animation frame to the 
corresponding firing animation frame and activates the firing animation.</div></div><p></p></li><li>Now that the final version of the Catapult’s Update method is ready, replace the <strong>Draw</strong> method with the following:<p>(Code Snippet – 2D <em>Game Development with XNA – Catapult New Draw</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;Draw(GameTime&nbsp;gameTime){&nbsp;<span class="cs__keyword">if</span>&nbsp;(gameTime&nbsp;==&nbsp;<span class="cs__keyword">null</span>)&nbsp;<span class="cs__keyword">throw</span>&nbsp;<span class="cs__keyword">new</span>&nbsp;ArgumentNullException(<span class="cs__string">"gameTime"</span>);&nbsp;<span class="cs__com">//&nbsp;Using&nbsp;the&nbsp;last&nbsp;update&nbsp;state&nbsp;makes&nbsp;sure&nbsp;we&nbsp;do&nbsp;not&nbsp;draw&nbsp;//&nbsp;before&nbsp;updating&nbsp;animations&nbsp;properly.&nbsp;switch&nbsp;(lastUpdateState)&nbsp;{&nbsp;case&nbsp;CatapultState.Idle:&nbsp;DrawIdleCatapult();&nbsp;break;&nbsp;case&nbsp;CatapultState.Aiming:&nbsp;case&nbsp;CatapultState.Stalling:&nbsp;animations["Aim"].Draw(spriteBatch,&nbsp;catapultPosition,&nbsp;spriteEffects);&nbsp;break;&nbsp;case&nbsp;CatapultState.Firing:&nbsp;animations["Fire"].Draw(spriteBatch,&nbsp;catapultPosition,&nbsp;spriteEffects);&nbsp;break;&nbsp;case&nbsp;CatapultState.Firing&nbsp;|&nbsp;CatapultState.ProjectileFlying:&nbsp;case&nbsp;CatapultState.ProjectileFlying:&nbsp;animations["Fire"].Draw(spriteBatch,&nbsp;catapultPosition,&nbsp;spriteEffects);&nbsp;projectile.Draw(gameTime);&nbsp;break;&nbsp;case&nbsp;CatapultState.ProjectileHit:&nbsp;//&nbsp;Draw&nbsp;the&nbsp;catapult&nbsp;DrawIdleCatapult();&nbsp;//&nbsp;Projectile&nbsp;hit&nbsp;animation&nbsp;animations["fireMiss"].Draw(spriteBatch,&nbsp;projectile.ProjectileHitPosition,&nbsp;spriteEffects);&nbsp;break;&nbsp;case&nbsp;CatapultState.Hit:&nbsp;//&nbsp;Catapult&nbsp;hit&nbsp;animation&nbsp;animations["Destroyed"].Draw(spriteBatch,&nbsp;catapultPosition,&nbsp;spriteEffects);&nbsp;//&nbsp;Projectile&nbsp;smoke&nbsp;animation&nbsp;animations["hitSmoke"].Draw(spriteBatch,&nbsp;catapultPosition,&nbsp;spriteEffects);&nbsp;break;&nbsp;case&nbsp;CatapultState.Reset:&nbsp;DrawIdleCatapult();&nbsp;break;&nbsp;default:&nbsp;break;&nbsp;}&nbsp;base.Draw(gameTime);}</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> the main change is to draw the animations relevant to the current catapult state.</div></div><p></p></li><li>Open the GameplayScreen.cs file and navigate to the GameplayScreen class’s <strong>Update</strong> method. Locate the “TODO” marker comments and replace the surrounding code with the following:<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li>...<span class="cs__keyword">if</span>&nbsp;(player.Score&nbsp;&gt;&nbsp;computer.Score){&nbsp;AudioManager.PlaySound(<span class="cs__string">"gameOver_Win"</span>);}<span class="cs__keyword">else</span>{&nbsp;AudioManager.PlaySound(<span class="cs__string">"gameOver_Lose"</span>);}<span class="cs__keyword">base</span>.Update(gameTime,&nbsp;otherScreenHasFocus...</li></ol></code></pre></div><p></p></li><li>Open the <strong>CatapultGame.cs</strong>
 file and navigate to the CatapultGame class’s constructor. Restore the 
constructors final line so that the surrounding code looks as follows:<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li>...&nbsp;&nbsp;&nbsp;&nbsp;<span class="cs__com">//&nbsp;TODO:&nbsp;Start&nbsp;with&nbsp;menu&nbsp;screen&nbsp;&nbsp;&nbsp;&nbsp;screenManager.AddScreen(new&nbsp;GameplayScreen(),&nbsp;null);&nbsp;AudioManager.Initialize(this);}...</span></li></ol></code></pre></div><p></p></li><li>Override the <strong>LoadContent</strong> method in the CatapultGame class, in order to load the game’s sounds:<p>(Code Snippet – 2D <em>Game Development with XNA – CatapultGame LoadContent</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">protected</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;LoadContent(){&nbsp;AudioManager.LoadSounds();&nbsp;<span class="cs__keyword">base</span>.LoadContent();}</li></ol></code></pre></div><p></p></li><li>Compile the project and deploy it. The game should now include sound and animation in addition to being completely playable.</li></ol><p></p><a id="_Toc271900422" href="#"></a><h3>Task 2 – Additional screens and menus</h3><p>We
 may have drastically improved the game experience during the previous 
task, but the game is still not done, because when launched, it displays
 the gameplay screen abruptly, with no way to replay once the game is 
over (short of restarting the program). Additionally, the user cannot 
pause the game.</p><p>In this task, we add additional screens and menus, and we connect them to each other.</p><ol><li>Add a new class under the “Screens” project folder and name it “BackgroundScreen”.</li><li>Add the following using statements at the top of the new class file:<p>(Code Snippet – 2D <em>Game Development with XNA – BackgroundScreen Usings</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">using</span>&nbsp;Microsoft.Xna.Framework.Graphics;<span class="cs__keyword">using</span>&nbsp;Microsoft.Xna.Framework;<span class="cs__keyword">using</span>&nbsp;GameStateManagement;</li></ol></code></pre></div><p></p></li><li>Change the new class to derive from the “GameScreen” class.<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">class</span>&nbsp;BackgroundScreen&nbsp;:&nbsp;GameScreen{}</li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> do not forget to change the class’s namespace.</div></div><p></p></li><li>Add the following class variables to be used later for loading the background image:<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li>Texture2D&nbsp;background;</li></ol></code></pre></div><p></p></li><li>Define a class constructor as follows:<p>(Code Snippet – 2D <em>Game Development with XNA – BackgroundScreen Constructor</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;BackgroundScreen(){&nbsp;TransitionOnTime&nbsp;=&nbsp;TimeSpan.FromSeconds(<span class="cs__number">0.0</span>);&nbsp;TransitionOffTime&nbsp;=&nbsp;TimeSpan.FromSeconds(<span class="cs__number">0.5</span>);}</li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 the preceding code simply sets values to some of the properties derived
 from GameScreen, which control how the screen is brought in and out of 
view.</div></div><p></p></li><li>Override the base class’s “LoadContent” method to load the background image:<p>(Code Snippet – 2D <em>Game Development with XNA – BackgroundScreen LoadContent</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;LoadContent(){&nbsp;background&nbsp;=&nbsp;Load&lt;Texture2D&gt;(<span class="cs__string">"Textures/Backgrounds/title_screen"</span>);}</li></ol></code></pre></div><p></p></li><li>Add custom drawing logic to the class by overriding the Draw method:<p>(Code Snippet – 2D <em>Game Development with XNA – BackgroundScreen Draw</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;Draw(GameTime&nbsp;gameTime){&nbsp;SpriteBatch&nbsp;spriteBatch&nbsp;=&nbsp;ScreenManager.SpriteBatch;&nbsp;spriteBatch.Begin();&nbsp;<span class="cs__com">//&nbsp;Draw&nbsp;Background&nbsp;spriteBatch.Draw(background,&nbsp;new&nbsp;Vector2(0,&nbsp;0),&nbsp;new&nbsp;Color(255,&nbsp;255,&nbsp;255,&nbsp;TransitionAlpha));&nbsp;spriteBatch.End();}</span></li></ol></code></pre></div><p></p></li><li>Now that we have a background screen, it is time to add a menu to display over it. Create a new class called “<strong>MainMenuScreen</strong>” in the “Screens” project folder.</li><li>Open the new class file and add the following using statements at the top of the file.<p>(Code Snippet – 2D <em>Game Development with XNA – MainMenuScreen Usings</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">using</span>&nbsp;GameStateManagement;<span class="cs__keyword">using</span>&nbsp;Microsoft.Xna.Framework;</li></ol></code></pre></div><p></p></li><li>Change
 the new class to derive from the “MenuScreen” class (this screen class 
is defined in the code under the ScreenManager folder):<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">class</span>&nbsp;MainMenuScreen&nbsp;:&nbsp;MenuScreen{}</li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> remember to change the class’s namespace.</div></div><p></p></li><li>Add
 the following constructor to the class. It defines the menu entries 
that this menu screen displays, and it keeps it from hiding the 
background screen by setting the IsPopup property to true:<p>(Code Snippet – 2D <em>Game Development with XNA – MainMenuScreen Constructor</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;MainMenuScreen()&nbsp;:&nbsp;<span class="cs__keyword">base</span>(String.Empty){&nbsp;IsPopup&nbsp;=&nbsp;<span class="cs__keyword">true</span>;&nbsp;<span class="cs__com">//&nbsp;Create&nbsp;our&nbsp;menu&nbsp;entries.&nbsp;MenuEntry&nbsp;startGameMenuEntry&nbsp;=&nbsp;new&nbsp;MenuEntry("Play");&nbsp;MenuEntry&nbsp;exitMenuEntry&nbsp;=&nbsp;new&nbsp;MenuEntry("Exit");&nbsp;//&nbsp;Hook&nbsp;up&nbsp;menu&nbsp;event&nbsp;handlers.&nbsp;startGameMenuEntry.Selected&nbsp;+=&nbsp;StartGameMenuEntrySelected;&nbsp;exitMenuEntry.Selected&nbsp;+=&nbsp;OnCancel;&nbsp;//&nbsp;Add&nbsp;entries&nbsp;to&nbsp;the&nbsp;menu.&nbsp;MenuEntries.Add(startGameMenuEntry);&nbsp;MenuEntries.Add(exitMenuEntry);}</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 a menu screen contains MenuEntry objects that depict the menu’s items. 
Each entry contains an event handler that fires when the user selects 
the entry from the menu. You can see how the preceding code sets the 
handlers for both menu entries. In the next step, we add the event 
handler methods.</div></div><p></p></li><li>Create the event handlers by implementing the following methods in the class:<p>(Code Snippet – 2D <em>Game Development with XNA – MainMenuScreen Event Handlers</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__com">//&nbsp;Handles&nbsp;"Play"&nbsp;menu&nbsp;item&nbsp;selectionvoid&nbsp;StartGameMenuEntrySelected(object&nbsp;sender,&nbsp;EventArgs&nbsp;e){&nbsp;ScreenManager.AddScreen(new&nbsp;InstructionsScreen(),&nbsp;null);}//&nbsp;Handles&nbsp;"Exit"&nbsp;menu&nbsp;item&nbsp;selectionprotected&nbsp;override&nbsp;void&nbsp;OnCancel(PlayerIndex&nbsp;playerIndex){&nbsp;ScreenManager.Game.Exit();}</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 notice the difference between the two method signatures. While 
StartGameMenuEntrySelected is an actual event handler, OnCancel is 
actually called from a different event handler, which is also called 
OnCancel and is implemented in the base class. Also, notice that 
StartGameMenuEntrySelected’s body adds a screen that we will soon 
create.</div></div><p></p></li><li>Override the <strong>UpdateMenuEntryLocations</strong> method. This allows a menu screen to control the location of its menu items:<p>(Code Snippet – 2D <em>Game Development with XNA – MainMenuScreen UpdateMenuEntryLocations</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">protected</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;UpdateMenuEntryLocations(){&nbsp;<span class="cs__keyword">base</span>.UpdateMenuEntryLocations();&nbsp;<span class="cs__keyword">foreach</span>&nbsp;(var&nbsp;entry&nbsp;<span class="cs__keyword">in</span>&nbsp;MenuEntries)&nbsp;{&nbsp;var&nbsp;position&nbsp;=&nbsp;entry.Position;&nbsp;position.Y&nbsp;+=&nbsp;<span class="cs__number">60</span>;&nbsp;entry.Position&nbsp;=&nbsp;position;&nbsp;}}</li></ol></code></pre></div><p></p></li><li>Create a new class called “<strong>InstructionsScreen</strong>” in the “Screens” project folder.</li><li>Open the new class file and add the following using statements at the top of the file.<p>(Code Snippet – 2D <em>Game Development with XNA – InstructionsScreen Usings</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">using</span>&nbsp;Microsoft.Xna.Framework.Graphics;<span class="cs__keyword">using</span>&nbsp;Microsoft.Xna.Framework;<span class="cs__keyword">using</span>&nbsp;GameStateManagement;<span class="cs__keyword">using</span>&nbsp;Microsoft.Xna.Framework.Input.Touch;<span class="cs__keyword">using</span>&nbsp;System.Threading;</li></ol></code></pre></div><p></p></li><li>Change the new class to derive from the “GameScreen” class:<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">class</span>&nbsp;InstructionsScreen&nbsp;:&nbsp;GameScreen{}</li></ol></code></pre></div><p></p></li><li>Add the following fields to the class:<p>(Code Snippet – 2D <em>Game Development with XNA – InstructionsScreen Fields</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li>Texture2D&nbsp;background;SpriteFont&nbsp;font;<span class="cs__keyword">bool</span>&nbsp;isLoading;GameplayScreen&nbsp;gameplayScreen;Thread&nbsp;thread;</li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> you may notice the field that contains a thread object. We will use this field shortly.</div></div><p></p></li><li>Add
 the following constructor to the class. Since this screen responds to 
user taps on the display, we need to enable tap gestures:<p>(Code Snippet – 2D <em>Game Development with XNA – InstructionsScreen Constructor</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;InstructionsScreen(){&nbsp;EnabledGestures&nbsp;=&nbsp;GestureType.Tap;&nbsp;TransitionOnTime&nbsp;=&nbsp;TimeSpan.FromSeconds(<span class="cs__number">0</span>);&nbsp;TransitionOffTime&nbsp;=&nbsp;TimeSpan.FromSeconds(<span class="cs__number">0.5</span>);}</li></ol></code></pre></div><p></p></li><li>Override the “LoadContent” method to load the instruction set image and a font which we will use:<p>(Code Snippet – 2D <em>Game Development with XNA – InstructionsScreen LoadContent</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;LoadContent(){&nbsp;background&nbsp;=&nbsp;Load&lt;Texture2D&gt;(<span class="cs__string">"Textures/Backgrounds/instructions"</span>);&nbsp;font&nbsp;=&nbsp;Load&lt;SpriteFont&gt;(<span class="cs__string">"Fonts/MenuFont"</span>);}</li></ol></code></pre></div><p></p></li><li>Override the “HandleInput” method as shown in the following code:<p>(Code Snippet – 2D <em>Game Development with XNA – InstructionsScreen HandleInput</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;HandleInput(InputState&nbsp;input){&nbsp;<span class="cs__keyword">if</span>&nbsp;(isLoading&nbsp;==&nbsp;<span class="cs__keyword">true</span>)&nbsp;{&nbsp;<span class="cs__keyword">base</span>.HandleInput(input);&nbsp;<span class="cs__keyword">return</span>;&nbsp;}&nbsp;<span class="cs__keyword">foreach</span>&nbsp;(var&nbsp;gesture&nbsp;<span class="cs__keyword">in</span>&nbsp;input.Gestures)&nbsp;{&nbsp;<span class="cs__keyword">if</span>&nbsp;(gesture.GestureType&nbsp;==&nbsp;GestureType.Tap)&nbsp;{&nbsp;<span class="cs__com">//&nbsp;Create&nbsp;a&nbsp;new&nbsp;instance&nbsp;of&nbsp;the&nbsp;gameplay&nbsp;screen&nbsp;gameplayScreen&nbsp;=&nbsp;new&nbsp;GameplayScreen();&nbsp;gameplayScreen.ScreenManager&nbsp;=&nbsp;ScreenManager;&nbsp;//&nbsp;Start&nbsp;loading&nbsp;the&nbsp;resources&nbsp;in&nbsp;additional&nbsp;thread&nbsp;thread&nbsp;=&nbsp;new&nbsp;System.Threading.Thread(&nbsp;new&nbsp;System.Threading.ThreadStart(gameplayScreen.LoadAssets));&nbsp;isLoading&nbsp;=&nbsp;true;&nbsp;thread.Start();&nbsp;}&nbsp;}&nbsp;base.HandleInput(input);}</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 the preceding method waits for a tap from the user in order to dismiss 
the instructions screen. We would like to display the gameplay screen 
next, but waiting for it to load its assets will cause a noticeable 
delay between the tap and the appearance of the gameplay screen. 
Therefore, we will create an additional thread to perform the gameplay 
screen’s asset initialization. We will display a loading prompt until 
the process finishes, and then display the gameplay screen. Let us move 
on to the Update method where we will wait for all assets to load.</div></div><p></p></li><li>Override the “Update” method with the following code:<p>(Code Snippet – 2D <em>Game Development with XNA – InstructionsScreen Update</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;Update(GameTime&nbsp;gameTime,&nbsp;<span class="cs__keyword">bool</span>&nbsp;otherScreenHasFocus,&nbsp;<span class="cs__keyword">bool</span>&nbsp;coveredByOtherScreen){&nbsp;<span class="cs__com">//&nbsp;If&nbsp;additional&nbsp;thread&nbsp;is&nbsp;running,&nbsp;skip&nbsp;if&nbsp;(null&nbsp;!=&nbsp;thread)&nbsp;{&nbsp;//&nbsp;If&nbsp;additional&nbsp;thread&nbsp;finished&nbsp;loading&nbsp;and&nbsp;the&nbsp;screen&nbsp;is&nbsp;not&nbsp;exiting&nbsp;if&nbsp;(thread.ThreadState&nbsp;==&nbsp;System.Threading.ThreadState.Stopped&nbsp;&amp;&amp;&nbsp;!IsExiting)&nbsp;{&nbsp;isLoading&nbsp;=&nbsp;false;&nbsp;//&nbsp;Exit&nbsp;the&nbsp;screen&nbsp;and&nbsp;show&nbsp;the&nbsp;gameplay&nbsp;screen&nbsp;&nbsp;//&nbsp;with&nbsp;pre-loaded&nbsp;assets&nbsp;ExitScreen();&nbsp;ScreenManager.AddScreen(gameplayScreen,&nbsp;null);&nbsp;}&nbsp;}&nbsp;base.Update(gameTime,&nbsp;otherScreenHasFocus,&nbsp;coveredByOtherScreen);}</span></li></ol></code></pre></div><p></p></li><li>Override the “Draw” method to display the instructions image, and also the loading prompt while the game’s assets are loading:<p>(Code Snippet – 2D <em>Game Development with XNA – InstructionsScreen Draw</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;Draw(GameTime&nbsp;gameTime){&nbsp;SpriteBatch&nbsp;spriteBatch&nbsp;=&nbsp;ScreenManager.SpriteBatch;&nbsp;spriteBatch.Begin();&nbsp;<span class="cs__com">//&nbsp;Draw&nbsp;Background&nbsp;spriteBatch.Draw(background,&nbsp;new&nbsp;Vector2(0,&nbsp;0),&nbsp;new&nbsp;Color(255,&nbsp;255,&nbsp;255,&nbsp;TransitionAlpha));&nbsp;//&nbsp;If&nbsp;loading&nbsp;gameplay&nbsp;screen&nbsp;resource&nbsp;in&nbsp;the&nbsp;&nbsp;//&nbsp;background&nbsp;show&nbsp;"Loading..."&nbsp;text&nbsp;if&nbsp;(isLoading)&nbsp;{&nbsp;string&nbsp;text&nbsp;=&nbsp;"Loading...";&nbsp;Vector2&nbsp;size&nbsp;=&nbsp;font.MeasureString(text);&nbsp;Vector2&nbsp;position&nbsp;=&nbsp;new&nbsp;Vector2(&nbsp;(ScreenManager.GraphicsDevice.Viewport.Width&nbsp;-&nbsp;size.X)&nbsp;/&nbsp;2,&nbsp;(ScreenManager.GraphicsDevice.Viewport.Height&nbsp;-&nbsp;size.Y)&nbsp;/&nbsp;2);&nbsp;spriteBatch.DrawString(font,&nbsp;text,&nbsp;position,&nbsp;Color.Black);&nbsp;}&nbsp;spriteBatch.End();}</span></li></ol></code></pre></div><p></p></li><li>Now
 that the instructions screen loads the gameplay screen’s assets, there 
is no longer a need to perform that operation in the GameplayScreen 
class. Open the GameplayScreen.cs file and navigate to the “LoadContent”
 method. Change the method to the following:<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;LoadContent(){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="cs__keyword">base</span>.LoadContent();&nbsp;<span class="cs__com">//&nbsp;Start&nbsp;the&nbsp;game&nbsp;Start();}</span></li></ol></code></pre></div><p></p></li><li>So
 far, we have created three additional screens and now it is time to 
make them visible. To do that, we are required to alter the game class 
“CatapultGame”. Open the file, <strong>CatapultGame.cs</strong>, and 
navigate to the CatapultGame class’s constructor. Locate the “TODO” 
marker comment in the constructor body and replace the code directly 
below it so that the surrounding code looks like the following:<p>(Code Snippet – 2D <em>Game Development with XNA – CatapultGame Add Screens</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li>...<span class="cs__com">//Switch&nbsp;to&nbsp;full&nbsp;screen&nbsp;for&nbsp;best&nbsp;game&nbsp;experiencegraphics.IsFullScreen&nbsp;=&nbsp;true;//Add&nbsp;main&nbsp;menu&nbsp;and&nbsp;backgroundscreenManager.AddScreen(new&nbsp;BackgroundScreen(),&nbsp;null);screenManager.AddScreen(new&nbsp;MainMenuScreen(),&nbsp;null);AudioManager.Initialize(this);...</span></li></ol></code></pre></div><p></p></li><li>Compile and deploy the project. You will see the game’s main menu. Pressing <strong>Play</strong> advances the game to the instructions screen and, from there, to the actual game. Pressing <strong>Exit</strong> terminates the game.<p><img src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic3_files/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic3.png" alt=""></p><div class="label"><strong>Figure 32</strong><p><em>The game’s main menu</em></p></div><p></p></li><li>The
 final part of this task is to add an additional screen, the pause 
screen. Create a new class under the “Screens” folder and call it “<strong>PauseScreen</strong>”.</li><li>Open the new class file and add the following using statements at the top of the file.<p>(Code Snippet – 2D <em>Game Development with XNA – PauseScreen Usings</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">using</span>&nbsp;GameStateManagement;<span class="cs__keyword">using</span>&nbsp;Microsoft.Xna.Framework;</li></ol></code></pre></div><p></p></li><li>Change the newly created class to inherit from the “MenuScreen” class:<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">class</span>&nbsp;PauseScreen&nbsp;:&nbsp;MenuScreen{}</li></ol></code></pre></div><p></p></li><li>Add the following fields to the PauseScreen class:<p>(Code Snippet – 2D <em>Game Development with XNA – PauseScreen Fields</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li>GameScreen&nbsp;backgroundScreen;Player&nbsp;human;Player&nbsp;computer;<span class="cs__keyword">bool</span>&nbsp;prevHumanIsActive;<span class="cs__keyword">bool</span>&nbsp;prevCompuerIsActive;</li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> the purpose of the preceding fields will become evident as we implement more of the class.</div></div><p></p></li><li>Add the following constructor to the class:<p>(Code Snippet – 2D <em>Game Development with XNA – PauseScreen Constructor</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;PauseScreen(GameScreen&nbsp;backgroundScreen,&nbsp;Player&nbsp;human,&nbsp;Player&nbsp;computer)&nbsp;:&nbsp;<span class="cs__keyword">base</span>(String.Empty){&nbsp;IsPopup&nbsp;=&nbsp;<span class="cs__keyword">true</span>;&nbsp;<span class="cs__keyword">this</span>.backgroundScreen&nbsp;=&nbsp;backgroundScreen;&nbsp;<span class="cs__com">//&nbsp;Create&nbsp;our&nbsp;menu&nbsp;entries.&nbsp;MenuEntry&nbsp;startGameMenuEntry&nbsp;=&nbsp;new&nbsp;MenuEntry("Return");&nbsp;MenuEntry&nbsp;exitMenuEntry&nbsp;=&nbsp;new&nbsp;MenuEntry("Quit&nbsp;Game");&nbsp;//&nbsp;Hook&nbsp;up&nbsp;menu&nbsp;event&nbsp;handlers.&nbsp;startGameMenuEntry.Selected&nbsp;+=&nbsp;StartGameMenuEntrySelected;&nbsp;exitMenuEntry.Selected&nbsp;+=&nbsp;OnCancel;&nbsp;//&nbsp;Add&nbsp;entries&nbsp;to&nbsp;the&nbsp;menu.&nbsp;MenuEntries.Add(startGameMenuEntry);&nbsp;MenuEntries.Add(exitMenuEntry);&nbsp;this.human&nbsp;=&nbsp;human;&nbsp;this.computer&nbsp;=&nbsp;computer;&nbsp;//&nbsp;Preserve&nbsp;the&nbsp;old&nbsp;state&nbsp;of&nbsp;the&nbsp;game&nbsp;prevHumanIsActive&nbsp;=&nbsp;this.human.Catapult.IsActive;&nbsp;prevCompuerIsActive&nbsp;=&nbsp;this.computer.Catapult.IsActive;&nbsp;//&nbsp;Pause&nbsp;the&nbsp;game&nbsp;logic&nbsp;progress&nbsp;this.human.Catapult.IsActive&nbsp;=&nbsp;false;&nbsp;this.computer.Catapult.IsActive&nbsp;=&nbsp;false;&nbsp;AudioManager.PauseResumeSounds(false);}</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 this constructor resembles that of the MainMenuScreen class, with added
 logic. The PauseScreen’s constructor remembers the value of each of the
 two players’ IsActive property, and it sets the property to false for 
both players. This effectively causes the game screen to freeze. 
Additionally, all currently playing sounds will be paused.</div></div><p></p></li><li>Add the following two event handlers to the class:<p>(Code Snippet – 2D <em>Game Development with XNA – PauseScreen Event Handlers</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">void</span>&nbsp;StartGameMenuEntrySelected(<span class="cs__keyword">object</span>&nbsp;sender,&nbsp;EventArgs&nbsp;e){&nbsp;human.Catapult.IsActive&nbsp;=&nbsp;prevHumanIsActive;&nbsp;computer.Catapult.IsActive&nbsp;=&nbsp;prevCompuerIsActive;&nbsp;<span class="cs__keyword">if</span>&nbsp;(!(human&nbsp;<span class="cs__keyword">as</span>&nbsp;Human).isDragging)&nbsp;AudioManager.PauseResumeSounds(<span class="cs__keyword">true</span>);&nbsp;<span class="cs__keyword">else</span>&nbsp;{&nbsp;(human&nbsp;<span class="cs__keyword">as</span>&nbsp;Human).ResetDragState();&nbsp;AudioManager.StopSounds();&nbsp;}&nbsp;backgroundScreen.ExitScreen();&nbsp;ExitScreen();}<span class="cs__keyword">protected</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;OnCancel(PlayerIndex&nbsp;playerIndex){&nbsp;AudioManager.StopSounds();&nbsp;ScreenManager.AddScreen(<span class="cs__keyword">new</span>&nbsp;MainMenuScreen(),&nbsp;<span class="cs__keyword">null</span>);&nbsp;ExitScreen();}</li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 notice how the first handler, which is fired when the user wishes to 
return to the game, restores both player’s IsActive value and resumes 
all paused sounds.</div></div><p></p></li><li>Finally, override the “UpdateMenuEntryLocations” method to properly position the menu entries on screen:<p>(Code Snippet – 2D <em>Game Development with XNA – PauseScreen UpdateMenuEntryLocations</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">protected</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;UpdateMenuEntryLocations(){&nbsp;<span class="cs__keyword">base</span>.UpdateMenuEntryLocations();&nbsp;<span class="cs__keyword">foreach</span>&nbsp;(var&nbsp;entry&nbsp;<span class="cs__keyword">in</span>&nbsp;MenuEntries)&nbsp;{&nbsp;var&nbsp;position&nbsp;=&nbsp;entry.Position;&nbsp;position.Y&nbsp;+=&nbsp;<span class="cs__number">60</span>;&nbsp;entry.Position&nbsp;=&nbsp;position;&nbsp;}}</li></ol></code></pre></div><p></p></li><li>The final step is to revise the GameplayScreen class to use the new pause screen. Open <strong>GameplayScreen.cs</strong> and navigate to the “PauseCurrentGame” method. Change the method to look like this:<p>(Code Snippet – 2D <em>Game Development with XNA – GameplayScreen PauseCurrentGame</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">private</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;PauseCurrentGame(){&nbsp;var&nbsp;pauseMenuBackground&nbsp;=&nbsp;<span class="cs__keyword">new</span>&nbsp;BackgroundScreen();&nbsp;<span class="cs__keyword">if</span>&nbsp;(isDragging)&nbsp;{&nbsp;isDragging&nbsp;=&nbsp;<span class="cs__keyword">false</span>;&nbsp;player.Catapult.CurrentState&nbsp;=&nbsp;CatapultState.Idle;&nbsp;}&nbsp;ScreenManager.AddScreen(pauseMenuBackground,&nbsp;<span class="cs__keyword">null</span>);&nbsp;ScreenManager.AddScreen(<span class="cs__keyword">new</span>&nbsp;PauseScreen(pauseMenuBackground,&nbsp;&nbsp;player,&nbsp;computer),&nbsp;<span class="cs__keyword">null</span>);}</li></ol></code></pre></div><p></p></li><li>Compile
 and deploy the project. From the gameplay screen, you should now be 
able to use the back arrow key on the device to pause the game. The 
pause menu allows you to return to the game or exit to the main menu.<p></p><p><strong>Congratulations! The game is now fully operational.</strong></p></li></ol><div class="Center"><div class="BostonPostCard"><h4><strong><a href="http://msdn.microsoft.com/en-us/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2"> &lt; previous </a> | <a href="http://msdn.microsoft.com/en-us/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic4"> next &gt; </a></strong></h4></div></div></div></td><td valign="top"><div class="RightAdRail"><div class="BostonPostCard"> <div style="width: 300px; height: 250px;" id="c_38e144319c794d1a887cd2aba8a8f881" align="center"><iframe src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic3_files/a_002.htm" name="dapIfM0" id="dapIfM0" width="300" frameborder="0" height="250" scrolling="no"></iframe></div> <p></p><h4>Contents</h4><ul class="bulletedlist"><li><a href="http://msdn.microsoft.com/en-us/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic1#_Toc271900415#_Toc271900415"> Overview </a></li><li><a href="http://msdn.microsoft.com/en-us/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2#_Toc271900416#_Toc271900416"> Exercise 1: Basic XNA Framework Game with Game State Management </a></li><li><strong><a href="http://msdn.microsoft.com/en-us/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic3#_Toc271900420#_Toc271900420"> Exercise 2: Game polish and menus </a></strong><ul><li><a href="http://msdn.microsoft.com/en-us/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic3#_Toc271900421#_Toc271900421"> Task 1 – Polishing the game – sounds and animations </a></li><li><a href="http://msdn.microsoft.com/en-us/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic3#_Toc271900422#_Toc271900422"> Task 2 – Additional screens and menus </a></li></ul></li><li><a href="http://msdn.microsoft.com/en-us/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic4#_Toc271900423#_Toc271900423"> Summary </a></li></ul></div></div></td></tr></tbody></table></div></div> <div id="footerAd" style="margin-left: auto; margin-right: auto; display: table;"> <p> </p><div style="width: 728px; height: 90px;" id="c_bca16b11fd7e4c2086fd94721bab1be5" align="center"><iframe src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic3_files/a_002.htm" name="dapIfM1" id="dapIfM1" width="728" frameborder="0" height="90" scrolling="no"></iframe></div> <p></p> </div> </div> </div> </div> <div class="ClearBottom"> </div> <div class="bottomleftcorner"> </div> <div class="bottomrightcorner"> </div> <div class="FooterLinks"><span class="FooterCopyright" title="© 2010  Microsoft Corporation. All rights reserved.">© 2010 Microsoft Corporation. All rights reserved.</span><a href="http://msdn.microsoft.com/cc300389.aspx" title="Terms of Use">Terms of Use</a><span class="Pipe">|</span><a href="http://www.microsoft.com/library/toolbar/3.0/trademarks/en-us.mspx" title="Trademarks">Trademarks</a><span class="Pipe">|</span><a href="http://www.microsoft.com/info/privacy.mspx" title="Privacy Statement">Privacy Statement</a><span class="Pipe" id="ctl00_Footer_PipeSpan3">|</span><a target="_blank" id="bottomsitefeedbacklink" title="Site Feedback" href="https://lab.msdn.microsoft.com/mailform/contactus.aspx?refurl=http://msdn.microsoft.com/en-us/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic3&amp;loc=en-us">Site Feedback</a></div> </div> </div> </div> </div> <noscript><img alt="DCSIMG" width="1" height="1" src="http://m.webtrends.com/dcsmgru7m99k7mqmgrhudo0k8_8c6m/njs.gif?dcsuri=/nojavascript&amp;WT.js=No" /></noscript><noscript><a href="http://www.omniture.com" title="Web Analytics"><img src="http://msstonojsmsdn.112.2o7.net/b/ss/msstonojsmsdn/1/H.20.2--NS/0" height="1" width="1" border="0" alt="" /></a></noscript> <script type="text/javascript" src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic3_files/global.js"></script><script type="text/javascript">
    function SearchClick() {
        window.location = "http://social.msdn.microsoft.com/search/en-us/?query=" + document.getElementById("HeaderSearchTextBox").value();
    }

    function SearchClientClick() {
        if (document.getElementById("HeaderSearchTextBox").value == document.getElementById("HeaderSearchTextBox").title) return false;
        document.HeaderSearchForm.submit();return true;
    }
</script><script type="text/javascript" id="mscom.srch.searchBox" src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic3_files/SearchBox.js" defer="defer"></script><script src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic3_files/jquery.js" type="text/javascript"></script><script src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic3_files/recipes.js" type="text/javascript"></script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript" src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic3_files/dap.js"></script><script type="text/javascript">
      try {
        dapMgr.enableACB("c_38e144319c794d1a887cd2aba8a8f881", false);
        dapMgr.renderAd("c_38e144319c794d1a887cd2aba8a8f881", "&amp;PG=CMS3DB&amp;AP=1089", "300", "250");
      } catch (ex) { }
    </script><script type="text/javascript">
      try {
        dapMgr.enableACB("c_bca16b11fd7e4c2086fd94721bab1be5", false);
        dapMgr.renderAd("c_bca16b11fd7e4c2086fd94721bab1be5", "&amp;PG=CMS3DL&amp;AP=1390", "728", "90");
      } catch (ex) { }
    </script><script type="text/javascript">

      var wt_nvr_ru = "WT_NVR_RU";
      var wt_fpcdom = ".microsoft.com";
      var wt_domlist = "msdn.microsoft.com";
      var wt_pathlist = "";var wt_paramlist = "DCSext.mtps_devcenter";
      var wt_siteid = "MSDN";
      var gDomain="m.webtrends.com";
var gDcsId = "dcsmgru7m99k7mqmgrhudo0k8_8c6m";
var gFpc = "WT_FPC";
/*<![CDATA[*/
if (document.cookie.indexOf(gFpc + "=") == -1) { document.write("<scr" + "ipt type='text/javascript' src='" + "http" + (window.location.protocol.indexOf('https:') == 0 ? 's' : '') + "://" + gDomain + "/" + gDcsId + "/wtid.js" + "'><\/scr" + "ipt>"); }
/*]]>*/
var detectedLocale = "en-us";
var wtsp = "_msdn_";
var gTrackEvents = "1";
</script><script type="text/javascript" src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic3_files/webtrendsscript.js"></script><script type="text/javascript">var omni_guid = 'c_bf18f42d98904629b96ccfda41f12e4b';</script><script language="javascript" type="text/javascript" src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic3_files/broker.js"></script><!-- HtmlResponseFilter:78:ms --><script src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic3_files/broker-config.js"></script></body></html>