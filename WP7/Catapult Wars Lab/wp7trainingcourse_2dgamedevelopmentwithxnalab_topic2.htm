<!DOCTYPE HTML PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">  <meta http-equiv="X-UA-Compatible" content="IE=8"> <meta name="search.content.shortId" content="gg266462"> <meta name="search.content.locale" content="en-us"> <meta name="MN" content="B9D26F3F-10:45:43 PM"> <meta http-equiv="content-language" content="en"> <link rel="canonical" href="http://msdn.microsoft.com/en-us/gg266462"> <meta name="NormalizedUrl" href="http://msdn.microsoft.com/en-us/gg266462%28d=default,l=en-us,v=MSDN.10%29.aspx"> <link href="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/StoCodeHighlighter.css" type="text/css" rel="stylesheet"><link href="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/default_003.css" type="text/css" rel="stylesheet"><link href="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/default.css" type="text/css" rel="stylesheet"><link href="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/default_002.css" type="text/css" rel="stylesheet"> <title>Exercise 1: Basic XNA Framework Game with Game State Management</title><style type="text/css">/* Chili -- cs */
.cs__mlcom { color: #4040c2; }
.cs__com { color: green; }
.cs__string { color: teal; }
.cs__preproc { color: red; }
.cs__number { color: red; }
.cs__keyword { color: navy; font-weight: bold; }</style></head><body id="MTPS_Body" class="MsdnPageBody"> <div id="BodyBackground"> <div id="JelloSizer"> <div id="JelloExpander"> <div id="JelloWrapper"> <div class="Clear"> </div> <div class="Masthead"> <div class="BrandLogo"> <a title="Microsoft Developer Network" href="http://msdn.microsoft.com/en-us/"> <span> Microsoft Developer Network </span> </a></div><div class="Search"> <div class="SearchBox"> <form name="HeaderSearchForm" method="post" action=""> <input name="SearchAction" value="search" type="hidden"> <input value="Search MSDN with Bing" style="color: rgb(170, 170, 170); font-style: italic;" autocomplete="off" id="HeaderSearchTextBox" class="TextBoxSearch" title="Search MSDN with Bing" type="text"> <input id="HeaderSearchButton" onclick="return SearchClientClick();" class="SearchButton" alt="Click here to search" title="Search MSDN with Bing" type="button"> <span class="Bing"></span> <div style="display: none; text-align: left; border: 1px solid buttonshadow; position: absolute; z-index: 1000; padding: 2px; background-color: rgb(255, 255, 255); color: rgb(0, 0, 255); font-family: arial;" id="SearchFlyoutContainer"><div id="SuggestionContainer"><ul style="list-style: none outside none; padding: 4px 2px 0px 1px; cursor: pointer; font-size: 8pt; margin: 1px;"></ul></div><div style="width: 100%; margin: 0px; text-align: right; font-size: 8pt;" id="FooterContainer"><a href="#">Close</a></div></div></form> </div></div> <div class="GlobalBar"> <div class="PassportScarab"> <a id="idPPScarab" href="https://login.live.com/login.srf?wa=wsignin1.0&amp;rpsnv=11&amp;ct=1294037143&amp;rver=6.0.5276.0&amp;wp=MCLBI&amp;wlcxt=msdn%24msdn%24msdn&amp;wreply=http:%2F%2Fmsdn.microsoft.com%2Fen-us%2Fwp7trainingcourse_2dgamedevelopmentwithxnalab_topic2&amp;lc=1033&amp;cb=&amp;id=254354"><span id="idPPScarabSIT">Sign in</span></a></div><div id="LocaleSelector"> <form id="ChangeLocaleForm" action="/en-us/SelectLocale?pageid=wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2"> <input name="fromPage" value="http://msdn.microsoft.com/en-us/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2" type="hidden"> <div id="FlyoutTop"> <a title="Change your language" href="#Change+your+language" onclick="$('#ChangeLocaleForm').submit();return false;" id="LinkCountryLanguage" class="LocaleManagementFlyoutStaticLink"> United States (English) </a> </div> </form></div> <div class="Clear"></div> </div> <div class="Clear"></div> <div class="networkTagLineArea NetworkLogo"> <a title="Microsoft Developer Network" href="http://msdn.microsoft.com/en-us"></a> </div><div class="leftcap"></div> <div class="internav"> <a href="http://msdn.microsoft.com/en-us/default" class="normal" title="Home">Home</a><a href="http://msdn.microsoft.com/library/default.aspx" class="normal" title="Library">Library</a><a href="http://msdn.microsoft.com/en-us/bb188199" class="active" title="Learn">Learn</a><a href="http://msdn.microsoft.com/en-us/aa570309" class="normal" title="Downloads">Downloads</a><a href="http://msdn.microsoft.com/en-us/aa570318" class="normal" title="Support">Support</a><a href="http://msdn.microsoft.com/en-us/aa497440" class="normal" title="Community">Community</a><a href="http://social.msdn.microsoft.com/Forums/en-US/categories" class="normal" title="Forums">Forums</a></div><div class="rightcap"></div><div class="Clear"></div> </div> <div class="Clear"> </div> <div class="topleftcorner"> </div> <div class="toprightcorner"> </div> <div class="alley"> <div class="wrapper"> <div class="inner"> <div class="Clear"> </div> <div class="BreadCrumb"><div class="BreadCrumbInner EyebrowContainer"><a href="http://msdn.microsoft.com/en-us/default" class="EyebrowLink" title="Microsoft Developer Network">Microsoft Developer Network</a> &gt; <a href="http://msdn.microsoft.com/en-us/bb188199" class="EyebrowLink" title="Learn">Learn</a> &gt; <a href="http://msdn.microsoft.com/en-us/gg299335" class="EyebrowLink" title="Courses">Courses</a> &gt; <a href="http://msdn.microsoft.com/en-us/gg266499" class="EyebrowLink" title="Windows Phone 7 Training Course">Windows Phone 7 Training Course</a> &gt; <a href="http://msdn.microsoft.com/en-us/gg266479" class="EyebrowLink" title="XNA Framework 4.0 for Windows Phones">XNA Framework 4.0 for Windows Phones</a> &gt; <a href="http://msdn.microsoft.com/en-us/gg266460" class="EyebrowLink" title="Catapult Wars Lab">Catapult Wars Lab</a> &gt; <span class="EyebrowElement">Exercise 1: Basic XNA Framework Game with Game State Management</span> </div></div><div id="mainSection"><div class="navpage"><table class="multicol"><tbody><tr><td class="innercol" valign="top"><div class="MainColumn"><h2 class="Title">Exercise 1: Basic XNA Framework Game with Game State Management</h2><p>If
 you have ever wanted to make your own games, Microsoft® XNA® Game 
Studio 4.0 is for you. Whether you are a student, a hobbyist, or an 
independent game developer, you can create and share great games using 
XNA Game Studio.</p><p>XNA Game Studio 4.0 is a game development product
 that Microsoft built on top of Microsoft Visual Studio 2010 and 
includes in the Windows Phone Developer Tools, giving game developers 
the power and simplicity of the C# language and the .NET libraries. XNA 
Game Studio 4.0 includes the <em>XNA Framework</em> and <em>XNA Framework Content Pipeline</em>:</p><p><strong>XNA Framework</strong>
 – A collection of application programming interfaces (APIs) that 
greatly simplifies common game development tasks, such as graphical 
rendering and timing, audio playback, input processing, and more</p><p><strong>XNA Framework Content Pipeline</strong> –An easy and flexible way to import three-dimensional (3D) models, textures, sounds, and other assets into your game</p><p>During
 this lab, you will build a full XNA Framework game for Windows Phone 7.
 The game you will build, Catapult Wars, is a single-player game for 
Windows Phone 7 where the player and the computer each control a 
catapult and attempts to destroy the opponent’s catapult. The first side
 to achieve five points by destroying the opposing catapult wins the 
game. </p><p><strong>XNA Game Studio Basics</strong></p><p>While this 
game will be composed of a single game screen, other games could be 
composed of several screens, each representing a different level. You 
can create multiple levels by reusing game screens while slightly 
altering the game logic.</p><p>A game usually has three states:</p><p><strong>Loading </strong>–
 The system loads resources, initializes game-related variables, and 
performs any other necessary pre-game tasks (this state typically occurs
 only once in the game’s life cycle; more complicated games may divide 
loading among the levels or stages of a game as the user progresses)</p><p><strong>Update </strong>–
 The system updates the game-world state, including calculating new 
positions of the acting entities, updating their positions and actions, 
recalculating the score, and performing other game logic relevant to the
 game; these updates occur regularly while the game engine is active</p><p><strong>Draw </strong>–
 The system draws the changes that were calculated in the update state 
onto the output graphics device; drawing occurs regularly while the game
 engine is active</p><p>In the XNA Framework, the Update and Draw stages
 can occur up to 60 times per second on a PC or Xbox 360® and up to 30 
times per second on a Zune®, Zune HD, or Windows Phone 7 device.</p><p><strong>General Architecture</strong></p><p>Catapult Wars is built on another code sample, Windows Phone Game State Management (found at <a href="http://creators.xna.com/en-US/sample/phonegamestatemanagement">http://creators.xna.com/en-US/sample/phonegamestatemanagement</a>), which provides some of the assets for this lab. The game includes the following screens:</p><ul><li>Main menu (MainMenuScreen class) </li><li>Instructions screen (InstructionScreen class)</li><li>Playing the game (GameplayScreen class) </li><li>Paused (PauseScreen class) </li></ul><p>The game performs game-specific content loading during the GameplayScreen class’s initialization.</p><p>When
 launched, the game’s first action is to load and display the background
 screen and then the main menu screen. Once the main menu screen is 
loaded, the menus animate onto the screen, after which the user can 
access the game.</p><p>We start by implementing the GameplayScreen 
class, which serves as the actual game. We’ll go over the other screens 
in the next exercise.</p><a id="ID4EHF" href="#"></a><a id="ID4EOF" href="#"></a><p>The completed game will have a screen like that in Figure 1.</p><p><img src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_006.png" alt=""></p><a id="_Ref271895817" href="#"></a><div class="label"><strong>Figure 5</strong><p><em>Catapult Wars</em></p></div><p></p><a id="_Toc271900417" href="#"></a><h3>Task 1 – Basic game project with game state management</h3><p>In
 this task, you will create an XNA Framework game project for the 
Windows Phone 7 platform and add game state management capabilities to 
it by incorporating code that is supplied with this lab.</p><ol><li>Start Visual Studio 2010 or Visual C# 2010 Express.</li><li>In the File menu, click New Project.<div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">Visual Studio 2010: On the File menu, point to New and then click Project.</div></div><p></p></li><li>In the <strong>New Project</strong> dialog, select the <strong>XNA Game Studio 4.0</strong> category and:<ol><li>From the list of installed templates, select <strong>Windows Phone Game (4.0)</strong></li><li>Then set the project name to <strong>CatapultGame</strong></li><li>Set the solution name to<strong> Begin</strong></li><li>Click <strong>OK</strong><p><img src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_009.png" alt=""></p><div class="label"><strong>Figure 6</strong><p><em>Creating a new Windows Phone game application project in Microsoft Visual Studio 2010</em></p></div><p></p></li></ol></li><li>In <strong>Solution Explorer</strong>, review the structure of the solution generated by the <strong>Windows Phone</strong> Application template. In Visual Studio, a <em>solution</em> is a container for related projects; in this case, it contains an <strong>XNA Game Studio 4.0</strong>project for Windows Phone 7 named <strong>CatapultGame</strong> and a related game resource project named <strong>CatapultGameContent</strong>.<p><img src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_013.png" alt=""></p><div class="label"><strong>Figure 7</strong><p><em>Solution Explorer showing the CatapultGame application</em></p></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">Solution
 Explorer allows you to view items and perform item management tasks in a
 solution or a project. To display the Solution Explorer, on the <strong>View</strong> menu, select <strong>Other Windows | Solution Explorer</strong>; alternatively, you can also press Ctrl+W, S.</div></div><p></p><p>The
 generated project includes a default game implementation that contains 
the basic XNA Framework game loop. It is located in the Game1.cs file.</p><p></p></li><li>Open <strong>Game1.cs</strong>, and change the default name to “<strong>CatapultGame.cs</strong>”. </li><li>Rename the main game class (default name "Game1") to "CatapultGame". To rename it, right click on the class name, select <strong>Refactor</strong> -&gt; <strong>Rename</strong><p><img src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_020.png" alt=""></p><div class="label"><strong>Figure 8</strong><p><em>Renaming the main game class</em></p></div><p></p></li><li>In the <strong>Rename</strong> dialog box, in the <strong>New name</strong> field, type <strong>CatapultGame</strong>, and then click <strong>OK</strong>.<p><img src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_004.png" alt=""></p><div class="label"><strong>Figure 9</strong><p><em>Giving the name to the main game class</em></p></div><p></p></li><li>Review changes suggested by Visual Studio and click <strong>Apply.</strong><p><img src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_007.png" alt=""></p><div class="label"><strong>Figure 10</strong><p><em>Apply changes to main game class</em></p></div><p></p></li><li>Rename the file to match the new class name. Right-click <strong>Game1.cs</strong> in Solution Explorer and choose <strong>Rename</strong>. Give the class the new name <em>CatapultGame.cs</em>.<p><img src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_019.png" alt=""></p><div class="label"><strong>Figure 11</strong><p><em>Rename main game class file</em></p></div><p></p><p>An <strong>XNA Game Studio 4.0</strong>application
 typically takes advantage of services provided by the underlying 
platform or by other libraries. To use this functionality, the 
application needs to reference the corresponding assemblies that 
implement these services.</p><p></p></li><li>To display the assemblies referenced by the project, expand the <strong>References</strong> node in <strong>Solution Explorer</strong> and examine the list. It contains regular XNA Framework assemblies as well as assemblies specific to the <strong>Windows Phone</strong> platform.<p><img src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_018.png" alt=""></p><div class="label"><strong>Figure 12</strong><p><em>Solution Explorer showing the assemblies referenced by the project</em></p></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 currently, the application does not do much, but it is ready for its 
first test run. In this step, you build the application, deploy it to 
the <strong>Windows Phone Emulator</strong>, and then execute it to understand the typical development cycle.</div></div><p></p></li><li>On the <strong>View</strong> menu, click <strong>Output</strong> to open the <strong>Output</strong> window.</li><li>Click <strong>Build Solution </strong>on the <strong>Debug</strong> menu, or press <strong>Shift + F6</strong> to compile the projects in the solution.<div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"><strong>Visual Studio 2010: </strong>Select <strong>Build Solution</strong> in the <strong>Build</strong> menu or press <strong>CTRL + SHIFT + B</strong> to compile the projects in the solution.</div></div><p></p></li><li>Observe the <strong>Output</strong> window and review the trace messages generated during the build process, including a final message with its outcome.<p><img src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_022.png" alt=""></p><div class="label"><strong>Figure 13</strong><p><em>Building the application in Visual Studio</em></p></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 You should not observe any errors at this stage but, if the project 
were to contain compilation errors, these would appear in the <strong>Output</strong> window. To deal with these kinds of errors, you can take advantage of the <strong>Error List</strong>
 window. This window displays errors, warnings, and messages produced by
 the compiler in a list that you can sort and filter based on the 
severity of the error. Moreover, you can double-click an item in the 
list to automatically open the relevant source code file and navigate to
 the source of the error. </div></div><p></p></li><li>To open the <strong>Error List</strong> window, on the <strong>View</strong> menu, point to <strong>Other Windows</strong> and then click <strong>Error List</strong>. <div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"><strong>Visual Studio 2010: </strong>To open the <strong>Error List</strong> window, on the <strong>View</strong> menu, click <strong>Error List</strong>.</div></div><p></p><p><img src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_017.png" alt=""></p><div class="label"><strong>Figure 14</strong><p><em>Error List window shows errors during the build process</em></p></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">Be aware that you should not encounter any errors at this stage. This step simply explains how to access the <strong>Error List</strong> window.</div></div><p></p></li><li>Ensure that <strong>Windows Phone 7 Emulator</strong> is selected in the <strong>Select Device</strong> drop down list next to the <strong>Start Debugging</strong> button on the toolbar.<p><img src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_026.png" alt=""></p><div class="label"><strong>Figure 15</strong><p><em>Choosing the target device to deploy the application</em></p></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">When you deploy your application from Visual Studio, you have the option to deploy it to a real device or to the <strong>Windows Phone Emulator</strong>.</div></div><p></p></li><li>Press <strong>F5</strong> to launch the application in the <strong>Windows Phone Emulator</strong>.<div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 Notice that a device emulator window appears and there is a pause while
 Visual Studio sets up the emulator environment and deploys the image. 
Once it is ready, the emulator shows the Start page and shortly 
thereafter, your application appears in the emulator window.<p></p>The application will display a simple blank blue screen. This is normal for an application in such an early stage.</div></div><p></p><p><img src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_008.png" alt=""></p><div class="label"><strong>Figure 16</strong><p><em>Running the application in the Windows Phone Emulator</em></p></div><p></p></li><li>Click the <strong>Stop</strong>
 button in the toolbar to detach the debugger and end the debugging 
session. Do not close the emulator window. You can also stop the 
application by pressing Shift+F5.<p><img src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_025.png" alt=""></p><div class="label"><strong>Figure 17</strong><p><em>Ending the debugging session</em></p></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 When you start a debugging session, it takes a perceptible amount of 
time to set up the emulator environment and launch the application. To 
streamline your debugging experience, avoid closing the emulator while 
you work with the source code in Visual Studio. Once the emulator is 
running, it takes very little time to stop the current session, edit the
 source code, and then build and deploy a new image of your application 
to start a new debugging session.</div></div><p></p><p>Now that our 
initial game can run on its own, it is time to add game state management
 capabilities to it. This will help us in the next task when we start 
adding screens and menus to the game.</p><p></p></li><li>In <strong>Solution</strong><strong>Explorer</strong>, right-click <strong>CatapultGame</strong>, and then point to <strong>Add</strong> and click<strong> New folder</strong>. This step adds a project folder for the game state management code.<p><img src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2.png" alt=""></p><div class="label"><strong>Figure 18</strong><p><em>Adding a new project folder</em></p></div><p></p></li><li>Name the newly created folder <strong>ScreenManager</strong>.</li><li>Select the ScreenManager folder and add all existing files from the lab installation folder under <strong>Source\Assets\Code\ScreenManager</strong>. To add existing items, right-click <strong>ScreenManager</strong> in <strong>Solution</strong><strong>Explorer</strong>, and then point to <strong>Add </strong>and click <strong>Existing items</strong>. A file selection dialog box will appear.<p><img src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_016.png" alt=""></p><div class="label"><strong>Figure 19</strong><p><em>Adding existing items to the project</em></p></div><p></p></li><li>Navigate to the path specified in the previous step, select all source files, and click the <strong>Add</strong> button.<p><img src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_023.png" alt=""></p><div class="label"><strong>Figure 20</strong><p><em>Adding the ScreenManager source files to the project</em></p></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> All the game resources and sample code are provided in the lab installation folder in the following locations:<p></p>{LAB_PATH}\Source\Assets\Code – all CSharp code files<p></p>{LAB_PATH}\Source\Assets\Media – all graphics, fonts and sounds<p></p>
 The code added in this step implements the Windows Phone Game State 
Management sample for creating XNA Game Studio menus and screens. We 
recommend that you review this sample to better understand it. The 
complete sample can be found at: <a href="http://creators.xna.com/en-US/sample/phonegamestatemanagement">http://creators.xna.com/en-US/sample/phonegamestatemanagement</a><p></p>Note that we have slightly altered the code for this lab.</div></div><p></p></li><li>Review <strong>Solution</strong><strong>Explorer</strong>. Your view of <strong>Solution Explorer</strong> should look like Figure 1.<p><img src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_027.png" alt=""></p><a id="_Ref271896138" href="#"></a><div class="label"><strong>Figure 21</strong><p><em>Solution Explorer after adding the ScreenManager folder and code</em></p></div><p></p></li><li>Build
 the solution again; it should compile without any errors. There is no 
point in running the application again as we have not yet altered it in 
any perceptible way.</li></ol><p></p><a id="_Toc271900418" href="#"></a><h3>Task 2 – Basic game rendering</h3><p>Having
 laid the groundwork for adding screens in the previous task, we can add
 the most important screen in the game—the gameplay screen. This will 
introduce you to the use of resources and the ScreenManager class. The 
real focus of this task is to add most of the initial rendering code to 
the game. We also delve into gameplay logic, where necessary, and 
implement very basic versions of some of the game classes.</p><p>Games use resources (or <em>assets</em>)
 to present the game or enhance the game experience. Resources can be of
 many types: images, textures, sound, and so on. This lab provides you 
with a number of such resources to help you make a complete game.</p><ol><li>Add the lab’s resources to the game resource project. <div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> All resources are located in the lab installation folder under <strong>Source\Assets\Media</strong>.
 While it is possible to add the resources using the technique seen in 
the previous task, the resource files for this lab are arranged in a 
directory tree structure that is helpful to preserve.</div></div><p></p></li><li>Navigate to the ScreenManager folder using Windows Explorer, select all three folders and then drag &amp; drop them into the <strong>CatapultGameContent</strong> project node in <strong>Solution</strong><strong>Explorer</strong>.<p><img src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_012.png" alt=""></p><div class="label"><strong>Figure 22</strong><p><em>Adding the resource folders into the content project</em></p></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 This drag and drop action is to be performed between applications. The 
drag operation begins in Windows Explorer, and the concluding drop 
operation is to <strong>CatapultGameContent</strong> in the Visual Studio.</div></div><p>Resources
 can be created in many different ways and stored in many different file
 formats, and resources tend to change frequently in the course of game 
development. The Content Pipeline is designed to help you include such 
art assets in your game easily and automatically. An artist working on a
 car model can add the resulting file to the XNA Game Studio project in 
the manner just demonstrated and assign the model a name. The Content 
Pipeline determines the correct importer and content processor for the 
model based on the file type. If necessary, you can change the importer 
and processor used. (For further explanation about importers and content
 processors, see “2D Asset Types” on creators.xna.com.) Then, a 
developer who wants to use the car can simply load it by name. This 
simple flow lets the artist focus on creating assets and the developer 
on using them, without either having to spend time worrying about 
content transformation.</p><p>The XNA Content Pipeline is activated as 
part of the build process in your XNA Game Studio project. You just add 
the resource to your project, and when you compile it, the data is 
imported and converted into an XNB (XNA Binary) file using a <em>Content Importer</em>. This XNB file is automatically generated for the desired platform. </p><p>While
 the built-in content importers and processors support many common asset
 types, you can develop and use custom importers and processors; you can
 also incorporate importers and processors created by third parties to 
support additional asset types. </p><p>Some of the standard Content Importers support the following file types (partial list): </p><ul><li>Autodesk FBX format (.fbx)</li><li>DirectX Effect file format (.fx)</li><li>Font description specified in a .spritefont file</li><li>Texture file format: .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga</li><li>Game audio specified in the Microsoft Cross-Platform Audio Creation Tool (XACT) format (.xap), or in wave file format (.wav)<p></p></li></ul></li><li>Examine <strong>Solution</strong><strong>Explorer</strong> to see that it is similar to Figure 1<strong>Error! Reference source not found.</strong>1<p><img src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_010.png" alt=""></p><a id="_Ref271896437" href="#"></a><div class="label"><strong>Figure 23</strong><p><em>The content project with some of its folders expanded</em></p></div><p></p></li><li>Modify the properties of one of the newly added resources:<ol><li>Under <strong>CatapultGameContent</strong>, expand <strong>Textures</strong></li><li> Expand <strong>Catapults</strong></li><li>Select <strong>AnimationDefs.xml</strong></li><li>To view the file’s properties, right-click it, and the click <strong>Properties</strong></li><li>Expand the <strong>Advanced</strong> section and change the <strong>Build Action</strong> property to <strong>None</strong> and the <strong>Copy to Output Directory</strong> property to <strong>Copy if newer</strong>We
 perform this change because we do not need this file to be compiled and
 processed into another format. We will be interpreting it directly. 
Consult the following screenshots in Figure 1 and Figure 1.<p><img src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_011.png" alt=""></p><a id="_Ref271896241" href="#"></a><div class="label"><strong>Figure 24</strong><p><em>Changing a file’s properties</em></p></div><p></p><p><img src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_024.png" alt=""></p><a id="_Ref271896244" href="#"></a><div class="label"><strong>Figure 25</strong><p><em>The file after changing its properties</em></p></div><p></p></li></ol></li><li>This
 is the time to add the very first screen to our project. Add a folder 
to the CatapultGame project and call it “Screens”. You will use this 
project folder to store all game screen classes.<p>Before we start implementing the gameplay screen, let us review its general architecture.</p><p><strong>GameplayScreen and Game Classes</strong></p><p>Technically,
 the game’s update and drawing logic is contained in the GameplayScreen 
class. However, the GameplayScreen does not directly handle all of the 
work, as some of the work is the responsibility of the relevant game 
classes. </p><p>Let us review some of the game classes and their intended purpose:</p><ul><li><strong>Player</strong>:
 The player class represents the two players participating in the game 
and is responsible for drawing each player’s associated catapult on the 
screen. Two different sub-classes of the Player class actually represent
 each of the players. The <strong>Human</strong> class represents the human player and contains additional logic for handling input and providing visual feedback; the <strong>AI</strong>
 class represents the computer player and contains additional logic for 
automatically aiming and firing at the opposing human player.</li><li><strong>Catapult</strong>:
 The catapult class encapsulates all the drawing and logic related to 
one of the catapults in the game. The class keeps track of its 
associated catapult’s state and animates it according to that state.This
 class wil be used for both player and AI</li><li><strong>Projectile</strong>:
 This class represents a projectile fired by one of the catapults. It is
 responsible for rendering the projectile and updating its position, but
 not for determining whether the projectile has hit anything, because 
this is the job of the Catapult class.</li><li><strong>Animation</strong>: This helper class displays animations.</li><li><strong>AudioManager</strong>: This helper class plays sounds.<p></p></li></ul></li><li>Add a new class to the CatapultGame project and name it “GameplayScreen”. To do this:<ol><li> Right-click the <strong>Screens</strong> folder created in the previous step</li><li>Point to <strong>Add</strong></li><li>Click <strong>Class</strong>:<p></p><p><img src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_021.png" alt=""></p><div class="label"><strong>Figure 26</strong><p><em>Adding a new class to the project</em></p></div><p></p><p><img src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_003.png" alt=""></p><div class="label"><strong>Figure 27</strong><p><em>Giving the new class a name</em></p></div><p></p></li></ol></li><li>Open the new class file and see that it only contains some basic "using" statements and the class definition. </li><li>Add the following "using" statements at the top of the file.<p>(Code Snippet – <em>2D Game Development with XNA – GameplayScreen Usings</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">using</span>&nbsp;Microsoft.Xna.Framework;<span class="cs__keyword">using</span>&nbsp;Microsoft.Xna.Framework.Graphics;<span class="cs__keyword">using</span>&nbsp;Microsoft.Xna.Framework.Audio;<span class="cs__keyword">using</span>&nbsp;System.IO.IsolatedStorage;<span class="cs__keyword">using</span>&nbsp;System.IO;<span class="cs__keyword">using</span>&nbsp;Microsoft.Xna.Framework.Input;<span class="cs__keyword">using</span>&nbsp;Microsoft.Xna.Framework.Input.Touch;<span class="cs__keyword">using</span>&nbsp;GameStateManagement;</li></ol></code></pre></div><p>The
 complexity of the gameplay screen necessitates the many using 
statements in the preceding code. The GameplayScreen class will 
eventually be capable of playing sounds, displaying graphics, and 
responding to user input.</p><p></p></li><li>Change the new class to derive from the <em>GameScreen</em>
 class (the GameScreen class is defined in the class files we previously
 added to the ScreenManager folder). Also, change the namespace under 
which the class is defined to <strong>"</strong>CatapultGame":<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">namespace</span>&nbsp;CatapultGame{&nbsp;<span class="cs__keyword">class</span>&nbsp;GameplayScreen&nbsp;:&nbsp;GameScreen&nbsp;{&nbsp;}}</li></ol></code></pre></div><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">from this point forward, whenever creating a new class, always change its namespace to <strong>"</strong>CatapultGame".</div></div><p></p></li><li>Add
 the following field definitions to the class. We use these fields for 
loading the textures/fonts used to draw the screen (though some will not
 be used until much later in the exercise) and also to position some of 
the assets on the screen:<p>(Code Snippet – 2D <em>Game Development with XNA – GameplayScreen Fileds</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__com">//&nbsp;Texture&nbsp;MembersTexture2D&nbsp;foregroundTexture;Texture2D&nbsp;cloud1Texture;Texture2D&nbsp;cloud2Texture;Texture2D&nbsp;mountainTexture;Texture2D&nbsp;skyTexture;Texture2D&nbsp;hudBackgroundTexture;Texture2D&nbsp;ammoTypeTexture;Texture2D&nbsp;windArrowTexture;Texture2D&nbsp;defeatTexture;Texture2D&nbsp;victoryTexture;SpriteFont&nbsp;hudFont;//&nbsp;Rendering&nbsp;membersVector2&nbsp;cloud1Position;Vector2&nbsp;cloud2Position;</span></li></ol></code></pre></div><p></p></li><li>Create
 a new method and name it “LoadAssets”. This method loads the gameplay 
screen’s resources and initializes some of its variables:<p>(Code Snippet – 2D <em>Game Development with XNA – LoadAssets Method</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;LoadAssets(){&nbsp;<span class="cs__com">//&nbsp;Load&nbsp;textures&nbsp;foregroundTexture&nbsp;=&nbsp;&nbsp;Load&lt;Texture2D&gt;("Textures/Backgrounds/gameplay_screen");&nbsp;cloud1Texture&nbsp;=&nbsp;Load&lt;Texture2D&gt;("Textures/Backgrounds/cloud1");&nbsp;cloud2Texture&nbsp;=&nbsp;Load&lt;Texture2D&gt;("Textures/Backgrounds/cloud2");&nbsp;mountainTexture&nbsp;=&nbsp;Load&lt;Texture2D&gt;("Textures/Backgrounds/mountain");&nbsp;skyTexture&nbsp;=&nbsp;Load&lt;Texture2D&gt;("Textures/Backgrounds/sky");&nbsp;defeatTexture&nbsp;=&nbsp;Load&lt;Texture2D&gt;("Textures/Backgrounds/defeat");&nbsp;victoryTexture&nbsp;=&nbsp;Load&lt;Texture2D&gt;("Textures/Backgrounds/victory");&nbsp;hudBackgroundTexture&nbsp;=&nbsp;Load&lt;Texture2D&gt;("Textures/HUD/hudBackground");&nbsp;windArrowTexture&nbsp;=&nbsp;Load&lt;Texture2D&gt;("Textures/HUD/windArrow");&nbsp;ammoTypeTexture&nbsp;=&nbsp;Load&lt;Texture2D&gt;("Textures/HUD/ammoType");&nbsp;//&nbsp;Load&nbsp;font&nbsp;hudFont&nbsp;=&nbsp;Load&lt;SpriteFont&gt;("Fonts/HUDFont");&nbsp;//&nbsp;Define&nbsp;initial&nbsp;cloud&nbsp;position&nbsp;cloud1Position&nbsp;=&nbsp;new&nbsp;Vector2(224&nbsp;-&nbsp;cloud1Texture.Width,&nbsp;32);&nbsp;cloud2Position&nbsp;=&nbsp;new&nbsp;Vector2(64,&nbsp;90);}</span></li></ol></code></pre></div><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 the GameScreen class defines some core game functionality matching the 
three states described in the exercise preface: LoadContent, Update, and
 Draw. </div></div><p></p></li><li>Override the base class’s <strong>LoadContent</strong> functionality to call <strong>LoadAssets</strong> method:<p>(Code Snippet – 2D <em>Game Development with XNA – LoadContent Override</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;LoadContent(){&nbsp;LoadAssets();&nbsp;<span class="cs__keyword">base</span>.LoadContent();}</li></ol></code></pre></div><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 you may wonder why we did not simply place the code from the 
“LoadAssets” method inside the preceding override. The reason is that 
the asset loading operation is rather lengthy. In the next exercise, we 
will see how to introduce a loading prompt so that the game does not 
appear unresponsive. For that purpose, we want to be able to load the 
assets independently of the gameplay screen’s own LoadContent override.</div></div><p></p></li><li>Override the <strong>Draw</strong> method so that the gameplay screen will be able to draw itself onto the screen:<p>(Code Snippet – 2D <em>Game Development with XNA – Draw Override</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;Draw(GameTime&nbsp;gameTime){&nbsp;<span class="cs__keyword">float</span>&nbsp;elapsedTime&nbsp;=&nbsp;(<span class="cs__keyword">float</span>)gameTime.ElapsedGameTime.TotalSeconds;&nbsp;ScreenManager.SpriteBatch.Begin();&nbsp;<span class="cs__com">//&nbsp;Render&nbsp;all&nbsp;parts&nbsp;of&nbsp;the&nbsp;screen&nbsp;DrawBackground();&nbsp;//&nbsp;DrawComputer(gameTime);&nbsp;//&nbsp;DrawPlayer(gameTime);&nbsp;//&nbsp;DrawHud();&nbsp;ScreenManager.SpriteBatch.End();}</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 notice that the Draw method is implemented using several helper methods
 which draw different aspects of the game. For now, most of them are 
commented out; we’ll deal with them later in the exercise.<p></p>The Draw method’s gameTime argument contains the time that passed since the last call to Draw was made.</div></div><p></p></li><li>Add the <strong>DrawBackground</strong> helper method, which draws the various background elements:<p>(Code Snippet – 2D <em>Game Development with XNA – DrawBackground Helper Method</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">private</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;DrawBackground(){&nbsp;<span class="cs__com">//&nbsp;Clear&nbsp;the&nbsp;background&nbsp;ScreenManager.Game.GraphicsDevice.Clear(Color.White);&nbsp;//&nbsp;Draw&nbsp;the&nbsp;Sky&nbsp;ScreenManager.SpriteBatch.Draw(skyTexture,&nbsp;Vector2.Zero,&nbsp;Color.White);&nbsp;//&nbsp;Draw&nbsp;Cloud&nbsp;#1&nbsp;ScreenManager.SpriteBatch.Draw(cloud1Texture,&nbsp;cloud1Position,&nbsp;Color.White);&nbsp;//&nbsp;Draw&nbsp;the&nbsp;Mountain&nbsp;ScreenManager.SpriteBatch.Draw(mountainTexture,&nbsp;Vector2.Zero,&nbsp;Color.White);&nbsp;//&nbsp;Draw&nbsp;Cloud&nbsp;#2&nbsp;ScreenManager.SpriteBatch.Draw(cloud2Texture,&nbsp;cloud2Position,&nbsp;Color.White);&nbsp;//&nbsp;Draw&nbsp;the&nbsp;Castle,&nbsp;trees,&nbsp;and&nbsp;foreground&nbsp;&nbsp;ScreenManager.SpriteBatch.Draw(foregroundTexture,&nbsp;Vector2.Zero,&nbsp;Color.White);}</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 this code simply draws the game’s background image to the screen. The 
code uses the SpriteBatch class from the 
Microsoft.Xna.Framework.Graphics namespace to draw to the graphics 
device. It enables a group of sprites (2D graphics) to be drawn quickly 
by reusing similar rendering settings.<p></p>It is now possible for a 
user to see the gameplay screen, but we must first connect it to the 
rest of the game. In order to accomplish that, we revisit some of our 
code from Exercise 1.<p></p>We can now make the gameplay screen visible. To do that, we must alter the game class <em>CatapultGame</em>. </div></div><p></p></li><li>Open the <strong>CatapultGame.cs</strong> file from the solution explorer and delete all the content inside the CatapultGame class (but <strong><em>not</em></strong> the defined namespace or the using statements). To clarify, make sure the class looks like the following:<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">class</span>&nbsp;CatapultGame&nbsp;:&nbsp;Game{}</li></ol></code></pre></div><p></p></li><li>Add the following using statement at the top of the class file:<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">using</span>&nbsp;GameStateManagement;</li></ol></code></pre></div><p></p></li><li>Add a pair of variable declarations to the beginning of the class:<p>(Code Snippet – 2D <em>Game Development with XNA – CatapultGame Fields</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">class</span>&nbsp;CatapultGame&nbsp;:&nbsp;Game{&nbsp;GraphicsDeviceManager&nbsp;graphics;&nbsp;ScreenManager&nbsp;screenManager;}</li></ol></code></pre></div><p></p></li><li>Now add a constructor to the class which will add the gameplay screen to the screen manager: <p>(Code Snippet – 2D <em>Game Development with XNA – CatapultGame Constructor</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;CatapultGame(){&nbsp;graphics&nbsp;=&nbsp;<span class="cs__keyword">new</span>&nbsp;GraphicsDeviceManager(<span class="cs__keyword">this</span>);&nbsp;Content.RootDirectory&nbsp;=&nbsp;<span class="cs__string">"Content"</span>;&nbsp;<span class="cs__com">//&nbsp;Frame&nbsp;rate&nbsp;is&nbsp;30&nbsp;fps&nbsp;by&nbsp;default&nbsp;for&nbsp;Windows&nbsp;Phone.&nbsp;TargetElapsedTime&nbsp;=&nbsp;TimeSpan.FromTicks(333333);&nbsp;//Create&nbsp;a&nbsp;new&nbsp;instance&nbsp;of&nbsp;the&nbsp;Screen&nbsp;Manager&nbsp;screenManager&nbsp;=&nbsp;new&nbsp;ScreenManager(this);&nbsp;Components.Add(screenManager);&nbsp;//Switch&nbsp;to&nbsp;full&nbsp;screen&nbsp;for&nbsp;best&nbsp;game&nbsp;experience&nbsp;graphics.IsFullScreen&nbsp;=&nbsp;true;&nbsp;//&nbsp;TODO:&nbsp;Start&nbsp;with&nbsp;menu&nbsp;screen&nbsp;screenManager.AddScreen(new&nbsp;GameplayScreen(),&nbsp;null);&nbsp;//&nbsp;AudioManager.Initialize(this);}</span></li></ol></code></pre></div><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 the “TODO” marker comment in the preceding code. In the next exercise, 
We will change the code directly below the TODO comment that loads the 
initial screen from <strong>screenManager.AddScreen(new GameplayScreen(), null); </strong>to instead load a menu screen as the initial screen.<p></p>Note,
 too, that the constructor also contains a commented-out initialization 
of an “AudioManager” class. We will deal with this class in the next 
exercise (and un-comment the relevant code to initialize it).</div></div><p></p></li><li>Build the project and deploy it. Once the game starts, you should see a screen like that in Figure 1.<p><img src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_002.png" alt=""></p><a id="_Ref271896347" href="#"></a><div class="label"><strong>Figure 28</strong><p><em>First look at the gameplay screen</em></p></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 at this point, the gameplay screen is somewhat barren, so next we add 
the Heads-Up-Display (HUD) for the game. The HUD is the portion of the 
game’s interface that displays vital information to the user such as the
 current score.<p></p>However, we also need some additional variables to
 keep track of the information we are about to display. This is a great 
time to introduce some of the game classes to encapsulate some of the 
information.<p></p>Our first task, therefore, will be to create basic versions of the Player class and its two sub-classes: Human and AI.</div></div><p></p></li><li>Create a new project folder under the CatapultGame project and name it <strong>Players</strong>.</li><li>Create a new class under the Players project folder and name it <strong>Player</strong>.</li><li>At the top of the newly created class file, add the following using statements:<p>(Code Snippet – 2D <em>Game Development with XNA – Player Usings</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">using</span>&nbsp;Microsoft.Xna.Framework;<span class="cs__keyword">using</span>&nbsp;Microsoft.Xna.Framework.Graphics;</li></ol></code></pre></div><p></p></li><li>Since
 the player will eventually be responsible for drawing its associated 
catapult, we can consider it a game component that can be drawn to the 
screen. Change the <strong>Player</strong> class to inherit from the <em>DrawableGameComponent</em> class, and make it internal since it will eventually contain some data which is internal to the game:<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">internal</span>&nbsp;<span class="cs__keyword">class</span>&nbsp;Player&nbsp;:&nbsp;DrawableGameComponent{}</li></ol></code></pre></div><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">remember to change class’s namespace to <strong>CatapultGame</strong>.<p></p><strong>DrawableGameComponent</strong>
 is a game component that is notified when it needs to draw itself. For 
more information about this class, see the documentation on MSDN (<a href="http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.drawablegamecomponent.aspx">http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.drawablegamecomponent.aspx</a>).</div></div><p></p></li><li>Add the following variable declarations to the Player class:<p>(Code Snippet – 2D <em>Game Development with XNA – Player Fields</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">protected</span>&nbsp;CatapultGame&nbsp;curGame;<span class="cs__keyword">protected</span>&nbsp;SpriteBatch&nbsp;spriteBatch;<span class="cs__com">//&nbsp;Constants&nbsp;used&nbsp;for&nbsp;calculating&nbsp;shot&nbsp;strengthpublic&nbsp;const&nbsp;float&nbsp;MinShotStrength&nbsp;=&nbsp;150;public&nbsp;const&nbsp;float&nbsp;MaxShotStrength&nbsp;=&nbsp;400;//&nbsp;Public&nbsp;variables&nbsp;used&nbsp;by&nbsp;Gameplay&nbsp;class//&nbsp;TODO&nbsp;enable&nbsp;this:&nbsp;public&nbsp;Catapult&nbsp;Catapult;public&nbsp;int&nbsp;Score;public&nbsp;string&nbsp;Name;</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 these variables will give the Player class access to the game object 
and to a SpriteBatch for visual output, and will allow it to keep track 
of the player’s score and name. Notice the commented-out member 
variable, Catapult, which represents the catapult associated with the 
player. We restore the Catapult member at a later point. Also notice the
 two constants defined, which we use later to perform some calculations 
related to firing projectiles.</div></div><p></p></li><li>Add a set of 
initialization methods for the Player class. Two of the methods are 
constructors and the third is an override of the DrawableGameComponent’s
 <em>Initialize</em> method, which is typically used for loading resources required by the component before displaying it:<p>(Code Snippet – 2D <em>Game Development with XNA – Player Init Methods</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;Player(Game&nbsp;game)&nbsp;:&nbsp;<span class="cs__keyword">base</span>(game){&nbsp;curGame&nbsp;=&nbsp;(CatapultGame)game;}<span class="cs__keyword">public</span>&nbsp;Player(Game&nbsp;game,&nbsp;SpriteBatch&nbsp;screenSpriteBatch)&nbsp;:&nbsp;<span class="cs__keyword">this</span>(game){&nbsp;spriteBatch&nbsp;=&nbsp;screenSpriteBatch;}<span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;Initialize(){&nbsp;Score&nbsp;=&nbsp;<span class="cs__number">0</span>;&nbsp;<span class="cs__keyword">base</span>.Initialize();}</li></ol></code></pre></div><p></p></li><li>Add a new class under the Player project folder and name it <strong>Human</strong>.</li><li>Add the following using statements to the top of the newly created class file:<p>(Code Snippet – 2D <em>Game Development with XNA – Human Usings</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">using</span>&nbsp;Microsoft.Xna.Framework;<span class="cs__keyword">using</span>&nbsp;Microsoft.Xna.Framework.Graphics;<span class="cs__keyword">using</span>&nbsp;Microsoft.Xna.Framework.Input.Touch;</li></ol></code></pre></div><p></p></li><li>Change the Human class to inherit from the <strong>Player</strong> class:<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">class</span>&nbsp;Human&nbsp;:&nbsp;Player{}</li></ol></code></pre></div><p></p></li><li>Add the following constructors inside the <strong>Human</strong> class:<p>(Code Snippet – 2D <em>Game Development with XNA – Human Constructors</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;Human(Game&nbsp;game)&nbsp;:&nbsp;<span class="cs__keyword">base</span>(game){}<span class="cs__keyword">public</span>&nbsp;Human(Game&nbsp;game,&nbsp;SpriteBatch&nbsp;screenSpriteBatch)&nbsp;:&nbsp;<span class="cs__keyword">base</span>(game,&nbsp;screenSpriteBatch){&nbsp;<span class="cs__com">//&nbsp;TODO:&nbsp;Initialize&nbsp;catapult}</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> we will later initialize the player’s catapult as part of the second constructor.</div></div><p></p></li><li>Add a new class under the Players project folder and name it <strong>AI</strong>.</li><li>Add the following using statements to the top of the new class file:<p>(Code Snippet – 2D <em>Game Development with XNA – AI Usings</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">using</span>&nbsp;Microsoft.Xna.Framework;<span class="cs__keyword">using</span>&nbsp;Microsoft.Xna.Framework.Graphics;</li></ol></code></pre></div><p></p></li><li>Change the AI class to inherit from the Player class:<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">class</span>&nbsp;AI&nbsp;:&nbsp;Player{}</li></ol></code></pre></div><p></p></li><li>Add the following constructors inside the AI class:<p>(Code Snippet – 2D <em>Game Development with XNA – AI Constructors</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;AI(Game&nbsp;game)&nbsp;:&nbsp;<span class="cs__keyword">base</span>(game){}<span class="cs__keyword">public</span>&nbsp;AI(Game&nbsp;game,&nbsp;SpriteBatch&nbsp;screenSpriteBatch)&nbsp;:&nbsp;<span class="cs__keyword">base</span>(game,&nbsp;screenSpriteBatch){&nbsp;<span class="cs__com">//&nbsp;TODO:&nbsp;Initialize&nbsp;catapult}</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> now that our basic versions of the player classes are ready, it is time to use them in GameplayScreen.</div></div><p></p></li><li>Open the file <strong>GameplayScreen.cs</strong>
 located inside the Screens project folder and add additional variable 
definitions to the GameplayScreen class. Place them just under the 
existing variable definitions (old code has been colored gray):<p>(Code Snippet – 2D <em>Game Development with XNA – GameplayScreen New Fields</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li>...Vector2&nbsp;cloud1Position;Vector2&nbsp;cloud2Position;Vector2&nbsp;playerHUDPosition;Vector2&nbsp;computerHUDPosition;Vector2&nbsp;windArrowPosition;<span class="cs__com">//&nbsp;Gameplay&nbsp;membersHuman&nbsp;player;AI&nbsp;computer;Vector2&nbsp;wind;bool&nbsp;changeTurn;bool&nbsp;isHumanTurn;bool&nbsp;gameOver;Random&nbsp;random;const&nbsp;int&nbsp;minWind&nbsp;=&nbsp;0;const&nbsp;int&nbsp;maxWind&nbsp;=&nbsp;10;//&nbsp;Helper&nbsp;membersbool&nbsp;isDragging;</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> most of these new variables are not immediately useful. They will come into play as we add more game logic.</div></div><p></p></li><li>Revise the GameplayScreen class’s LoadAssets method by adding additional initialization as shown in the following code:<p>(Code Snippet – 2D <em>Game Development with XNA – LoadAssets Initializations</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li>&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;&nbsp;&nbsp;&nbsp;hudFont&nbsp;=&nbsp;Load&lt;SpriteFont&gt;(<span class="cs__string">"Fonts/HUDFont"</span>);&nbsp;&nbsp;&nbsp;&nbsp;<span class="cs__com">//&nbsp;Define&nbsp;initial&nbsp;cloud&nbsp;position&nbsp;&nbsp;&nbsp;&nbsp;cloud1Position&nbsp;=&nbsp;new&nbsp;Vector2(224&nbsp;-&nbsp;cloud1Texture.Width,&nbsp;32);&nbsp;&nbsp;&nbsp;&nbsp;cloud2Position&nbsp;=&nbsp;new&nbsp;Vector2(64,&nbsp;90);&nbsp;//&nbsp;Define&nbsp;initial&nbsp;HUD&nbsp;positions&nbsp;playerHUDPosition&nbsp;=&nbsp;new&nbsp;Vector2(7,&nbsp;7);&nbsp;computerHUDPosition&nbsp;=&nbsp;new&nbsp;Vector2(613,&nbsp;7);&nbsp;windArrowPosition&nbsp;=&nbsp;new&nbsp;Vector2(345,&nbsp;46);&nbsp;//&nbsp;Initialize&nbsp;human&nbsp;&amp;&nbsp;AI&nbsp;players&nbsp;player&nbsp;=&nbsp;new&nbsp;Human(ScreenManager.Game,&nbsp;ScreenManager.SpriteBatch);&nbsp;player.Initialize();&nbsp;player.Name&nbsp;=&nbsp;"Player";&nbsp;computer&nbsp;=&nbsp;new&nbsp;AI(ScreenManager.Game,&nbsp;ScreenManager.SpriteBatch);&nbsp;computer.Initialize();&nbsp;computer.Name&nbsp;=&nbsp;"Phone";&nbsp;//&nbsp;TODO:&nbsp;Initialize&nbsp;enemy&nbsp;definitions}</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> notice that we have left a placeholder in the code where future code will designate the human and AI players as opponents.</div></div><p></p></li><li>Revise the GameplayScreen class’s LoadContent override so that it looks like the following:<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;LoadContent(){&nbsp;&nbsp;&nbsp;&nbsp;LoadAssets();&nbsp;&nbsp;&nbsp;&nbsp;<span class="cs__keyword">base</span>.LoadContent();&nbsp;<span class="cs__com">//&nbsp;Start&nbsp;the&nbsp;game&nbsp;Start();}</span></li></ol></code></pre></div><p></p></li><li>Add the Start helper methods, which deal with initializations directly related to the beginning of the game:<p>(Code Snippet – 2D <em>Game Development with XNA –Start Helper</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">void</span>&nbsp;Start(){&nbsp;<span class="cs__com">//&nbsp;Set&nbsp;initial&nbsp;wind&nbsp;direction&nbsp;wind&nbsp;=&nbsp;Vector2.Zero;&nbsp;isHumanTurn&nbsp;=&nbsp;false;&nbsp;changeTurn&nbsp;=&nbsp;true;&nbsp;//&nbsp;computer.Catapult.CurrentState&nbsp;=&nbsp;CatapultState.Reset;}</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 the currently commented out line in the preceding code will later 
integrate with other game logic in order to properly set up the game’s 
turn cycle.</div></div><p></p></li><li>Add a pair of methods to the GameplayScreen class. These methods will be used to draw text to the screen with a shadow effect:<p>(Code Snippet – 2D <em>Game Development with XNA – Text to Screen Methods</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__com">//&nbsp;A&nbsp;simple&nbsp;helper&nbsp;to&nbsp;draw&nbsp;shadowed&nbsp;text.void&nbsp;DrawString(SpriteFont&nbsp;font,&nbsp;string&nbsp;text,&nbsp;Vector2&nbsp;position,&nbsp;Color&nbsp;color){&nbsp;ScreenManager.SpriteBatch.DrawString(font,&nbsp;text,&nbsp;new&nbsp;Vector2(position.X&nbsp;+&nbsp;1,&nbsp;position.Y&nbsp;+&nbsp;1),&nbsp;Color.Black);&nbsp;ScreenManager.SpriteBatch.DrawString(font,&nbsp;text,&nbsp;position,&nbsp;color);}//&nbsp;A&nbsp;simple&nbsp;helper&nbsp;to&nbsp;draw&nbsp;shadowed&nbsp;text.void&nbsp;DrawString(SpriteFont&nbsp;font,&nbsp;string&nbsp;text,&nbsp;Vector2&nbsp;position,&nbsp;Color&nbsp;color,&nbsp;float&nbsp;fontScale){&nbsp;ScreenManager.SpriteBatch.DrawString(font,&nbsp;text,&nbsp;&nbsp;new&nbsp;Vector2(position.X&nbsp;+&nbsp;1,&nbsp;position.Y&nbsp;+&nbsp;1),&nbsp;&nbsp;Color.Black,&nbsp;0,&nbsp;new&nbsp;Vector2(0,&nbsp;font.LineSpacing&nbsp;/&nbsp;2),&nbsp;fontScale,&nbsp;SpriteEffects.None,&nbsp;0);&nbsp;ScreenManager.SpriteBatch.DrawString(font,&nbsp;text,&nbsp;position,&nbsp;color,&nbsp;0,&nbsp;new&nbsp;Vector2(0,&nbsp;font.LineSpacing&nbsp;/&nbsp;2),&nbsp;&nbsp;fontScale,&nbsp;SpriteEffects.None,&nbsp;0);}</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 the preceding helper methods draw shadowed text by drawing two 
instances of a specified string, one colored black and with a slight 
offset from the other. The second variation of the method allows scaling
 of the written text.</div></div><p></p></li><li>Change GameplayScreen’s Draw method by restoring the call to the DrawHud method. The method should now look like this:<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;Draw(GameTime&nbsp;gameTime){&nbsp;&nbsp;&nbsp;&nbsp;<span class="cs__keyword">float</span>&nbsp;elapsedTime&nbsp;=&nbsp;(<span class="cs__keyword">float</span>)gameTime.ElapsedGameTime.TotalSeconds;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ScreenManager.SpriteBatch.Begin();&nbsp;&nbsp;&nbsp;&nbsp;<span class="cs__com">//&nbsp;Render&nbsp;all&nbsp;parts&nbsp;of&nbsp;the&nbsp;screen&nbsp;&nbsp;&nbsp;&nbsp;DrawBackground();&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;DrawComputer(gameTime);&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;DrawPlayer(gameTime);&nbsp;DrawHud();&nbsp;&nbsp;&nbsp;&nbsp;ScreenManager.SpriteBatch.End();}</span></li></ol></code></pre></div><p></p></li><li>Add the DrawHud method:<p>(Code Snippet – 2D <em>Game Development with XNA – DrawHud Method</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">void</span>&nbsp;DrawHud(){&nbsp;<span class="cs__keyword">if</span>&nbsp;(gameOver)&nbsp;{&nbsp;Texture2D&nbsp;texture;&nbsp;<span class="cs__keyword">if</span>&nbsp;(player.Score&nbsp;&gt;&nbsp;computer.Score)&nbsp;{&nbsp;texture&nbsp;=&nbsp;victoryTexture;&nbsp;}&nbsp;<span class="cs__keyword">else</span>&nbsp;{&nbsp;texture&nbsp;=&nbsp;defeatTexture;&nbsp;}&nbsp;ScreenManager.SpriteBatch.Draw(&nbsp;texture,&nbsp;<span class="cs__keyword">new</span>&nbsp;Vector2(ScreenManager.Game.GraphicsDevice.Viewport.Width&nbsp;/&nbsp;<span class="cs__number">2</span>&nbsp;-&nbsp;texture.Width&nbsp;/&nbsp;<span class="cs__number">2</span>,&nbsp;ScreenManager.Game.GraphicsDevice.Viewport.Height&nbsp;/&nbsp;<span class="cs__number">2</span>&nbsp;-&nbsp;texture.Height&nbsp;/&nbsp;<span class="cs__number">2</span>),&nbsp;Color.White);&nbsp;}&nbsp;<span class="cs__keyword">else</span>&nbsp;{&nbsp;<span class="cs__com">//&nbsp;Draw&nbsp;Player&nbsp;Hud&nbsp;ScreenManager.SpriteBatch.Draw(hudBackgroundTexture,&nbsp;playerHUDPosition,&nbsp;Color.White);&nbsp;ScreenManager.SpriteBatch.Draw(ammoTypeTexture,&nbsp;playerHUDPosition&nbsp;+&nbsp;new&nbsp;Vector2(33,&nbsp;35),&nbsp;Color.White);&nbsp;DrawString(hudFont,&nbsp;player.Score.ToString(),&nbsp;playerHUDPosition&nbsp;+&nbsp;new&nbsp;Vector2(123,&nbsp;35),&nbsp;Color.White);&nbsp;DrawString(hudFont,&nbsp;player.Name,&nbsp;playerHUDPosition&nbsp;+&nbsp;new&nbsp;Vector2(40,&nbsp;1),&nbsp;Color.Blue);&nbsp;//&nbsp;Draw&nbsp;Computer&nbsp;Hud&nbsp;ScreenManager.SpriteBatch.Draw(hudBackgroundTexture,&nbsp;computerHUDPosition,&nbsp;Color.White);&nbsp;ScreenManager.SpriteBatch.Draw(ammoTypeTexture,&nbsp;computerHUDPosition&nbsp;+&nbsp;new&nbsp;Vector2(33,&nbsp;35),&nbsp;Color.White);&nbsp;DrawString(hudFont,&nbsp;computer.Score.ToString(),&nbsp;computerHUDPosition&nbsp;+&nbsp;new&nbsp;Vector2(123,&nbsp;35),&nbsp;Color.White);&nbsp;DrawString(hudFont,&nbsp;computer.Name,&nbsp;computerHUDPosition&nbsp;+&nbsp;new&nbsp;Vector2(40,&nbsp;1),&nbsp;Color.Red);&nbsp;//&nbsp;Draw&nbsp;Wind&nbsp;direction&nbsp;string&nbsp;text&nbsp;=&nbsp;"WIND";&nbsp;Vector2&nbsp;size&nbsp;=&nbsp;hudFont.MeasureString(text);&nbsp;Vector2&nbsp;windarrowScale&nbsp;=&nbsp;new&nbsp;Vector2(wind.Y&nbsp;/&nbsp;10,&nbsp;1);&nbsp;ScreenManager.SpriteBatch.Draw(windArrowTexture,&nbsp;windArrowPosition,&nbsp;null,&nbsp;Color.White,&nbsp;0,&nbsp;Vector2.Zero,&nbsp;windarrowScale,&nbsp;wind.X&nbsp;&gt;&nbsp;0&nbsp;?&nbsp;SpriteEffects.None&nbsp;:&nbsp;SpriteEffects.FlipHorizontally,&nbsp;0);&nbsp;DrawString(hudFont,&nbsp;text,&nbsp;windArrowPosition&nbsp;-&nbsp;new&nbsp;Vector2(0,&nbsp;size.Y),&nbsp;Color.Black);&nbsp;if&nbsp;(wind.Y&nbsp;==&nbsp;0)&nbsp;{&nbsp;text&nbsp;=&nbsp;"NONE";&nbsp;DrawString(hudFont,&nbsp;text,&nbsp;windArrowPosition,&nbsp;Color.Black);&nbsp;}&nbsp;if&nbsp;(isHumanTurn)&nbsp;{&nbsp;//&nbsp;Prepare&nbsp;human&nbsp;prompt&nbsp;message&nbsp;text&nbsp;=&nbsp;!isDragging&nbsp;?&nbsp;"Drag&nbsp;Anywhere&nbsp;to&nbsp;Fire"&nbsp;:&nbsp;"Release&nbsp;to&nbsp;Fire!";&nbsp;size&nbsp;=&nbsp;hudFont.MeasureString(text);&nbsp;}&nbsp;else&nbsp;{&nbsp;//&nbsp;Prepare&nbsp;AI&nbsp;message&nbsp;text&nbsp;=&nbsp;"I'll&nbsp;get&nbsp;you&nbsp;yet!";&nbsp;size&nbsp;=&nbsp;hudFont.MeasureString(text);&nbsp;}&nbsp;DrawString(hudFont,&nbsp;text,&nbsp;new&nbsp;Vector2(&nbsp;ScreenManager.GraphicsDevice.Viewport.Width&nbsp;/&nbsp;2&nbsp;-&nbsp;size.X&nbsp;/&nbsp;2,&nbsp;ScreenManager.GraphicsDevice.Viewport.Height&nbsp;-&nbsp;size.Y),&nbsp;Color.Green);&nbsp;}}</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> Let us review this rather lengthy method.<p></p>First, we check to see whether the game is over, drawing a banner for victory or defeat, according to how the game ended.<p></p>If
 the game has not yet ended, we then draw two nearly identical elements 
to portray the status of both players. Each element is composed of:<p></p>A background image<p></p>Text depicting the player’s name and score<p></p>A
 graphical representation of the type of ammunition the player is 
currently using (Though our final game will not actually present the 
player with different types of ammunition, this serves as an extension 
point for such a feature)<p></p>After drawing both players’ statuses, we
 draw an indicator that notifies the player of the direction of the 
wind. The purpose of the wind within the frame of the game is to make it
 more challenging for the player to aim, because it affects the course 
of his shot. The wind in the game will blow to the left or right at a 
varying strength; it may also not blow at all. Instead of representing 
the wind as a scalar value, we represent it by the “wind” 2D vector. The
 wind’s X component denotes its direction and its Y component denotes 
its strength. If we examine the code that draws the wind indicator, we 
can see that first the word “WIND” is drawn on the display, followed 
either by an arrow representing the magnitude of the wind that currently
 blows or by the text “NONE” if there is currently no wind.<p></p>Finally,
 we draw a text prompt at the bottom of the screen. The exact text 
depends on whether the human player is currently the active player or 
not, and whether the player is currently in the process of taking a 
shot.</div></div><p></p></li><li>Compile and deploy the project. You should now see an image like Figure 1.<p><img src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_015.png" alt=""></p><a id="_Ref271896377" href="#"></a><div class="label"><strong>Figure 29</strong><p><em>The gameplay screen, with the new HUD</em></p></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 while the game screen now contains much more information, it is still 
missing a key aspect, which is also the namesake of the game—the 
catapults. We now focus on adding the Catapult class, which is 
responsible for drawing the game’s catapults and which will eventually 
be responsible for much of the game’s logic.</div></div><p></p></li><li>Create a new project folder and name it “Catapult”.</li><li>Add a new class under the Catapult project folder and name it “Catapult”.</li><li>Add the following using statements to the top of the newly created file:<p>(Code Snippet – 2D <em>Game Development with XNA – Catapult Usings</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">using</span>&nbsp;System.Xml.Linq;<span class="cs__keyword">using</span>&nbsp;System;<span class="cs__keyword">using</span>&nbsp;Microsoft.Xna.Framework;<span class="cs__keyword">using</span>&nbsp;Microsoft.Xna.Framework.Graphics;<span class="cs__keyword">using</span>&nbsp;Microsoft.Xna.Framework.Input.Touch;<span class="cs__keyword">using</span>&nbsp;Microsoft.Devices;</li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 One of the preceding using statements requires us to add an assembly 
reference to the project. This will allow the project to use the 
services implemented by the referenced assembly. </div></div><p></p></li><li>Right click the <strong>Referneces</strong> node under the project and select <strong>Add Reference</strong>.</li><li>In the dialog which appears, find the entry for <strong>Microsoft.Devices.Sensors</strong>, select it and click the OK button:<p><img src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_005.png" alt=""></p><div class="label"><strong>Figure 30</strong><p><em>Adding a reference to the project</em></p></div><p></p></li><li>Change the <em>Catapult</em> class to derive from the <strong>DrawableGameComponent</strong> class, as it logically represents just that – a game component that can be drawn:<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">class</span>&nbsp;Catapult&nbsp;:&nbsp;DrawableGameComponent{}</li></ol></code></pre></div><p></p></li><li>We
 will eventually want a way to keep track of a catapult’s state. Add the
 following enum declaration above the class (still inside the same 
file):<p>(Code Snippet – 2D <em>Game Development with XNA – CatapultState Enum</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li>[Flags]<span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">enum</span>&nbsp;CatapultState{&nbsp;Idle&nbsp;=&nbsp;0x0,&nbsp;Aiming&nbsp;=&nbsp;0x1,&nbsp;Firing&nbsp;=&nbsp;0x2,&nbsp;ProjectileFlying&nbsp;=&nbsp;0x4,&nbsp;ProjectileHit&nbsp;=&nbsp;0x8,&nbsp;Hit&nbsp;=&nbsp;0x10,&nbsp;Reset&nbsp;=&nbsp;0x20,&nbsp;Stalling&nbsp;=&nbsp;0x40}</li></ol></code></pre></div><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 the preceding enum will make it possible for a catapult to have more 
than one state at any given time by using binary values that can be 
stored and retrieved independently of the other values. This type of 
enum is known as a <em>bitmask</em>.</div></div><p></p></li><li>Add the following variable declarations to the Catapult class:<p>(Code Snippet – 2D <em>Game Development with XNA – Catapult Fields</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__com">//&nbsp;MARK:&nbsp;Fields&nbsp;startCatapultGame&nbsp;curGame&nbsp;=&nbsp;null;SpriteBatch&nbsp;spriteBatch;Texture2D&nbsp;idleTexture;string&nbsp;idleTextureName;bool&nbsp;isAI;SpriteEffects&nbsp;spriteEffects;//&nbsp;MARK:&nbsp;Fields&nbsp;end</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 now the class can store its associated game, a SpriteBatch with which 
to display assets, and a texture which shows the catapult in its idle 
state. We also added a variable to represent whether the catapult is AI 
controlled or human controlled and an additional rendering variable we 
will not immediately use.</div></div><p></p></li><li>Add the following 
properties and backing fields to the class. One will be used to 
represent the catapult’s position, and another to represent the 
catapult’s state:<p>(Code Snippet – 2D <em>Game Development with XNA – Catapult Properties</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li>Vector2&nbsp;catapultPosition;<span class="cs__keyword">public</span>&nbsp;Vector2&nbsp;Position{&nbsp;get&nbsp;{&nbsp;<span class="cs__keyword">return</span>&nbsp;catapultPosition;&nbsp;}}CatapultState&nbsp;currentState;<span class="cs__keyword">public</span>&nbsp;CatapultState&nbsp;CurrentState{&nbsp;get&nbsp;{&nbsp;<span class="cs__keyword">return</span>&nbsp;currentState;&nbsp;}&nbsp;set&nbsp;{&nbsp;currentState&nbsp;=&nbsp;value;&nbsp;}}</li></ol></code></pre></div><p></p></li><li>Add the following constructors to the catapult class:<p>(Code Snippet – 2D <em>Game Development with XNA – Catapult Constructors</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;Catapult(Game&nbsp;game)&nbsp;:&nbsp;<span class="cs__keyword">base</span>(game){&nbsp;curGame&nbsp;=&nbsp;(CatapultGame)game;}<span class="cs__keyword">public</span>&nbsp;Catapult(Game&nbsp;game,&nbsp;SpriteBatch&nbsp;screenSpriteBatch,&nbsp;<span class="cs__keyword">string</span>&nbsp;IdleTexture,&nbsp;Vector2&nbsp;CatapultPosition,&nbsp;SpriteEffects&nbsp;SpriteEffect,&nbsp;<span class="cs__keyword">bool</span>&nbsp;IsAI)&nbsp;:&nbsp;<span class="cs__keyword">this</span>(game){&nbsp;idleTextureName&nbsp;=&nbsp;IdleTexture;&nbsp;catapultPosition&nbsp;=&nbsp;CatapultPosition;&nbsp;spriteEffects&nbsp;=&nbsp;SpriteEffect;&nbsp;spriteBatch&nbsp;=&nbsp;screenSpriteBatch;&nbsp;isAI&nbsp;=&nbsp;IsAI;&nbsp;<span class="cs__com">//&nbsp;splitFrames&nbsp;=&nbsp;new&nbsp;Dictionary&lt;string,&nbsp;int&gt;();&nbsp;//&nbsp;animations&nbsp;=&nbsp;new&nbsp;Dictionary&lt;string,&nbsp;Animation&gt;();}</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> the second constructor contains some commented out lines, which refer to members that we add at a later stage.</div></div><p></p></li><li>In the Catapult class, override the DrawableGameComponent’s <strong>Initialize</strong> method:<p>(Code Snippet – 2D <em>Game Development with XNA – Catapult Initialize</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;Initialize(){&nbsp;<span class="cs__com">//&nbsp;Define&nbsp;initial&nbsp;state&nbsp;of&nbsp;the&nbsp;catapult&nbsp;currentState&nbsp;=&nbsp;CatapultState.Idle;&nbsp;//&nbsp;Load&nbsp;the&nbsp;idle&nbsp;texture&nbsp;idleTexture&nbsp;=&nbsp;curGame.Content.Load&lt;Texture2D&gt;(idleTextureName);&nbsp;base.Initialize();}</span></li></ol></code></pre></div><p></p></li><li>Finally, we override the Draw method so that the Catapult can be drawn to the screen:<p>(Code Snippet – 2D <em>Game Development with XNA – Catapult Draw</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;Draw(GameTime&nbsp;gameTime){&nbsp;spriteBatch.Draw(idleTexture,&nbsp;catapultPosition,&nbsp;<span class="cs__keyword">null</span>,&nbsp;Color.White,&nbsp;<span class="cs__number">0</span>.0f,&nbsp;Vector2.Zero,&nbsp;<span class="cs__number">1</span>.0f,&nbsp;spriteEffects,&nbsp;<span class="cs__number">0</span>);&nbsp;<span class="cs__keyword">base</span>.Draw(gameTime);}</li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 The catapults can now be drawn, but in order for that to actually 
happen, we need to revisit the player classes and the gameplay screen.</div></div><p></p></li><li>Open the <strong>Player.cs</strong> file and restore the field definition for the “Catapult” field. The relevant portion of the file should now look like this:<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li>...<span class="cs__keyword">protected</span>&nbsp;CatapultGame&nbsp;curGame;<span class="cs__keyword">protected</span>&nbsp;SpriteBatch&nbsp;spriteBatch;<span class="cs__com">//&nbsp;Public&nbsp;variables&nbsp;used&nbsp;by&nbsp;Gameplay&nbsp;classpublic&nbsp;Catapult&nbsp;Catapult;public&nbsp;int&nbsp;Score;public&nbsp;string&nbsp;Name;...</span></li></ol></code></pre></div><p></p></li><li>Override the Draw method in the Player class:<p>(Code Snippet – 2D <em>Game Development with XNA – Player Draw</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;Draw(GameTime&nbsp;gameTime){&nbsp;<span class="cs__com">//&nbsp;Draw&nbsp;related&nbsp;catapults&nbsp;Catapult.Draw(gameTime);&nbsp;base.Draw(gameTime);}</span></li></ol></code></pre></div><p></p></li><li>Open the <strong>Human.cs</strong>
 file and locate the TODO marker we have left in the Human class’s 
constructor. Change it so that the constructor looks like the following:<p>(Code Snippet – 2D <em>Game Development with XNA – Human New Catapult</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;Human(Game&nbsp;game,&nbsp;SpriteBatch&nbsp;screenSpriteBatch)&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;<span class="cs__keyword">base</span>(game,&nbsp;screenSpriteBatch){&nbsp;Catapult&nbsp;=&nbsp;<span class="cs__keyword">new</span>&nbsp;Catapult(game,&nbsp;screenSpriteBatch,&nbsp;<span class="cs__string">"Textures/Catapults/Blue/blueIdle/blueIdle"</span>,&nbsp;<span class="cs__keyword">new</span>&nbsp;Vector2(<span class="cs__number">140</span>,&nbsp;<span class="cs__number">332</span>),&nbsp;SpriteEffects.None,&nbsp;<span class="cs__keyword">false</span>);}</li></ol></code></pre></div><p></p></li><li>Override the base class’s <strong>Initialize</strong> method:<p>(Code Snippet – 2D <em>Game Development with XNA – Player Initialize</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;Initialize(){&nbsp;<span class="cs__com">//&nbsp;TODO:&nbsp;Load&nbsp;textures&nbsp;Catapult.Initialize();&nbsp;base.Initialize();}</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> notice that we have left a placeholder where we will later load additional textures used by the Human class.</div></div><p></p></li><li>Open the <strong>AI.cs</strong> file and locate the TODO marker we have left in the AI class’s constructor. Change it so that the constructor looks as follows:<p>(Code Snippet – 2D <em>Game Development with XNA – AI New Catapult</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;AI(Game&nbsp;game,&nbsp;SpriteBatch&nbsp;screenSpriteBatch)&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;<span class="cs__keyword">base</span>(game,&nbsp;screenSpriteBatch){&nbsp;Catapult&nbsp;=&nbsp;<span class="cs__keyword">new</span>&nbsp;Catapult(game,&nbsp;screenSpriteBatch,&nbsp;<span class="cs__string">"Textures/Catapults/Red/redIdle/redIdle"</span>,&nbsp;<span class="cs__keyword">new</span>&nbsp;Vector2(<span class="cs__number">600</span>,&nbsp;<span class="cs__number">332</span>),&nbsp;SpriteEffects.FlipHorizontally,&nbsp;<span class="cs__keyword">true</span>);}</li></ol></code></pre></div><p></p></li><li>Override the base class’s <strong>Initialize</strong> method:<p>(Code Snippet – 2D <em>Game Development with XNA – AI Initialize</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;Initialize(){&nbsp;<span class="cs__com">//&nbsp;TODO:&nbsp;Additional&nbsp;initialization&nbsp;Catapult.Initialize();&nbsp;base.Initialize();}</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> notice that we have left a placeholder where we will later perform further initialization.</div></div><p></p></li><li>Open the <strong>GameplayScreen.cs</strong> file and add the DrawComputer and DrawPlayer helper methods to the GameplayScreen class:<p>(Code Snippet – 2D <em>Game Development with XNA – DrawComputer DrawPlayer</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">void</span>&nbsp;DrawPlayer(GameTime&nbsp;gameTime){&nbsp;<span class="cs__keyword">if</span>&nbsp;(!gameOver)&nbsp;player.Draw(gameTime);}<span class="cs__keyword">void</span>&nbsp;DrawComputer(GameTime&nbsp;gameTime){&nbsp;<span class="cs__keyword">if</span>&nbsp;(!gameOver)&nbsp;computer.Draw(gameTime);}</li></ol></code></pre></div><p></p></li><li>Finally,
 we must make the GameplayScreen class render both players. Navigate to 
the “Draw” method and remove the comments on the lines that call the 
“DrawComputer” and “DrawPlayer” helper methods. The relevant portion of 
the code should now look like this:<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li>...DrawBackground();DrawComputer(gameTime);DrawPlayer(gameTime);DrawHud();...</li></ol></code></pre></div><p></p></li><li>Compile and deploy the project. After navigating to the game screen, the catapults should now be visible, as shown in Figure 1.<p><img src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_014.png" alt=""></p><a id="_Ref271896411" href="#"></a><div class="label"><strong>Figure 31</strong><p><em>The catapults can now be seen</em></p></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 This concludes the first task of this exercise. During the next task, 
we will implement the game’s logic; at this point, the game merely draws
 its various elements to the screen.</div></div></li></ol><p></p><a id="_Toc271900419" href="#"></a><h3>Task 3 – Game logic</h3><p>In
 the course of this task, we add many elements that are still missing 
from the game. We add a turn cycle that alternates between the human and
 computer players, giving each a chance to take a shot at the other 
player. This includes adding projectiles and their associated physics, 
handling user input, writing the AI logic, and so on.</p><ol><li>We 
start by creating a class to represent the catapult projectiles. Both 
players fire projectiles, and the projectiles need to behave in 
accordance with the laws of physics, including taking the wind into 
account. Add a new class under the “Catapult” folder and name it <strong>Projectile</strong>.</li><li>Add the following using statements to the top of the newly created file:<p>(Code Snippet – 2D <em>Game Development with XNA – Projectile Usings</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">using</span>&nbsp;Microsoft.Xna.Framework;<span class="cs__keyword">using</span>&nbsp;Microsoft.Xna.Framework.Graphics;</li></ol></code></pre></div><p></p></li><li>As
 the projectile represents an entity that will be drawn on screen, 
change the Projectile class to inherit from the DrawableGameComponent 
class.<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">class</span>&nbsp;Projectile&nbsp;:&nbsp;DrawableGameComponent{}</li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">remember to alter the new class’s namespace as we have done previously.</div></div><p></p></li><li>Add the following field and property definitions to the Projectile class:<p>(Code Snippet – 2D <em>Game Development with XNA – Projectile Fields</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li>SpriteBatch&nbsp;spriteBatch;Game&nbsp;curGame;Random&nbsp;random;<span class="cs__com">//&nbsp;Textures&nbsp;for&nbsp;projectilestring&nbsp;textureName;//&nbsp;Position&nbsp;and&nbsp;speed&nbsp;of&nbsp;projectileVector2&nbsp;projectileVelocity&nbsp;=&nbsp;Vector2.Zero;float&nbsp;projectileInitialVelocityY;Vector2&nbsp;projectileRotationPosition&nbsp;=&nbsp;Vector2.Zero;float&nbsp;projectileRotation;float&nbsp;flightTime;bool&nbsp;isAI;float&nbsp;hitOffset;float&nbsp;gravity;Vector2&nbsp;projectileStartPosition;public&nbsp;Vector2&nbsp;ProjectileStartPosition{&nbsp;get&nbsp;{&nbsp;return&nbsp;projectileStartPosition;&nbsp;}&nbsp;set&nbsp;{&nbsp;projectileStartPosition&nbsp;=&nbsp;value;&nbsp;}}Vector2&nbsp;projectilePosition&nbsp;=&nbsp;Vector2.Zero;public&nbsp;Vector2&nbsp;ProjectilePosition{&nbsp;get&nbsp;{&nbsp;return&nbsp;projectilePosition;&nbsp;}&nbsp;set&nbsp;{&nbsp;projectilePosition&nbsp;=&nbsp;value;&nbsp;}}//&nbsp;Gets&nbsp;the&nbsp;position&nbsp;where&nbsp;the&nbsp;projectile&nbsp;hit&nbsp;the&nbsp;ground.//&nbsp;Only&nbsp;valid&nbsp;after&nbsp;a&nbsp;hit&nbsp;occurs.public&nbsp;Vector2&nbsp;ProjectileHitPosition&nbsp;{&nbsp;get;&nbsp;private&nbsp;set;&nbsp;}Texture2D&nbsp;projectileTexture;public&nbsp;Texture2D&nbsp;ProjectileTexture{&nbsp;get&nbsp;{&nbsp;return&nbsp;projectileTexture;&nbsp;}&nbsp;set&nbsp;{&nbsp;projectileTexture&nbsp;=&nbsp;value;&nbsp;}}</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 most of the preceding fields and properties have names that make it 
possible to deduce their purpose, but this will become clearer as we 
implement more of the projectile’s code.</div></div><p></p></li><li>Add the following constructors to the Projectile class:<p>(Code Snippet – 2D <em>Game Development with XNA – Projectile Constructors</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;Projectile(Game&nbsp;game)&nbsp;:&nbsp;<span class="cs__keyword">base</span>(game){&nbsp;curGame&nbsp;=&nbsp;game;&nbsp;random&nbsp;=&nbsp;<span class="cs__keyword">new</span>&nbsp;Random();}<span class="cs__keyword">public</span>&nbsp;Projectile(Game&nbsp;game,&nbsp;SpriteBatch&nbsp;screenSpriteBatch,&nbsp;<span class="cs__keyword">string</span>&nbsp;TextureName,&nbsp;Vector2&nbsp;startPosition,&nbsp;<span class="cs__keyword">float</span>&nbsp;groundHitOffset,&nbsp;<span class="cs__keyword">bool</span>&nbsp;isAi,&nbsp;<span class="cs__keyword">float</span>&nbsp;Gravity)&nbsp;:&nbsp;<span class="cs__keyword">this</span>(game){&nbsp;spriteBatch&nbsp;=&nbsp;screenSpriteBatch;&nbsp;projectileStartPosition&nbsp;=&nbsp;startPosition;&nbsp;textureName&nbsp;=&nbsp;TextureName;&nbsp;isAI&nbsp;=&nbsp;isAi;&nbsp;hitOffset&nbsp;=&nbsp;groundHitOffset;&nbsp;gravity&nbsp;=&nbsp;Gravity;}</li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 the preceding constructors simply initialize the class’s various fields
 and are used later by the Catapult class to create new projectiles.</div></div><p></p></li><li>Override the DrawableGameComponent’s <strong>Initialize</strong> method to load the projectile’s texture:<p>(Code Snippet – 2D <em>Game Development with XNA – Projectile Initialize</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;Initialize(){&nbsp;<span class="cs__com">//&nbsp;Load&nbsp;a&nbsp;projectile&nbsp;texture&nbsp;projectileTexture&nbsp;=&nbsp;curGame.Content.Load&lt;Texture2D&gt;(textureName);}</span></li></ol></code></pre></div><p></p></li><li>Override the DrawableGameComponent’s <strong>Draw</strong> method:<p>(Code Snippet – 2D <em>Game Development with XNA – Projectile Draw</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;Draw(GameTime&nbsp;gameTime){&nbsp;spriteBatch.Draw(projectileTexture,&nbsp;projectilePosition,&nbsp;<span class="cs__keyword">null</span>,&nbsp;Color.White,&nbsp;projectileRotation,&nbsp;<span class="cs__keyword">new</span>&nbsp;Vector2(projectileTexture.Width&nbsp;/&nbsp;<span class="cs__number">2</span>,&nbsp;projectileTexture.Height&nbsp;/&nbsp;<span class="cs__number">2</span>),&nbsp;<span class="cs__number">1</span>.0f,&nbsp;SpriteEffects.None,&nbsp;<span class="cs__number">0</span>);&nbsp;<span class="cs__keyword">base</span>.Draw(gameTime);}</li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> The Draw method is written so that the projectile can be rotated by updating the “projectileRotation” field.</div></div><p></p></li><li>Next, add the most important projectile method—the one which updates the projectile while it is in flight:<p>(Code Snippet – 2D <em>Game Development with XNA – UpdateProjectileFlightData</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;UpdateProjectileFlightData(GameTime&nbsp;gameTime,&nbsp;<span class="cs__keyword">float</span>&nbsp;wind,&nbsp;<span class="cs__keyword">float</span>&nbsp;gravity,&nbsp;<span class="cs__keyword">out</span>&nbsp;<span class="cs__keyword">bool</span>&nbsp;groundHit){&nbsp;flightTime&nbsp;+=&nbsp;(<span class="cs__keyword">float</span>)gameTime.ElapsedGameTime.TotalSeconds;&nbsp;<span class="cs__com">//&nbsp;Calculate&nbsp;new&nbsp;projectile&nbsp;position&nbsp;using&nbsp;standard&nbsp;//&nbsp;formulas,&nbsp;taking&nbsp;the&nbsp;wind&nbsp;as&nbsp;a&nbsp;force.&nbsp;int&nbsp;direction&nbsp;=&nbsp;isAI&nbsp;?&nbsp;-1&nbsp;:&nbsp;1;&nbsp;var&nbsp;previousXPosition&nbsp;=&nbsp;projectilePosition.X;&nbsp;var&nbsp;previousYPosition&nbsp;=&nbsp;projectilePosition.Y;&nbsp;projectilePosition.X&nbsp;=&nbsp;projectileStartPosition.X&nbsp;+&nbsp;(direction&nbsp;*&nbsp;projectileVelocity.X&nbsp;*&nbsp;flightTime)&nbsp;+&nbsp;0.5f&nbsp;*&nbsp;(8&nbsp;*&nbsp;wind&nbsp;*&nbsp;(float)Math.Pow(flightTime,&nbsp;2));&nbsp;projectilePosition.Y&nbsp;=&nbsp;projectileStartPosition.Y&nbsp;-&nbsp;(projectileVelocity.Y&nbsp;*&nbsp;flightTime)&nbsp;+&nbsp;0.5f&nbsp;*&nbsp;(gravity&nbsp;*&nbsp;(float)Math.Pow(flightTime,&nbsp;2));&nbsp;//&nbsp;Calculate&nbsp;the&nbsp;projectile&nbsp;rotation&nbsp;projectileRotation&nbsp;+=&nbsp;MathHelper.ToRadians(projectileVelocity.X&nbsp;*&nbsp;0.5f);&nbsp;//&nbsp;Check&nbsp;if&nbsp;projectile&nbsp;hit&nbsp;the&nbsp;ground&nbsp;or&nbsp;even&nbsp;passed&nbsp;it&nbsp;&nbsp;//&nbsp;(could&nbsp;happen&nbsp;during&nbsp;normal&nbsp;calculation)&nbsp;if&nbsp;(projectilePosition.Y&nbsp;&gt;=&nbsp;332&nbsp;+&nbsp;hitOffset)&nbsp;{&nbsp;projectilePosition.X&nbsp;=&nbsp;previousXPosition;&nbsp;projectilePosition.Y&nbsp;=&nbsp;previousYPosition;&nbsp;ProjectileHitPosition&nbsp;=&nbsp;new&nbsp;Vector2(previousXPosition,&nbsp;332);&nbsp;groundHit&nbsp;=&nbsp;true;&nbsp;}&nbsp;else&nbsp;{&nbsp;groundHit&nbsp;=&nbsp;false;&nbsp;}}</span></li></ol></code></pre></div><p></p><p>Let us review the preceding function: </p><p>First
 we keep track of the projectile’s total flight time by incrementing the
 value we have previously stored with the time elapsed since this method
 was last invoked (provided by the caller using the gameTime parameter).
 </p><p>Next, we calculate the projectile’s new position according to its initial velocity, the wind and the effects of gravity. </p><p>After
 calculating the projectile’s new position, we rotate it according to 
how fast it is travelling and check whether it has hit the ground. </p><p>If
 the projectile has hit the ground, we alter its position slightly so 
that it does not appear as if it has entered the ground and store the 
hit position for later use.</p></li><li>Now add one last method to the Projectile class:<p>(Code Snippet – 2D <em>Game Development with XNA – Projectile Fire</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;Fire(<span class="cs__keyword">float</span>&nbsp;velocityX,&nbsp;<span class="cs__keyword">float</span>&nbsp;velocityY){&nbsp;<span class="cs__com">//&nbsp;Set&nbsp;initial&nbsp;projectile&nbsp;velocity&nbsp;projectileVelocity.X&nbsp;=&nbsp;velocityX;&nbsp;projectileVelocity.Y&nbsp;=&nbsp;velocityY;&nbsp;projectileInitialVelocityY&nbsp;=&nbsp;projectileVelocity.Y;&nbsp;//&nbsp;Reset&nbsp;calculation&nbsp;variables&nbsp;flightTime&nbsp;=&nbsp;0;}</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> The preceding method initializes a projectile after it has been “fired” by one of the catapults.<p></p>The projectile class is ready and we can now set our sights on expanding the Catapult class.</div></div><p></p></li><li>It
 is time to add some additional fields and constants to the Catapult 
class. To make things simple, replace all code between the two comments 
“// MARK: Fields start” and “// MARK: Fields end”:<p>(Code Snippet – 2D <em>Game Development with XNA – Catapult New Fields</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__com">//&nbsp;MARK:&nbsp;Fields&nbsp;startCatapultGame&nbsp;curGame&nbsp;=&nbsp;null;SpriteBatch&nbsp;spriteBatch;Random&nbsp;random;const&nbsp;int&nbsp;winScore&nbsp;=&nbsp;5;public&nbsp;bool&nbsp;AnimationRunning;public&nbsp;string&nbsp;Name;public&nbsp;bool&nbsp;IsActive;//&nbsp;In&nbsp;some&nbsp;cases,&nbsp;the&nbsp;game&nbsp;needs&nbsp;to&nbsp;start&nbsp;second&nbsp;animation&nbsp;while&nbsp;first//&nbsp;animation&nbsp;is&nbsp;still&nbsp;running;//&nbsp;this&nbsp;variable&nbsp;defines&nbsp;at&nbsp;which&nbsp;frame&nbsp;the&nbsp;second&nbsp;animation&nbsp;should&nbsp;start//&nbsp;UNCOMMENT:&nbsp;Dictionary&lt;string,&nbsp;int&gt;&nbsp;splitFrames;Texture2D&nbsp;idleTexture;//&nbsp;UNCOMMENT:&nbsp;Dictionary&lt;string,&nbsp;Animation&gt;&nbsp;animations;SpriteEffects&nbsp;spriteEffects;//&nbsp;ProjectileProjectile&nbsp;projectile;string&nbsp;idleTextureName;bool&nbsp;isAI;//&nbsp;Game&nbsp;constantsconst&nbsp;float&nbsp;gravity&nbsp;=&nbsp;500f;//&nbsp;State&nbsp;of&nbsp;the&nbsp;catapult&nbsp;during&nbsp;its&nbsp;last&nbsp;updateCatapultState&nbsp;lastUpdateState&nbsp;=&nbsp;CatapultState.Idle;//&nbsp;Used&nbsp;to&nbsp;stall&nbsp;animationsint&nbsp;stallUpdateCycles;//&nbsp;MARK:&nbsp;Fields&nbsp;end</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 you will notice some comments that begin with “UNCOMMENT”. We introduce
 the fields that these comments hide later, but they are not required 
yet; one of them relies on a class that we have yet to implement. You 
might remember that we have already encountered these fields when 
implementing one of the Catapult class’s constructors.</div></div><p></p></li><li>Add the following properties to the Catapult class:<p>(Code Snippet – 2D <em>Game Development with XNA – Catapult New Properties</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">float</span>&nbsp;wind;<span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">float</span>&nbsp;Wind{&nbsp;set&nbsp;{&nbsp;wind&nbsp;=&nbsp;value;&nbsp;}}Player&nbsp;enemy;<span class="cs__keyword">internal</span>&nbsp;Player&nbsp;Enemy{&nbsp;set&nbsp;{&nbsp;enemy&nbsp;=&nbsp;value;&nbsp;}}Player&nbsp;self;<span class="cs__keyword">internal</span>&nbsp;Player&nbsp;Self{&nbsp;set&nbsp;{&nbsp;self&nbsp;=&nbsp;value;&nbsp;}}<span class="cs__com">//&nbsp;Describes&nbsp;how&nbsp;powerful&nbsp;the&nbsp;current&nbsp;shot&nbsp;being&nbsp;fired&nbsp;is.&nbsp;The&nbsp;more&nbsp;powerful//&nbsp;the&nbsp;shot,&nbsp;the&nbsp;further&nbsp;it&nbsp;goes.&nbsp;0&nbsp;is&nbsp;the&nbsp;weakest,&nbsp;1&nbsp;is&nbsp;the&nbsp;strongest.public&nbsp;float&nbsp;ShotStrength&nbsp;{&nbsp;get;&nbsp;set;&nbsp;}public&nbsp;float&nbsp;ShotVelocity&nbsp;{&nbsp;get;&nbsp;set;&nbsp;}//&nbsp;Used&nbsp;to&nbsp;determine&nbsp;whether&nbsp;the&nbsp;game&nbsp;is&nbsp;overpublic&nbsp;bool&nbsp;GameOver&nbsp;{&nbsp;get;&nbsp;set;&nbsp;}</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 These properties allow a catapult to keep track of the wind, its 
associated player, the enemy player, the current shot being fired, and 
the state of the current game.</div></div><p></p></li><li>Now alter the 
Catapult class’s “Initialize” method by adding some code just before the
 call to base.Initialize. This code will initialize the new fields we 
have added:<p>(Code Snippet – 2D <em>Game Development with XNA – Catapult Fields Initialization</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li>...&nbsp;&nbsp;&nbsp;&nbsp;<span class="cs__com">//&nbsp;Load&nbsp;the&nbsp;textures&nbsp;&nbsp;&nbsp;&nbsp;idleTexture&nbsp;=&nbsp;curGame.Content.Load&lt;Texture2D&gt;(idleTextureName);&nbsp;//&nbsp;Initialize&nbsp;the&nbsp;projectile&nbsp;Vector2&nbsp;projectileStartPosition;&nbsp;if&nbsp;(isAI)&nbsp;projectileStartPosition&nbsp;=&nbsp;new&nbsp;Vector2(630,&nbsp;340);&nbsp;else&nbsp;projectileStartPosition&nbsp;=&nbsp;new&nbsp;Vector2(175,&nbsp;340);&nbsp;//&nbsp;TODO:&nbsp;Update&nbsp;hit&nbsp;offset&nbsp;projectile&nbsp;=&nbsp;new&nbsp;Projectile(curGame,&nbsp;spriteBatch,&nbsp;&nbsp;"Textures/Ammo/rock_ammo",&nbsp;projectileStartPosition,&nbsp;60,&nbsp;isAI,&nbsp;gravity);&nbsp;projectile.Initialize();&nbsp;IsActive&nbsp;=&nbsp;true;&nbsp;AnimationRunning&nbsp;=&nbsp;false;&nbsp;stallUpdateCycles&nbsp;=&nbsp;0;&nbsp;//&nbsp;Initialize&nbsp;randomizer&nbsp;random&nbsp;=&nbsp;new&nbsp;Random();&nbsp;&nbsp;&nbsp;&nbsp;base.Initialize();}</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 while we have set the projectile’s hit offset to 60 in the preceding 
code, we will later change this so that the size is relative to the size
 of the catapult’s graphical asset.</div></div><p></p></li><li>Override the <strong>Update</strong> method in the Catapult class, giving it an opportunity to update its own state and keep track of fired projectiles:<p>(Code Snippet – 2D <em>Game Development with XNA – Catapult Update</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;Update(GameTime&nbsp;gameTime){&nbsp;<span class="cs__keyword">bool</span>&nbsp;isGroundHit;&nbsp;<span class="cs__keyword">bool</span>&nbsp;startStall;&nbsp;CatapultState&nbsp;postUpdateStateChange&nbsp;=&nbsp;<span class="cs__number">0</span>;&nbsp;<span class="cs__keyword">if</span>&nbsp;(gameTime&nbsp;==&nbsp;<span class="cs__keyword">null</span>)&nbsp;<span class="cs__keyword">throw</span>&nbsp;<span class="cs__keyword">new</span>&nbsp;ArgumentNullException(<span class="cs__string">"gameTime"</span>);&nbsp;<span class="cs__keyword">if</span>&nbsp;(!IsActive)&nbsp;{&nbsp;<span class="cs__keyword">base</span>.Update(gameTime);&nbsp;<span class="cs__keyword">return</span>;&nbsp;}&nbsp;<span class="cs__keyword">switch</span>&nbsp;(currentState)&nbsp;{&nbsp;<span class="cs__keyword">case</span>&nbsp;CatapultState.Idle:&nbsp;<span class="cs__com">//&nbsp;Nothing&nbsp;to&nbsp;do&nbsp;break;&nbsp;case&nbsp;CatapultState.Aiming:&nbsp;if&nbsp;(lastUpdateState&nbsp;!=&nbsp;CatapultState.Aiming)&nbsp;{&nbsp;//&nbsp;TODO:&nbsp;Play&nbsp;sound&nbsp;AnimationRunning&nbsp;=&nbsp;true;&nbsp;if&nbsp;(isAI&nbsp;==&nbsp;true)&nbsp;{&nbsp;//&nbsp;TODO:&nbsp;Play&nbsp;animation&nbsp;stallUpdateCycles&nbsp;=&nbsp;20;&nbsp;startStall&nbsp;=&nbsp;false;&nbsp;}&nbsp;}&nbsp;//&nbsp;Progress&nbsp;Aiming&nbsp;"animation"&nbsp;if&nbsp;(isAI&nbsp;==&nbsp;false)&nbsp;{&nbsp;//&nbsp;TODO:&nbsp;Play&nbsp;animation&nbsp;}&nbsp;else&nbsp;{&nbsp;//&nbsp;TODO:&nbsp;Play&nbsp;animation&nbsp;//&nbsp;TODO:&nbsp;take&nbsp;“startStall”&nbsp;into&nbsp;account&nbsp;currentState&nbsp;=&nbsp;(true)&nbsp;?&nbsp;&nbsp;CatapultState.Stalling&nbsp;:&nbsp;CatapultState.Aiming;&nbsp;}&nbsp;break;&nbsp;case&nbsp;CatapultState.Stalling:&nbsp;if&nbsp;(stallUpdateCycles--&nbsp;&lt;=&nbsp;0)&nbsp;{&nbsp;//&nbsp;We've&nbsp;finished&nbsp;stalling,&nbsp;fire&nbsp;the&nbsp;projectile&nbsp;Fire(ShotVelocity);&nbsp;postUpdateStateChange&nbsp;=&nbsp;CatapultState.Firing;&nbsp;}&nbsp;break;&nbsp;case&nbsp;CatapultState.Firing:&nbsp;//&nbsp;Progress&nbsp;Fire&nbsp;animation&nbsp;if&nbsp;(lastUpdateState&nbsp;!=&nbsp;CatapultState.Firing)&nbsp;{&nbsp;//&nbsp;TODO:&nbsp;Play&nbsp;Sounds&nbsp;and&nbsp;animate&nbsp;}&nbsp;//&nbsp;TODO:&nbsp;Play&nbsp;animation&nbsp;//&nbsp;TODO:&nbsp;Fire&nbsp;at&nbsp;the&nbsp;appropriate&nbsp;animation&nbsp;frame&nbsp;postUpdateStateChange&nbsp;=&nbsp;currentState&nbsp;|&nbsp;CatapultState.ProjectileFlying;&nbsp;projectile.ProjectilePosition&nbsp;=&nbsp;&nbsp;projectile.ProjectileStartPosition;&nbsp;&nbsp;break;&nbsp;case&nbsp;CatapultState.Firing&nbsp;|&nbsp;CatapultState.ProjectileFlying:&nbsp;//&nbsp;Progress&nbsp;Fire&nbsp;animation&nbsp;&nbsp;//&nbsp;TODO:&nbsp;Play&nbsp;animation&nbsp;//&nbsp;Update&nbsp;projectile&nbsp;velocity&nbsp;&amp;&nbsp;position&nbsp;in&nbsp;flight&nbsp;projectile.UpdateProjectileFlightData(gameTime,&nbsp;wind,&nbsp;gravity,&nbsp;out&nbsp;isGroundHit);&nbsp;if&nbsp;(isGroundHit)&nbsp;{&nbsp;//&nbsp;Start&nbsp;hit&nbsp;sequence&nbsp;postUpdateStateChange&nbsp;=&nbsp;CatapultState.ProjectileHit;&nbsp;//&nbsp;TODO:&nbsp;Play&nbsp;animation&nbsp;}&nbsp;break;&nbsp;case&nbsp;CatapultState.ProjectileFlying:&nbsp;//&nbsp;Update&nbsp;projectile&nbsp;velocity&nbsp;&amp;&nbsp;position&nbsp;in&nbsp;flight&nbsp;projectile.UpdateProjectileFlightData(gameTime,&nbsp;wind,&nbsp;gravity,&nbsp;out&nbsp;isGroundHit);&nbsp;if&nbsp;(isGroundHit)&nbsp;{&nbsp;//&nbsp;Start&nbsp;hit&nbsp;sequence&nbsp;postUpdateStateChange&nbsp;=&nbsp;CatapultState.ProjectileHit;&nbsp;//&nbsp;TODO:&nbsp;Play&nbsp;animation&nbsp;}&nbsp;break;&nbsp;case&nbsp;CatapultState.ProjectileHit:&nbsp;//&nbsp;Check&nbsp;hit&nbsp;on&nbsp;ground&nbsp;impact&nbsp;if&nbsp;(!CheckHit())&nbsp;{&nbsp;if&nbsp;(lastUpdateState&nbsp;!=&nbsp;CatapultState.ProjectileHit)&nbsp;{&nbsp;//&nbsp;TODO:&nbsp;Vibrate&nbsp;device&nbsp;and&nbsp;play&nbsp;sound&nbsp;}&nbsp;//&nbsp;TODO:&nbsp;Relate&nbsp;to&nbsp;animation&nbsp;when&nbsp;changing&nbsp;state&nbsp;postUpdateStateChange&nbsp;=&nbsp;CatapultState.Reset;&nbsp;//&nbsp;TODO:&nbsp;Update&nbsp;animation&nbsp;}&nbsp;else&nbsp;{&nbsp;//&nbsp;TODO:&nbsp;Vibrate&nbsp;the&nbsp;device&nbsp;}&nbsp;break;&nbsp;case&nbsp;CatapultState.Hit:&nbsp;//&nbsp;TODO:&nbsp;only&nbsp;check&nbsp;score&nbsp;when&nbsp;animation&nbsp;is&nbsp;finished&nbsp;if&nbsp;(enemy.Score&nbsp;&gt;=&nbsp;winScore)&nbsp;{&nbsp;GameOver&nbsp;=&nbsp;true;&nbsp;break;&nbsp;}&nbsp;postUpdateStateChange&nbsp;=&nbsp;CatapultState.Reset;&nbsp;//&nbsp;TODO:&nbsp;Update&nbsp;animation&nbsp;break;&nbsp;case&nbsp;CatapultState.Reset:&nbsp;AnimationRunning&nbsp;=&nbsp;false;&nbsp;break;&nbsp;default:&nbsp;break;&nbsp;}&nbsp;lastUpdateState&nbsp;=&nbsp;currentState;&nbsp;if&nbsp;(postUpdateStateChange&nbsp;!=&nbsp;0)&nbsp;{&nbsp;currentState&nbsp;=&nbsp;postUpdateStateChange;&nbsp;}&nbsp;base.Update(gameTime);}</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 as you can see, the method mainly updates the catapult’s own state and 
the state of its fired projectile. Notice the many placeholders, which 
we willuse later to animate the catapult according to its state, to play
 sounds, and to cause the device to vibrate.</div></div><p></p></li><li>Implement
 the “CheckHit” method, which appears in the Update method in the 
preceding code block. This method is responsible for determining whether
 a projectile has hit one of the catapults:<p>(Code Snippet – 2D <em>Game Development with XNA – Catapult CheckHit</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">private</span>&nbsp;<span class="cs__keyword">bool</span>&nbsp;CheckHit(){&nbsp;<span class="cs__keyword">bool</span>&nbsp;bRes&nbsp;=&nbsp;<span class="cs__keyword">false</span>;&nbsp;<span class="cs__com">//&nbsp;Build&nbsp;a&nbsp;sphere&nbsp;around&nbsp;the&nbsp;projectile&nbsp;Vector3&nbsp;center&nbsp;=&nbsp;new&nbsp;Vector3(projectile.ProjectilePosition,&nbsp;0);&nbsp;BoundingSphere&nbsp;sphere&nbsp;=&nbsp;new&nbsp;BoundingSphere(center,&nbsp;Math.Max(projectile.ProjectileTexture.Width&nbsp;/&nbsp;2,&nbsp;projectile.ProjectileTexture.Height&nbsp;/&nbsp;2));&nbsp;//&nbsp;Check&nbsp;Self-Hit&nbsp;-&nbsp;create&nbsp;a&nbsp;bounding&nbsp;box&nbsp;around&nbsp;self&nbsp;//&nbsp;TODO:&nbsp;Take&nbsp;asset&nbsp;size&nbsp;into&nbsp;account&nbsp;Vector3&nbsp;min&nbsp;=&nbsp;new&nbsp;Vector3(catapultPosition,&nbsp;0);&nbsp;Vector3&nbsp;max&nbsp;=&nbsp;new&nbsp;Vector3(catapultPosition&nbsp;+&nbsp;new&nbsp;Vector2(75,&nbsp;60),&nbsp;0);&nbsp;BoundingBox&nbsp;selfBox&nbsp;=&nbsp;new&nbsp;BoundingBox(min,&nbsp;max);&nbsp;//&nbsp;Check&nbsp;enemy&nbsp;-&nbsp;create&nbsp;a&nbsp;bounding&nbsp;box&nbsp;around&nbsp;the&nbsp;enemy&nbsp;//&nbsp;TODO:&nbsp;Take&nbsp;asset&nbsp;size&nbsp;into&nbsp;account&nbsp;min&nbsp;=&nbsp;new&nbsp;Vector3(enemy.Catapult.Position,&nbsp;0);&nbsp;max&nbsp;=&nbsp;new&nbsp;Vector3(enemy.Catapult.Position&nbsp;+&nbsp;new&nbsp;Vector2(75,&nbsp;60),&nbsp;0);&nbsp;BoundingBox&nbsp;enemyBox&nbsp;=&nbsp;new&nbsp;BoundingBox(min,&nbsp;max);&nbsp;//&nbsp;Check&nbsp;self&nbsp;hit&nbsp;if&nbsp;(sphere.Intersects(selfBox)&nbsp;&amp;&amp;&nbsp;currentState&nbsp;!=&nbsp;CatapultState.Hit)&nbsp;{&nbsp;//&nbsp;TODO:&nbsp;Play&nbsp;self&nbsp;hit&nbsp;sound&nbsp;//&nbsp;Launch&nbsp;hit&nbsp;animation&nbsp;sequence&nbsp;on&nbsp;self&nbsp;Hit();&nbsp;enemy.Score++;&nbsp;bRes&nbsp;=&nbsp;true;&nbsp;}&nbsp;//&nbsp;Check&nbsp;if&nbsp;enemy&nbsp;was&nbsp;hit&nbsp;else&nbsp;if&nbsp;(sphere.Intersects(enemyBox)&nbsp;&amp;&amp;&nbsp;enemy.Catapult.CurrentState&nbsp;!=&nbsp;CatapultState.Hit&nbsp;&amp;&amp;&nbsp;enemy.Catapult.CurrentState&nbsp;!=&nbsp;CatapultState.Reset)&nbsp;{&nbsp;//&nbsp;TODO:&nbsp;Play&nbsp;enemy&nbsp;hit&nbsp;sound&nbsp;//&nbsp;Launch&nbsp;enemy&nbsp;hit&nbsp;animaton&nbsp;enemy.Catapult.Hit();&nbsp;self.Score++;&nbsp;bRes&nbsp;=&nbsp;true;&nbsp;currentState&nbsp;=&nbsp;CatapultState.Reset;&nbsp;}&nbsp;return&nbsp;bRes;}</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 This method simply uses intersection checks built into the XNA 
Framework to determine whether the projectile intersects with (that is, 
has hit) a catapult. You will notice placeholders for sound playback and
 might notice that we once more use constants in place of sizes relative
 to the catapult asset. We do this only temporarily, as we will later 
retrieve asset sizes using the Animation game class, which we have yet 
to implement.</div></div><p></p></li><li>Implement the “Hit” method used
 in the CheckHit method. This method simply updates a catapult to 
represent the fact it has been hit:<p>(Code Snippet – 2D <em>Game Development with XNA – Catapult Hit</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;Hit(){&nbsp;AnimationRunning&nbsp;=&nbsp;<span class="cs__keyword">true</span>;&nbsp;<span class="cs__com">//&nbsp;TODO:&nbsp;Start&nbsp;animations&nbsp;currentState&nbsp;=&nbsp;CatapultState.Hit;}</span></li></ol></code></pre></div><p></p></li><li>Now
 that the catapult has varying states, we create a more sophisticated 
Draw override to take these states into account. Initially, however, it 
does not do much, because most work will be animating the catapults, 
something we do not do until the next exercise. Create a new method 
named “DrawIdleCatapult” as seen in the following code:<p>(Code Snippet – 2D <em>Game Development with XNA – Catapult DrawIdleCatapult</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">private</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;DrawIdleCatapult(){&nbsp;spriteBatch.Draw(idleTexture,&nbsp;catapultPosition,&nbsp;<span class="cs__keyword">null</span>,&nbsp;Color.White,&nbsp;<span class="cs__number">0</span>.0f,&nbsp;Vector2.Zero,&nbsp;<span class="cs__number">1</span>.0f,&nbsp;spriteEffects,&nbsp;<span class="cs__number">0</span>);}</li></ol></code></pre></div><p></p></li><li>Now change the “Draw” override so that it looks like this:<p>(Code Snippet – 2D <em>Game Development with XNA – Catapult New Draw</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;Draw(GameTime&nbsp;gameTime){&nbsp;<span class="cs__keyword">if</span>&nbsp;(gameTime&nbsp;==&nbsp;<span class="cs__keyword">null</span>)&nbsp;<span class="cs__keyword">throw</span>&nbsp;<span class="cs__keyword">new</span>&nbsp;ArgumentNullException(<span class="cs__string">"gameTime"</span>);&nbsp;<span class="cs__keyword">switch</span>&nbsp;(lastUpdateState)&nbsp;{&nbsp;<span class="cs__keyword">case</span>&nbsp;CatapultState.Idle:&nbsp;DrawIdleCatapult();&nbsp;<span class="cs__keyword">break</span>;&nbsp;<span class="cs__keyword">case</span>&nbsp;CatapultState.Aiming:&nbsp;<span class="cs__com">//&nbsp;TODO:&nbsp;Handle&nbsp;aiming&nbsp;animation&nbsp;break;&nbsp;case&nbsp;CatapultState.Firing:&nbsp;//&nbsp;TODO:&nbsp;Handle&nbsp;firing&nbsp;animation&nbsp;break;&nbsp;case&nbsp;CatapultState.Firing&nbsp;|&nbsp;CatapultState.ProjectileFlying:&nbsp;case&nbsp;CatapultState.ProjectileFlying:&nbsp;//&nbsp;TODO:&nbsp;Handle&nbsp;firing&nbsp;animation&nbsp;projectile.Draw(gameTime);&nbsp;break;&nbsp;case&nbsp;CatapultState.ProjectileHit:&nbsp;//&nbsp;Draw&nbsp;the&nbsp;catapult&nbsp;DrawIdleCatapult();&nbsp;//&nbsp;TODO:&nbsp;Handle&nbsp;projectile&nbsp;hit&nbsp;animation&nbsp;break;&nbsp;case&nbsp;CatapultState.Hit:&nbsp;//&nbsp;TODO:&nbsp;Handle&nbsp;catapult&nbsp;destruction&nbsp;animation&nbsp;//&nbsp;TODO:&nbsp;Handle&nbsp;explosion&nbsp;animation&nbsp;break;&nbsp;case&nbsp;CatapultState.Reset:&nbsp;DrawIdleCatapult();&nbsp;break;&nbsp;default:&nbsp;break;&nbsp;}&nbsp;base.Draw(gameTime);}</span></li></ol></code></pre></div><p></p></li><li>Add the <strong>Fire</strong> method, which instructs the Catapult class to fire a projectile:<p>(Code Snippet – 2D <em>Game Development with XNA – Catapult Fire</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;Fire(<span class="cs__keyword">float</span>&nbsp;velocity){&nbsp;projectile.Fire(velocity,&nbsp;velocity);}</li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 this concludes our current iteration for the Catapult class. We will 
now move yet again to the various player classes and expand them 
further.</div></div><p></p></li><li>Open the <strong>Player.cs</strong> file and add the following two properties to the Player class:<p>(Code Snippet – 2D <em>Game Development with XNA – Player Properties</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;Player&nbsp;Enemy{&nbsp;set&nbsp;{&nbsp;Catapult.Enemy&nbsp;=&nbsp;value;&nbsp;Catapult.Self&nbsp;=&nbsp;<span class="cs__keyword">this</span>;&nbsp;}}<span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">bool</span>&nbsp;IsActive&nbsp;{&nbsp;get;&nbsp;set;&nbsp;}</li></ol></code></pre></div><p></p></li><li>The
 last thing to do in the Player class is to override the Update method. 
This will cause the player’s associated catapult to update:<p>(Code Snippet – 2D <em>Game Development with XNA – Player Update</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;Update(GameTime&nbsp;gameTime){&nbsp;<span class="cs__com">//&nbsp;Update&nbsp;catapult&nbsp;related&nbsp;to&nbsp;the&nbsp;player&nbsp;Catapult.Update(gameTime);&nbsp;base.Update(gameTime);}</span></li></ol></code></pre></div><p></p></li><li>Open the <strong>AI.cs</strong> file and add a new field to the AI class:<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li>Random&nbsp;random;</li></ol></code></pre></div><p></p></li><li>Revise the Initialize method. It should now look like this:<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;Initialize(){&nbsp;<span class="cs__com">//Initialize&nbsp;randomizer&nbsp;random&nbsp;=&nbsp;new&nbsp;Random();&nbsp;&nbsp;&nbsp;&nbsp;Catapult.Initialize();&nbsp;&nbsp;&nbsp;&nbsp;base.Initialize();}</span></li></ol></code></pre></div><p></p></li><li>Finally, we will override the Update method in the <strong>AI</strong> class. This will be used as an opportunity for the computer player to shoot at the human player:<p>(Code Snippet – 2D <em>Game Development with XNA – AI Update</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;Update(GameTime&nbsp;gameTime){&nbsp;<span class="cs__com">//&nbsp;Check&nbsp;if&nbsp;it&nbsp;is&nbsp;time&nbsp;to&nbsp;take&nbsp;a&nbsp;shot&nbsp;if&nbsp;(Catapult.CurrentState&nbsp;==&nbsp;CatapultState.Aiming&nbsp;&amp;&amp;&nbsp;!Catapult.AnimationRunning)&nbsp;{&nbsp;//&nbsp;Fire&nbsp;at&nbsp;a&nbsp;random&nbsp;strength&nbsp;float&nbsp;shotVelocity&nbsp;=&nbsp;random.Next((int)MinShotStrength,&nbsp;(int)MaxShotStrength);&nbsp;Catapult.ShotStrength&nbsp;=&nbsp;(shotVelocity&nbsp;/&nbsp;MaxShotStrength);&nbsp;Catapult.ShotVelocity&nbsp;=&nbsp;shotVelocity;&nbsp;}&nbsp;base.Update(gameTime);}</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 this concludes all work on the AI class, and we can move on to the 
Human class. The Human class presents a new challenge, because this is 
where we will introduce the input handling required to respond to the 
user’s actions.</div></div><p></p></li><li>Open the <strong>Human.cs</strong> file and add the following fields to the Human class:<p>(Code Snippet – 2D <em>Game Development with XNA – Human Fields</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__com">//&nbsp;Drag&nbsp;variables&nbsp;to&nbsp;hold&nbsp;first&nbsp;and&nbsp;last&nbsp;gesture&nbsp;samplesGestureSample?&nbsp;prevSample;GestureSample?&nbsp;firstSample;public&nbsp;bool&nbsp;isDragging;//&nbsp;Constant&nbsp;for&nbsp;longest&nbsp;distance&nbsp;possible&nbsp;between&nbsp;drag&nbsp;pointsreadonly&nbsp;float&nbsp;maxDragDelta&nbsp;=&nbsp;(new&nbsp;Vector2(480,&nbsp;800)).Length();//&nbsp;Textures&nbsp;&amp;&nbsp;position&nbsp;&amp;&nbsp;spriteEffects&nbsp;used&nbsp;for&nbsp;CatapultTexture2D&nbsp;arrow;float&nbsp;arrowScale;Vector2&nbsp;catapultPosition&nbsp;=&nbsp;new&nbsp;Vector2(140,&nbsp;332);</span></li></ol></code></pre></div><p></p></li><li>Alter the Human class’s second constructor (the one which receives two arguments) to look like the following:<p>(Code Snippet – 2D <em>Game Development with XNA – Human New Catapult 2</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;Human(Game&nbsp;game,&nbsp;SpriteBatch&nbsp;screenSpriteBatch)&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;<span class="cs__keyword">base</span>(game,&nbsp;screenSpriteBatch){&nbsp;Catapult&nbsp;=&nbsp;<span class="cs__keyword">new</span>&nbsp;Catapult(game,&nbsp;screenSpriteBatch,&nbsp;<span class="cs__string">"Textures/Catapults/Blue/blueIdle/blueIdle"</span>,&nbsp;catapultPosition,&nbsp;SpriteEffects.None,&nbsp;<span class="cs__keyword">false</span>);}</li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> the only change is that we use the field added in the previous step to specify the catapult’s location.</div></div><p></p></li><li>Revise
 the Initialize method. We replace the comment beginning with “TODO” 
with code that loads the texture used to draw visual feedback for the 
user:<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;Initialize(){&nbsp;arrow&nbsp;=&nbsp;curGame.Content.Load&lt;Texture2D&gt;(<span class="cs__string">"Textures/HUD/arrow"</span>);&nbsp;&nbsp;&nbsp;&nbsp;Catapult.Initialize();&nbsp;&nbsp;&nbsp;&nbsp;<span class="cs__keyword">base</span>.Initialize();}</li></ol></code></pre></div><p></p></li><li>Create a new method in the Human class called <strong>HandleInput</strong>.
 This method is used to react to the user’s touch gestures, which are 
used to shoot at the computer player. It is worth mentioning that this 
method is not invoked automatically; we will invoke it later from the 
GameplayScreen.<p>(Code Snippet – 2D <em>Game Development with XNA – Human HandleInput</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;HandleInput(GestureSample&nbsp;gestureSample){&nbsp;<span class="cs__com">//&nbsp;Process&nbsp;input&nbsp;only&nbsp;if&nbsp;in&nbsp;Human's&nbsp;turn&nbsp;if&nbsp;(IsActive)&nbsp;{&nbsp;//&nbsp;Process&nbsp;any&nbsp;Drag&nbsp;gesture&nbsp;if&nbsp;(gestureSample.GestureType&nbsp;==&nbsp;GestureType.FreeDrag)&nbsp;{&nbsp;//&nbsp;If&nbsp;drag&nbsp;just&nbsp;began,&nbsp;save&nbsp;the&nbsp;sample&nbsp;for&nbsp;future&nbsp;&nbsp;//&nbsp;calculations&nbsp;and&nbsp;start&nbsp;Aim&nbsp;"animation"&nbsp;if&nbsp;(null&nbsp;==&nbsp;firstSample)&nbsp;{&nbsp;firstSample&nbsp;=&nbsp;gestureSample;&nbsp;Catapult.CurrentState&nbsp;=&nbsp;CatapultState.Aiming;&nbsp;}&nbsp;//&nbsp;save&nbsp;the&nbsp;current&nbsp;gesture&nbsp;sample&nbsp;&nbsp;prevSample&nbsp;=&nbsp;gestureSample;&nbsp;//&nbsp;calculate&nbsp;the&nbsp;delta&nbsp;between&nbsp;first&nbsp;sample&nbsp;and&nbsp;current&nbsp;//&nbsp;sample&nbsp;to&nbsp;present&nbsp;visual&nbsp;sound&nbsp;on&nbsp;screen&nbsp;Vector2&nbsp;delta&nbsp;=&nbsp;prevSample.Value.Position&nbsp;-&nbsp;firstSample.Value.Position;&nbsp;Catapult.ShotStrength&nbsp;=&nbsp;delta.Length()&nbsp;/&nbsp;maxDragDelta;&nbsp;float&nbsp;baseScale&nbsp;=&nbsp;0.001f;&nbsp;arrowScale&nbsp;=&nbsp;baseScale&nbsp;*&nbsp;delta.Length();&nbsp;isDragging&nbsp;=&nbsp;true;&nbsp;}&nbsp;else&nbsp;if&nbsp;(gestureSample.GestureType&nbsp;==&nbsp;GestureType.DragComplete)&nbsp;{&nbsp;//&nbsp;calculate&nbsp;velocity&nbsp;based&nbsp;on&nbsp;delta&nbsp;between&nbsp;first&nbsp;and&nbsp;last&nbsp;//&nbsp;gesture&nbsp;samples&nbsp;if&nbsp;(null&nbsp;!=&nbsp;firstSample)&nbsp;{&nbsp;Vector2&nbsp;delta&nbsp;=&nbsp;prevSample.Value.Position&nbsp;-&nbsp;firstSample.Value.Position;&nbsp;Catapult.ShotVelocity&nbsp;=&nbsp;MinShotStrength&nbsp;+&nbsp;Catapult.ShotStrength&nbsp;*&nbsp;&nbsp;(MaxShotStrength&nbsp;-&nbsp;MinShotStrength);&nbsp;Catapult.Fire(Catapult.ShotVelocity);&nbsp;Catapult.CurrentState&nbsp;=&nbsp;CatapultState.Firing;&nbsp;}&nbsp;//&nbsp;turn&nbsp;off&nbsp;dragging&nbsp;state&nbsp;ResetDragState();&nbsp;}&nbsp;}}</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 while lengthy, the preceding method is rather simple. In order to fire,
 the user will drag a finger across the device’s display and the shot’s 
strength will be calculated based on the distance between the point 
where the user first touched the screen to the point where the user 
lifted the finger from the display. This is exactly what the preceding 
method is responsible for, all the while updating a variable that will 
be used to draw visual feedback as the user drags the finger across the 
display.</div></div><p></p></li><li>Create a new method in the Human class called <strong>ResetDragState</strong>. This method will reset the dragging state of human-controlled catapult. <p>(Code Snippet – 2D <em>Game Development with XNA – Human ResetDragState</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;ResetDragState(){&nbsp;firstSample&nbsp;=&nbsp;<span class="cs__keyword">null</span>;&nbsp;prevSample&nbsp;=&nbsp;<span class="cs__keyword">null</span>;&nbsp;isDragging&nbsp;=&nbsp;<span class="cs__keyword">false</span>;}</li></ol></code></pre></div><p></p></li><li>Finally, we will override the <strong>Draw</strong> method inside the Human class and add an additional helper method named <strong>DrawDragArrow</strong>.
 These methods will display an arrow on screen that depicts the strength
 of the shot as the user drags a finger across the display:<p>(Code Snippet – 2D <em>Game Development with XNA – Human Draw</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;Draw(GameTime&nbsp;gameTime){&nbsp;<span class="cs__keyword">if</span>&nbsp;(isDragging)&nbsp;DrawDragArrow(arrowScale);&nbsp;<span class="cs__keyword">base</span>.Draw(gameTime);}<span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;DrawDragArrow(<span class="cs__keyword">float</span>&nbsp;arrowScale){&nbsp;spriteBatch.Draw(arrow,&nbsp;catapultPosition&nbsp;+&nbsp;<span class="cs__keyword">new</span>&nbsp;Vector2(<span class="cs__number">0</span>,&nbsp;-<span class="cs__number">40</span>),&nbsp;<span class="cs__keyword">null</span>,&nbsp;Color.Blue,&nbsp;<span class="cs__number">0</span>,&nbsp;Vector2.Zero,&nbsp;<span class="cs__keyword">new</span>&nbsp;Vector2(arrowScale,&nbsp;<span class="cs__number">0</span>.1f),&nbsp;SpriteEffects.None,&nbsp;<span class="cs__number">0</span>);}</li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> You may notice how the arrow’s origin is relative to the position of the catapult.<p></p>This
 concludes our update to the game classes at this stage. We now move to 
the GameplayScreen class to implement the final pieces of game logic.</div></div><p></p></li><li>Open the <strong>GameplayScreen.cs</strong> class, and add the following constructor to the GameplayScreen class:<p>(Code Snippet – 2D <em>Game Development with XNA – GameplayScreen Constructor</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;GameplayScreen(){&nbsp;EnabledGestures&nbsp;=&nbsp;GestureType.FreeDrag&nbsp;|&nbsp;GestureType.DragComplete&nbsp;|&nbsp;GestureType.Tap;&nbsp;random&nbsp;=&nbsp;<span class="cs__keyword">new</span>&nbsp;Random();}</li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> This will enable support for drag and tap in the game.</div></div><p></p></li><li>Navigate
 to the “LoadAssets” method and locate the comment “// TODO: Initialize 
enemy definitions”. Add the following code directly beneath it (the 
following block shows surrounding code as well, with existing code 
colored gray as before):<p>(Code Snippet – 2D <em>Game Development with XNA – Initialize Enemy Definitions</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li>...computer.Initialize();computer.Name&nbsp;=&nbsp;<span class="cs__string">"Phone"</span>;<span class="cs__com">//&nbsp;Initialize&nbsp;enemy&nbsp;definitionsplayer.Enemy&nbsp;=&nbsp;computer;computer.Enemy&nbsp;=&nbsp;player;}</span></li></ol></code></pre></div><p></p></li><li>Override the <strong>Update</strong> method. This is where we will implement the turn logic:<p>(Code Snippet – 2D <em>Game Development with XNA – GameplayScreen Update</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;Update(GameTime&nbsp;gameTime,&nbsp;<span class="cs__keyword">bool</span>&nbsp;otherScreenHasFocus,&nbsp;<span class="cs__keyword">bool</span>&nbsp;coveredByOtherScreen){&nbsp;<span class="cs__keyword">float</span>&nbsp;elapsed&nbsp;=&nbsp;(<span class="cs__keyword">float</span>)gameTime.ElapsedGameTime.TotalSeconds;&nbsp;<span class="cs__com">//&nbsp;Check&nbsp;if&nbsp;one&nbsp;of&nbsp;the&nbsp;players&nbsp;reached&nbsp;5&nbsp;and&nbsp;stop&nbsp;the&nbsp;game&nbsp;if&nbsp;((player.Catapult.GameOver&nbsp;||&nbsp;computer.Catapult.GameOver)&nbsp;&amp;&amp;&nbsp;(gameOver&nbsp;==&nbsp;false))&nbsp;{&nbsp;gameOver&nbsp;=&nbsp;true;&nbsp;if&nbsp;(player.Score&nbsp;&gt;&nbsp;computer.Score)&nbsp;{&nbsp;//&nbsp;TODO:&nbsp;Play&nbsp;sound&nbsp;}&nbsp;else&nbsp;{&nbsp;//&nbsp;TODO:&nbsp;Play&nbsp;sound&nbsp;}&nbsp;base.Update(gameTime,&nbsp;otherScreenHasFocus,&nbsp;coveredByOtherScreen);&nbsp;return;&nbsp;}&nbsp;//&nbsp;If&nbsp;Reset&nbsp;flag&nbsp;raised&nbsp;and&nbsp;both&nbsp;catapults&nbsp;are&nbsp;not&nbsp;animating&nbsp;-&nbsp;&nbsp;//&nbsp;active&nbsp;catapult&nbsp;finished&nbsp;the&nbsp;cycle,&nbsp;new&nbsp;turn!&nbsp;if&nbsp;((player.Catapult.CurrentState&nbsp;==&nbsp;CatapultState.Reset&nbsp;||&nbsp;computer.Catapult.CurrentState&nbsp;==&nbsp;CatapultState.Reset)&nbsp;&amp;&amp;&nbsp;!(player.Catapult.AnimationRunning&nbsp;||&nbsp;computer.Catapult.AnimationRunning))&nbsp;{&nbsp;changeTurn&nbsp;=&nbsp;true;&nbsp;if&nbsp;(player.IsActive&nbsp;==&nbsp;true)&nbsp;//Last&nbsp;turn&nbsp;was&nbsp;a&nbsp;human&nbsp;turn?&nbsp;{&nbsp;player.IsActive&nbsp;=&nbsp;false;&nbsp;computer.IsActive&nbsp;=&nbsp;true;&nbsp;isHumanTurn&nbsp;=&nbsp;false;&nbsp;player.Catapult.CurrentState&nbsp;=&nbsp;CatapultState.Idle;&nbsp;computer.Catapult.CurrentState&nbsp;=&nbsp;CatapultState.Aiming;&nbsp;}&nbsp;else&nbsp;//It&nbsp;was&nbsp;an&nbsp;AI&nbsp;turn&nbsp;{&nbsp;player.IsActive&nbsp;=&nbsp;true;&nbsp;computer.IsActive&nbsp;=&nbsp;false;&nbsp;isHumanTurn&nbsp;=&nbsp;true;&nbsp;computer.Catapult.CurrentState&nbsp;=&nbsp;CatapultState.Idle;&nbsp;player.Catapult.CurrentState&nbsp;=&nbsp;CatapultState.Idle;&nbsp;}&nbsp;}&nbsp;if&nbsp;(changeTurn)&nbsp;{&nbsp;//&nbsp;Update&nbsp;wind&nbsp;wind&nbsp;=&nbsp;new&nbsp;Vector2(random.Next(-1,&nbsp;2),&nbsp;random.Next(minWind,&nbsp;maxWind&nbsp;+&nbsp;1));&nbsp;//&nbsp;Set&nbsp;new&nbsp;wind&nbsp;value&nbsp;to&nbsp;the&nbsp;players&nbsp;and&nbsp;&nbsp;player.Catapult.Wind&nbsp;=&nbsp;computer.Catapult.Wind&nbsp;=&nbsp;wind.X&nbsp;&gt;&nbsp;0&nbsp;?&nbsp;wind.Y&nbsp;:&nbsp;-wind.Y;&nbsp;changeTurn&nbsp;=&nbsp;false;&nbsp;}&nbsp;//&nbsp;Update&nbsp;the&nbsp;players&nbsp;player.Update(gameTime);&nbsp;computer.Update(gameTime);&nbsp;//&nbsp;Updates&nbsp;the&nbsp;clouds&nbsp;position&nbsp;UpdateClouds(elapsed);&nbsp;base.Update(gameTime,&nbsp;otherScreenHasFocus,&nbsp;coveredByOtherScreen);}</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 this method contains several segments. We first check whether the game 
is over, which happens when one of the players reaches a score of five 
points, and update a flag accordingly. (In the upcoming exercise, we 
also play appropriate sounds.) We then check whether the current turn is
 over and reset some fields for the next turn, depending on which type 
of player has just played (either the human player or the computer 
player). In addition, assuming a turn has ended, we update the wind. 
Finally, we ask both players to perform respective updates and change 
the position of the clouds inside the UpdateClouds helper, which we will
 implement next.</div></div><p></p></li><li>Add a method called <strong>UpdateClouds</strong> to the GameplayScreen class:<p>(Code Snippet – 2D <em>Game Development with XNA – GameplayScreen UpdateClouds</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">private</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;UpdateClouds(<span class="cs__keyword">float</span>&nbsp;elapsedTime){&nbsp;<span class="cs__com">//&nbsp;Move&nbsp;the&nbsp;clouds&nbsp;according&nbsp;to&nbsp;the&nbsp;wind&nbsp;var&nbsp;windDirection&nbsp;=&nbsp;wind.X&nbsp;&gt;&nbsp;0&nbsp;?&nbsp;1&nbsp;:&nbsp;-1;&nbsp;cloud1Position&nbsp;+=&nbsp;new&nbsp;Vector2(24.0f,&nbsp;0.0f)&nbsp;*&nbsp;elapsedTime&nbsp;*&nbsp;windDirection&nbsp;*&nbsp;wind.Y;&nbsp;if&nbsp;(cloud1Position.X&nbsp;&gt;&nbsp;ScreenManager.GraphicsDevice.Viewport.Width)&nbsp;cloud1Position.X&nbsp;=&nbsp;-cloud1Texture.Width&nbsp;*&nbsp;2.0f;&nbsp;else&nbsp;if&nbsp;(cloud1Position.X&nbsp;&lt;&nbsp;-cloud1Texture.Width&nbsp;*&nbsp;2.0f)&nbsp;cloud1Position.X&nbsp;=&nbsp;ScreenManager.GraphicsDevice.Viewport.Width;&nbsp;cloud2Position&nbsp;+=&nbsp;new&nbsp;Vector2(16.0f,&nbsp;0.0f)&nbsp;*&nbsp;elapsedTime&nbsp;*&nbsp;windDirection&nbsp;*&nbsp;wind.Y;&nbsp;if&nbsp;(cloud2Position.X&nbsp;&gt;&nbsp;ScreenManager.GraphicsDevice.Viewport.Width)&nbsp;cloud2Position.X&nbsp;=&nbsp;-cloud2Texture.Width&nbsp;*&nbsp;2.0f;&nbsp;else&nbsp;if&nbsp;(cloud2Position.X&nbsp;&lt;&nbsp;-cloud2Texture.Width&nbsp;*&nbsp;2.0f)&nbsp;cloud2Position.X&nbsp;=&nbsp;ScreenManager.GraphicsDevice.Viewport.Width;}</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 this simply updates the positions of the clouds according to the wind, 
and causes them to wrap around the screen should they exit its 
boundaries.</div></div><p></p></li><li>Override the <strong>HandleInput</strong> method. This is used to actually handle the user’s input:<p>(Code Snippet – 2D <em>Game Development with XNA – GameplayScreen HandleInput</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;HandleInput(InputState&nbsp;input){&nbsp;<span class="cs__keyword">if</span>&nbsp;(input&nbsp;==&nbsp;<span class="cs__keyword">null</span>)&nbsp;<span class="cs__keyword">throw</span>&nbsp;<span class="cs__keyword">new</span>&nbsp;ArgumentNullException(<span class="cs__string">"input"</span>);&nbsp;<span class="cs__keyword">if</span>&nbsp;(gameOver)&nbsp;{&nbsp;<span class="cs__keyword">if</span>&nbsp;(input.IsPauseGame(<span class="cs__keyword">null</span>))&nbsp;{&nbsp;FinishCurrentGame();&nbsp;}&nbsp;<span class="cs__keyword">foreach</span>&nbsp;(GestureSample&nbsp;gestureSample&nbsp;<span class="cs__keyword">in</span>&nbsp;input.Gestures)&nbsp;{&nbsp;<span class="cs__keyword">if</span>&nbsp;(gestureSample.GestureType&nbsp;==&nbsp;GestureType.Tap)&nbsp;{&nbsp;FinishCurrentGame();&nbsp;}&nbsp;}&nbsp;<span class="cs__keyword">return</span>;&nbsp;}&nbsp;<span class="cs__keyword">if</span>&nbsp;(input.IsPauseGame(<span class="cs__keyword">null</span>))&nbsp;{&nbsp;PauseCurrentGame();&nbsp;}&nbsp;<span class="cs__keyword">else</span>&nbsp;<span class="cs__keyword">if</span>&nbsp;(isHumanTurn&nbsp;&amp;&amp;&nbsp;(player.Catapult.CurrentState&nbsp;==&nbsp;CatapultState.Idle&nbsp;||&nbsp;player.Catapult.CurrentState&nbsp;==&nbsp;CatapultState.Aiming))&nbsp;{&nbsp;<span class="cs__com">//&nbsp;Read&nbsp;all&nbsp;available&nbsp;gestures&nbsp;foreach&nbsp;(GestureSample&nbsp;gestureSample&nbsp;in&nbsp;input.Gestures)&nbsp;{&nbsp;if&nbsp;(gestureSample.GestureType&nbsp;==&nbsp;GestureType.FreeDrag)&nbsp;isDragging&nbsp;=&nbsp;true;&nbsp;else&nbsp;if&nbsp;(gestureSample.GestureType&nbsp;==&nbsp;GestureType.DragComplete)&nbsp;isDragging&nbsp;=&nbsp;false;&nbsp;player.HandleInput(gestureSample);&nbsp;}&nbsp;}}</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 the preceding method handles the input that instructs the game to pause
 or end, using helper methods that we will soon implement, and passes 
gesture information to the Human class for processing, if it is the 
player’s turn.</div></div><p></p></li><li>Implement the following two methods in the GameplayScreen class. They will be used to pause and end the game:<p>(Code Snippet – 2D <em>Game Development with XNA – End and Pause Game</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">private</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;FinishCurrentGame(){&nbsp;ExitScreen();}<span class="cs__keyword">private</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;PauseCurrentGame(){&nbsp;<span class="cs__com">//&nbsp;TODO:&nbsp;Display&nbsp;pause&nbsp;screen}</span></li></ol></code></pre></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 notice the preceding placeholder comment beginning with “TODO”. We 
change that portion of the code later to display a pause screen, which 
we create during the next exercise.</div></div><p></p></li><li>Navigate 
to the “Start” method in the GameplayScreen class and restore the final 
line of code. The method should now look like this:<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">void</span>&nbsp;Start(){&nbsp;&nbsp;&nbsp;&nbsp;<span class="cs__com">//&nbsp;Set&nbsp;initial&nbsp;wind&nbsp;direction&nbsp;&nbsp;&nbsp;&nbsp;wind&nbsp;=&nbsp;Vector2.Zero;&nbsp;&nbsp;&nbsp;&nbsp;isHumanTurn&nbsp;=&nbsp;false;&nbsp;&nbsp;&nbsp;&nbsp;changeTurn&nbsp;=&nbsp;true;&nbsp;computer.Catapult.CurrentState&nbsp;=&nbsp;CatapultState.Reset;}</span></li></ol></code></pre></div><p></p></li><li>Compile
 and deploy the project. The game should now be completely playable, 
though severely lacking in polish. Having left some placeholders to 
support the addition of animations, the catapults will actually 
disappear during various stages of the game. Additionally, once the game
 ends in either victory or defeat, tapping the display will advance to a
 blank screen. In the next exercise, we will add sounds and animations 
to improve the game experience.</li></ol><p></p><div class="Center"><div class="BostonPostCard"><h4><strong><a href="http://msdn.microsoft.com/en-us/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic1"> &lt; previous </a> | <a href="http://msdn.microsoft.com/en-us/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic3"> next &gt; </a></strong></h4></div></div></div></td><td valign="top"><div class="RightAdRail"><div class="BostonPostCard"> <div style="width: 300px; height: 250px;" id="c_2cc33b3e6a4d4dc29e72182aee9ac095" align="center"><iframe src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/a_002.htm" name="dapIfM0" id="dapIfM0" width="300" frameborder="0" height="250" scrolling="no"></iframe></div> <p></p><h4>Contents</h4><ul class="bulletedlist"><li><a href="http://msdn.microsoft.com/en-us/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic1#_Toc271900415#_Toc271900415"> Overview </a></li><li><strong><a href="http://msdn.microsoft.com/en-us/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2#_Toc271900416#_Toc271900416"> Exercise 1: Basic XNA Framework Game with Game State Management </a></strong><ul><li><a href="http://msdn.microsoft.com/en-us/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2#_Toc271900417#_Toc271900417"> Task 1 – Basic game project with game state management </a></li><li><a href="http://msdn.microsoft.com/en-us/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2#_Toc271900418#_Toc271900418"> Task 2 – Basic game rendering </a></li><li><a href="http://msdn.microsoft.com/en-us/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2#_Toc271900419#_Toc271900419"> Task 3 – Game logic </a></li></ul></li><li><a href="http://msdn.microsoft.com/en-us/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic3#_Toc271900420#_Toc271900420"> Exercise 2: Game polish and menus </a></li><li><a href="http://msdn.microsoft.com/en-us/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic4#_Toc271900423#_Toc271900423"> Summary </a></li></ul></div></div></td></tr></tbody></table></div></div> <div id="footerAd" style="margin-left: auto; margin-right: auto; display: table;"> <p> </p><div style="width: 728px; height: 90px;" id="c_38421ed6504d41b78ab58f254f0b81dc" align="center"><iframe src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/a_002.htm" name="dapIfM1" id="dapIfM1" width="728" frameborder="0" height="90" scrolling="no"></iframe></div> <p></p> </div> </div> </div> </div> <div class="ClearBottom"> </div> <div class="bottomleftcorner"> </div> <div class="bottomrightcorner"> </div> <div class="FooterLinks"><span class="FooterCopyright" title="© 2010  Microsoft Corporation. All rights reserved.">© 2010 Microsoft Corporation. All rights reserved.</span><a href="http://msdn.microsoft.com/cc300389.aspx" title="Terms of Use">Terms of Use</a><span class="Pipe">|</span><a href="http://www.microsoft.com/library/toolbar/3.0/trademarks/en-us.mspx" title="Trademarks">Trademarks</a><span class="Pipe">|</span><a href="http://www.microsoft.com/info/privacy.mspx" title="Privacy Statement">Privacy Statement</a><span class="Pipe" id="ctl00_Footer_PipeSpan3">|</span><a target="_blank" id="bottomsitefeedbacklink" title="Site Feedback" href="https://lab.msdn.microsoft.com/mailform/contactus.aspx?refurl=http://msdn.microsoft.com/en-us/wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2&amp;loc=en-us">Site Feedback</a></div> </div> </div> </div> </div> <noscript><img alt="DCSIMG" width="1" height="1" src="http://m.webtrends.com/dcsmgru7m99k7mqmgrhudo0k8_8c6m/njs.gif?dcsuri=/nojavascript&amp;WT.js=No" /></noscript><noscript><a href="http://www.omniture.com" title="Web Analytics"><img src="http://msstonojsmsdn.112.2o7.net/b/ss/msstonojsmsdn/1/H.20.2--NS/0" height="1" width="1" border="0" alt="" /></a></noscript> <script type="text/javascript" src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/global.js"></script><script type="text/javascript">
    function SearchClick() {
        window.location = "http://social.msdn.microsoft.com/search/en-us/?query=" + document.getElementById("HeaderSearchTextBox").value();
    }

    function SearchClientClick() {
        if (document.getElementById("HeaderSearchTextBox").value == document.getElementById("HeaderSearchTextBox").title) return false;
        document.HeaderSearchForm.submit();return true;
    }
</script><script type="text/javascript" id="mscom.srch.searchBox" src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/SearchBox.js" defer="defer"></script><script src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/jquery.js" type="text/javascript"></script><script src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/recipes.js" type="text/javascript"></script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript" src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/dap.js"></script><script type="text/javascript">
      try {
        dapMgr.enableACB("c_2cc33b3e6a4d4dc29e72182aee9ac095", false);
        dapMgr.renderAd("c_2cc33b3e6a4d4dc29e72182aee9ac095", "&amp;PG=CMS3DB&amp;AP=1089", "300", "250");
      } catch (ex) { }
    </script><script type="text/javascript">
      try {
        dapMgr.enableACB("c_38421ed6504d41b78ab58f254f0b81dc", false);
        dapMgr.renderAd("c_38421ed6504d41b78ab58f254f0b81dc", "&amp;PG=CMS3DL&amp;AP=1390", "728", "90");
      } catch (ex) { }
    </script><script type="text/javascript">

      var wt_nvr_ru = "WT_NVR_RU";
      var wt_fpcdom = ".microsoft.com";
      var wt_domlist = "msdn.microsoft.com";
      var wt_pathlist = "";var wt_paramlist = "DCSext.mtps_devcenter";
      var wt_siteid = "MSDN";
      var gDomain="m.webtrends.com";
var gDcsId = "dcsmgru7m99k7mqmgrhudo0k8_8c6m";
var gFpc = "WT_FPC";
/*<![CDATA[*/
if (document.cookie.indexOf(gFpc + "=") == -1) { document.write("<scr" + "ipt type='text/javascript' src='" + "http" + (window.location.protocol.indexOf('https:') == 0 ? 's' : '') + "://" + gDomain + "/" + gDcsId + "/wtid.js" + "'><\/scr" + "ipt>"); }
/*]]>*/
var detectedLocale = "en-us";
var wtsp = "_msdn_";
var gTrackEvents = "1";
</script><script type="text/javascript" src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/webtrendsscript.js"></script><script type="text/javascript">var omni_guid = 'c_819fb61bf61c4420a3227ddc13df9530';</script><script language="javascript" type="text/javascript" src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/broker.js"></script><!-- HtmlResponseFilter:133:ms --><script src="wp7trainingcourse_2dgamedevelopmentwithxnalab_topic2_files/broker-config.js"></script></body></html>