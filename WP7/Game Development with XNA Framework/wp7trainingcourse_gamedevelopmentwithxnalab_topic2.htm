<!DOCTYPE HTML PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">  <meta http-equiv="X-UA-Compatible" content="IE=8"> <meta name="search.content.shortId" content="gg266458"> <meta name="search.content.locale" content="en-us"> <meta name="MN" content="B9D26F3F-10:39:58 PM"> <meta http-equiv="content-language" content="en"> <link rel="canonical" href="http://msdn.microsoft.com/en-us/gg266458"> <meta name="NormalizedUrl" href="http://msdn.microsoft.com/en-us/gg266458%28d=default,l=en-us,v=MSDN.10%29.aspx"> <link href="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/StoCodeHighlighter.css" type="text/css" rel="stylesheet"><link href="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/default_003.css" type="text/css" rel="stylesheet"><link href="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/default.css" type="text/css" rel="stylesheet"><link href="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/default_002.css" type="text/css" rel="stylesheet"> <title>Exercise 1: XNA Game Studio Games on the Windows Phone 7</title><style type="text/css">/* Chili -- cs */
.cs__mlcom { color: #4040c2; }
.cs__com { color: green; }
.cs__string { color: teal; }
.cs__preproc { color: red; }
.cs__number { color: red; }
.cs__keyword { color: navy; font-weight: bold; }</style></head><body id="MTPS_Body" class="MsdnPageBody"> <div id="BodyBackground"> <div id="JelloSizer"> <div id="JelloExpander"> <div id="JelloWrapper"> <div class="Clear"> </div> <div class="Masthead"> <div class="BrandLogo"> <a title="Microsoft Developer Network" href="http://msdn.microsoft.com/en-us/"> <span> Microsoft Developer Network </span> </a></div><div class="Search"> <div class="SearchBox"> <form name="HeaderSearchForm" method="post" action=""> <input name="SearchAction" value="search" type="hidden"> <input value="Search MSDN with Bing" style="color: rgb(170, 170, 170); font-style: italic;" autocomplete="off" id="HeaderSearchTextBox" class="TextBoxSearch" title="Search MSDN with Bing" type="text"> <input id="HeaderSearchButton" onclick="return SearchClientClick();" class="SearchButton" alt="Click here to search" title="Search MSDN with Bing" type="button"> <span class="Bing"></span> <div style="display: none; text-align: left; border: 1px solid buttonshadow; position: absolute; z-index: 1000; padding: 2px; background-color: rgb(255, 255, 255); color: rgb(0, 0, 255); font-family: arial;" id="SearchFlyoutContainer"><div id="SuggestionContainer"><ul style="list-style: none outside none; padding: 4px 2px 0px 1px; cursor: pointer; font-size: 8pt; margin: 1px;"></ul></div><div style="width: 100%; margin: 0px; text-align: right; font-size: 8pt;" id="FooterContainer"><a href="#">Close</a></div></div></form> </div></div> <div class="GlobalBar"> <div class="PassportScarab"> <a id="idPPScarab" href="https://login.live.com/login.srf?wa=wsignin1.0&amp;rpsnv=11&amp;ct=1294036798&amp;rver=6.0.5276.0&amp;wp=MCLBI&amp;wlcxt=msdn%24msdn%24msdn&amp;wreply=http:%2F%2Fmsdn.microsoft.com%2Fen-us%2Fwp7trainingcourse_gamedevelopmentwithxnalab_topic2&amp;lc=1033&amp;cb=&amp;id=254354"><span id="idPPScarabSIT">Sign in</span></a></div><div id="LocaleSelector"> <form id="ChangeLocaleForm" action="/en-us/SelectLocale?pageid=wp7trainingcourse_gamedevelopmentwithxnalab_topic2"> <input name="fromPage" value="http://msdn.microsoft.com/en-us/wp7trainingcourse_gamedevelopmentwithxnalab_topic2" type="hidden"> <div id="FlyoutTop"> <a title="Change your language" href="#Change+your+language" onclick="$('#ChangeLocaleForm').submit();return false;" id="LinkCountryLanguage" class="LocaleManagementFlyoutStaticLink"> United States (English) </a> </div> </form></div> <div class="Clear"></div> </div> <div class="Clear"></div> <div class="networkTagLineArea NetworkLogo"> <a title="Microsoft Developer Network" href="http://msdn.microsoft.com/en-us"></a> </div><div class="leftcap"></div> <div class="internav"> <a href="http://msdn.microsoft.com/en-us/default" class="normal" title="Home">Home</a><a href="http://msdn.microsoft.com/library/default.aspx" class="normal" title="Library">Library</a><a href="http://msdn.microsoft.com/en-us/bb188199" class="active" title="Learn">Learn</a><a href="http://msdn.microsoft.com/en-us/aa570309" class="normal" title="Downloads">Downloads</a><a href="http://msdn.microsoft.com/en-us/aa570318" class="normal" title="Support">Support</a><a href="http://msdn.microsoft.com/en-us/aa497440" class="normal" title="Community">Community</a><a href="http://social.msdn.microsoft.com/Forums/en-US/categories" class="normal" title="Forums">Forums</a></div><div class="rightcap"></div><div class="Clear"></div> </div> <div class="Clear"> </div> <div class="topleftcorner"> </div> <div class="toprightcorner"> </div> <div class="alley"> <div class="wrapper"> <div class="inner"> <div class="Clear"> </div> <div class="BreadCrumb"><div class="BreadCrumbInner EyebrowContainer"><a href="http://msdn.microsoft.com/en-us/default" class="EyebrowLink" title="Microsoft Developer Network">Microsoft Developer Network</a> &gt; <a href="http://msdn.microsoft.com/en-us/bb188199" class="EyebrowLink" title="Learn">Learn</a> &gt; <a href="http://msdn.microsoft.com/en-us/gg299335" class="EyebrowLink" title="Courses">Courses</a> &gt; <a href="http://msdn.microsoft.com/en-us/gg266499" class="EyebrowLink" title="Windows Phone 7 Training Course">Windows Phone 7 Training Course</a> &gt; <a href="http://msdn.microsoft.com/en-us/gg266479" class="EyebrowLink" title="XNA Framework 4.0 for Windows Phones">XNA Framework 4.0 for Windows Phones</a> &gt; <a href="http://msdn.microsoft.com/en-us/gg266456" class="EyebrowLink" title="Game Development with XNA Framework">Game Development with XNA Framework</a> &gt; <span class="EyebrowElement">Exercise 1: XNA Game Studio Games on the Windows Phone 7</span> </div></div><div id="mainSection"><div class="navpage"><table class="multicol"><tbody><tr><td class="innercol" valign="top"><div class="MainColumn"><h2 class="Title">Exercise 1: XNA Game Studio Games on the Windows Phone 7</h2><p>If
 you have ever wanted to make your own games, Microsoft® XNA™ Game 
Studio 4.0 is for you. Student, hobbyist, independent game developer — 
anybody can create and share great games using XNA Game Studio.XNA Game 
Studio 4.0 is a game development product from Microsoft that is built on
 top of the Microsoft Visual Studio 2010 Express for Windows Phone, 
giving game developers the power and simplicity of C# as a programming 
language. XNA Game Studio 4.0 includes the XNA Framework and the XNA 
Framework Content Pipeline, which provide an easy and flexible way to 
import three-dimensional (3D) models, textures, sounds, and other assets
 into your game, and a game-focused application programming interface 
(API) that simplifies development for Xbox 360®, Windows® and now <strong>Windows Phone 7</strong>®. </p><p>The
 XNA Framework is an application programming interface (API). What that 
means is that it is a framework developed by Microsoft to help you make 
games faster. However, it's not a drag and drop game maker and you will 
need to learn how to program before you can use it. It is easy to use, 
but you will have to be somewhat technical to develop games with it. </p><p>The
 XNA Framework is not a game engine. It does not include physics, 
collision detection, or other things often found in game engines. It is a
 game development framework, but how the game works is programmed 
entirely by you.</p><p>During this lab you will build a full XNA Game 
Studio game for the Windows Phone – “Alien Game” – a simple shooter 
game. The goal in Alien Game is simple: Protect earth against the 
invading aliens for as long as possible. The longer you last, the more 
difficult the game becomes. Watch out for the smaller aliens that come 
out at night!</p><p><strong>General Architecture</strong></p><p>Alien Game uses the game screen management architecture from the Game State Management sample (originally found at <a href="http://creators.xna.com/en-US/samples/gamestatemanagement">http://creators.xna.com/en-US/samples/gamestatemanagement</a>), which provides the assets for this lab. The game includes three possible states:</p><ul><li>Main menu (MainMenuScreen class) </li><li>Playing the game (GameplayScreen class) </li><li>Paused (PauseScreen class) </li></ul><p>Alien
 Game performs all content-loading at startup. The first thing it does 
is load and display the BackgroundScreen. Then it loads and displays the
 LoadingScreen. The LoadingScreen loads the content. The screen doesn't 
draw anything itself, so the user sees the Background screen (which also
 includes the title). The LoadingScreen could draw or display some form 
of progress, but generally the loading is so quick that you won't see a 
progress display. Once all of the content is loaded, the MainMenuScreen 
is loaded and displayed, and the menus animate onto the screen. This 
allows for quicker transitions between the main menu and game play, 
without a lengthy pause as the content is loaded. This helps the 
hard-drive-based devices especially, as the hard drive may spin down.</p><a id="ID4EHF" href="#"></a><p><strong>GameplayScreen and Game Classes</strong></p><p>The
 design and implementation of Alien Game is relatively simple. All logic
 and drawing is contained in GameplayScreen. There are a few 
game-specific types found at the end of GameplayScreen.cs, namely 
Bullet, Alien, and Player. The code inside of GameplayScreen.cs is 
grouped by functionality: Loading and Unloading Content, Update and Game
 Simulation, and Drawing. </p><a id="ID4EOF" href="#"></a><p><strong>ParticleSystem</strong></p><p>Alien
 Game includes a simple sprite-based particle system that is used for 
the explosion and dust effects. The definition and creation of the 
effects is hard coded into the ParticleSystem, and is accessed using the
 factory CreateXXXXEffect methods.</p><p>The completed game will look as follows:</p><p><img src="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_gamedevelopmentwithxnalab_topic2_010.png" alt=""></p><div class="label"><strong>Figure 5</strong><p><em>Alien Game running on Windows Phone</em></p></div><p></p><p><strong>XNA Game Studio Game Basics</strong></p><p>The
 game is built in levels. Levels are connected to each other by the game
 plot, game player, enemies, etc. In the simple case, each level could 
be treated as a whole game.</p><p>A level usually has 3 states: </p><ul><li><strong>Loading</strong>
 – In this state, the system loads resources, sets up level-related 
variables, calculates the game-world (game-world is the place where all 
the game process occurs), and performs any other tasks that must be 
performed before the game actually begins. This state occurs only once 
in the level/game life-cycle.</li><li><strong>Update</strong> – In this 
state, the system needs to update the game-world state. Usually this 
means calculating new positions of the acting persons (player(s) and 
enemies), updating health, ammo, and other status, recalculating the 
score and other game logic according to the game. This state occurs 
throughout the time that the game engine is active.</li><li><strong>Draw</strong>
 – In this state, the system draws the changes calculated in the update 
state to the output graphics device. This state occurs throughout the 
time that the game engine is active.<p></p></li></ul><p>In the XNA 
Framework, the last two stages could occur up to 60 times per second on a
 PC or Xbox 360 and up to 30 times per second on a Zune, Zune HD or 
Windows Phone 7 device.</p><a id="_Toc256011796" href="#"></a><a id="_Toc256012403" href="#"></a><a id="_Toc256012605" href="#"></a><a id="_Toc256012752" href="#"></a><a id="_Toc256012777" href="#"></a><p></p><a id="_Toc265144526" href="#"></a><h3>Task 1 – XNA Game Studio Game Basics</h3><p>In
 this section, you will create your first XNA Game Studio game for the 
Windows Phone. The game will be a simple one, but you will add 
functionality throughout the lab.</p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 The steps in this hands-on lab illustrate procedures using Microsoft 
Visual Studio 2010 Express for Windows Phone, but they are equally 
applicable to Microsoft Visual Studio 2010 with the Windows Phone 
Developer Tools. Instructions that refer generically to Visual Studio 
apply to both products.</div></div><p></p><ol><li>Open Microsoft Visual Studio 2010 Express for Windows Phone from <strong>Start | All Programs | Microsoft Visual Studio 2010 Express | Microsoft Visual Studio 2010 Express for Windows Phone</strong>.<div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"><strong>Visual Studio 2010: </strong>Open Visual Studio 2010 from <strong>Start | All Programs | Microsoft Visual Studio 2010</strong>.</div></div><p></p></li><li>In the <strong>File</strong> menu, choose <strong>New Project</strong>.<div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"><strong>Visual Studio 2010:</strong> In the File menu, point to <strong>New</strong> and then select <strong>Project</strong>.</div></div><p></p></li><li>In the <strong>New Project</strong> dialog, select the <strong>XNA Game Studio game</strong> for Windows Phone category and, from the list of installed templates, select <strong>Windows Phone Game (4.0);</strong> then set the name to <strong>AlienGame</strong> and solution name to <strong>Begin</strong>. Set the location to <strong>Ex1-AlienGame </strong>in the <strong>Source</strong> folder of the lab. Click <strong>OK</strong>.<p><img src="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_gamedevelopmentwithxnalab_topic2_007.png" alt=""></p><div class="label"><strong>Figure 6</strong><p><em>Creating a new Windows Phone Game application project in Microsoft Visual Studio 2010 Express for Windows Phone</em></p></div><p></p></li><li>In <strong>Solution Explorer</strong>,
 review the structure of the solution generated by the Windows Phone 
Application template. Any Visual Studio solution is a container for 
related projects; in this case, it contains an XNA Game Studio game for 
Windows Phone project named <strong>AlienGame</strong> and a related games resources project named <strong>AlienGameContent</strong>.<p><img src="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_gamedevelopmentwithxnalab_topic2_011.png" alt=""></p><div class="label"><strong>Figure 7</strong><p><em>Solution Explorer showing the AlienGame application</em></p></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"><strong>&nbsp;</strong>Solution
 Explorer allows you to view items and perform item management tasks in a
 solution or a project. To show Solution Explorer, press <strong>CTRL + W, S</strong> or in the <strong>View</strong> menu, select <strong>Other Windows | Solution Explorer</strong>.</div></div><p></p></li><li>The
 generated project includes a default game implementation that contains 
the basic XNA Game Studio game loop. It is located in the <strong>Game1.cs</strong> file.</li><li>Open the <strong>Game1.cs</strong> file. We recommend that you change the default name to the name that reflects your game.</li><li>Rename the main game class (default name Game1) to <strong>AlienGame</strong>. To rename it, right click on the class name, select <strong>Refactor | Rename</strong>.<p><img src="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_gamedevelopmentwithxnalab_topic2_006.png" alt=""></p><div class="label"><strong>Figure 8</strong><p><em>Renaming the main game class</em></p></div><p></p></li><li>In the Rename dialog window's <strong>New name</strong> field, enter AlienGame and click <strong>OK</strong>.<p><img src="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_gamedevelopmentwithxnalab_topic2_003.png" alt=""></p><div class="label"><strong>Figure 9</strong><p><em>Giving the name to the main game class</em></p></div><p></p></li><li>Review changes suggested by Visual Studio and click <strong>Apply.</strong><p><img src="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_gamedevelopmentwithxnalab_topic2.png" alt=""></p><div class="label"><strong>Figure 10</strong><p><em>Apply changes to main game class</em></p></div><p></p></li><li>Rename the filename to match the new class name. Right-click on <strong>Game1.cs</strong> in Solution Explorer and choose <strong>Rename</strong>. Give the class the new name <strong>AlienGame.cs</strong>.<p><img src="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_gamedevelopmentwithxnalab_topic2_024.png" alt=""></p><div class="label"><strong>Figure 11</strong><p><em>Rename main game class file</em></p></div><p></p></li><li>The <strong>GameThumbnail.png</strong>
 file contains the icon that identifies the application in the quick 
launch screen of the phone device. You can double-click the item in <strong>Solution Explorer</strong> to open the file in a registered application on your machine that can edit image files, for example, <strong>Paint.exe</strong>. You will change it later in lab.<div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"><strong>&nbsp;</strong>In Visual Studio 2010, double-clicking the icon file in Solution Explorer opens the built-in image editor.</div></div><p></p></li><li>A
 XNA Game Studio game for Windows Phone application typically takes 
advantage of services provided by the underlying platform or by other 
libraries. To use this functionality, the application needs to reference
 the corresponding assemblies that implement these services.</li><li>To display the assemblies referenced by the project, expand the <strong>References</strong> node in <strong>Solution Explorer</strong>
 and examine the list. It contains regular XNA Framework assemblies as 
well as assemblies specific to the Windows Phone platform.<p><img src="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_gamedevelopmentwithxnalab_topic2_004.png" alt=""></p><div class="label"><strong>Figure 12</strong><p><em>Solution Explorer showing the assemblies referenced by the project</em></p></div><p></p><p>Currently,
 the application does not do much, but it is ready for its first test 
run. In this step, you build the application, deploy it to the Windows 
Phone Emulator, and then execute it to understand the typical 
development cycle.</p></li><li>In the <strong>Debug</strong> menu, select <strong>Windows | Output</strong> to open the Output window.</li><li>Select <strong>Build Solution </strong>in the <strong>Debug</strong> menu or press the <strong>SHIFT + F6</strong> key combination to compile the projects in the solution.<div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"><strong>Visual Studio 2010: </strong>Select <strong>Build Solution</strong> in the <strong>Build</strong> menu or press <strong>CTRL + SHIFT + B</strong> to compile the projects in the solution.</div></div><p></p></li><li>Observe the <strong>Output</strong> window and review the trace messages generated during the build process, including a final message with its outcome.<p><img src="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_gamedevelopmentwithxnalab_topic2_008.png" alt=""></p><div class="label"><strong>Figure 13</strong><p><em>Building the application in Visual Studio</em></p></div><p></p><p>You
 should not observe any errors at this stage but, if the project were to
 contain compilation errors, these would appear in the <strong>Output</strong> window. To deal with these kinds of errors, you can take advantage of the <strong>Error List</strong>
 window. This window displays errors, warnings, and messages produced by
 the compiler in a list that you can sort and filter based on the 
severity of the error. Moreover, you can double-click an item in the 
list to automatically open the relevant source code file and navigate to
 the source of the error.</p></li><li>To open the Error List window, in the <strong>View</strong> menu, point to <strong>Other Windows</strong> and select <strong>Error List</strong>.<div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"><strong>Visual Studio 2010: </strong>To open the Error List window, in the <strong>View</strong> menu select <strong>Error List</strong>.</div></div><p></p><p><img src="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_gamedevelopmentwithxnalab_topic2_009.png" alt=""></p><div class="label"><strong>Figure 14</strong><p><em>Error List window shows errors during the build process</em></p></div><p></p></li><li>Verify
 that the target of the deployment is the Windows Phone Emulator. To do 
this, ensure that Windows Phone 7 Emulator is selected in the <strong>Select Device</strong> drop down next to the <strong>Start Debugging</strong> button on the toolbar.<p><img src="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_gamedevelopmentwithxnalab_topic2_022.png" alt=""></p><div class="label"><strong>Figure 15</strong><p><em>Choosing the target device to deploy the application</em></p></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 When you deploy your application from Visual Studio, you have the 
option to deploy it to a real device or to the Windows Phone Emulator.</div></div><p></p></li><li>Press <strong>F5</strong>
 to launch the application in the Windows Phone Emulator. Notice that a 
device emulator window appears and there is a pause while Visual Studio 
sets up the emulator environment and deploys the image. Once it is 
ready, the emulator shows the Start page and shortly thereafter, your 
application appears in the emulator window.</li><li>The application will
 display a simple blue screen with nothing else shown. This is normal to
 an application in such early stages.<p><img src="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_gamedevelopmentwithxnalab_topic2_015.png" alt=""></p><div class="label"><strong>Figure 16</strong><p><em>Running the application in the Windows Phone Emulator</em></p></div><p></p><p>Until
 you create the user interface and program the application logic, there 
is very little that you can do with the application.</p><p></p></li><li>Press <strong>SHIFT + F5</strong> or click the <strong>Stop</strong> button in the toolbar to detach the debugger and end the debugging session. Do not close the emulator window.<p><img src="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_gamedevelopmentwithxnalab_topic2_016.png" alt=""></p><div class="label"><strong>Figure 17</strong><p><em>Ending the debugging session</em></p></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 When you start a debugging session, it takes a perceptible amount of 
time to set up the emulator environment and launch the application. To 
streamline your debugging experience, avoid closing the emulator while 
you work with the source code in Visual Studio. Once the emulator is 
running, it takes very little time to stop the current session, edit the
 source code, and then build and deploy a new image of your application 
to start a new debugging session.</div></div></li></ol><p></p><a id="_Toc256011797" href="#"></a><a id="_Toc256012404" href="#"></a><a id="_Toc256012606" href="#"></a><a id="_Toc256012753" href="#"></a><a id="_Toc256012778" href="#"></a><a id="_Toc265144527" href="#"></a><h3>Task 2 – XNA Framework Game Resources</h3><p>Many
 games using pre-defined images to present the game, process sound and 
other resources to play as a part of gameplay. This lab provides you 
with a number of such resources to make the game development process 
easier. During this task you will add those resources to the game. This 
lab also provides a number of code files to handle the complexity of 
menu and screen changes during the game. You will add those files to the
 game also.</p><p>You are building the game. The game will present some 
graphics. In this task you will add some resources to the application 
and some existing game logic (ScreenManager).</p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> All the game resources are provided in the lab install folder under the following locations of this lab:<p></p>Source\Assets\Code – all CSharp code files<p></p>Source\Assets\Media – all graphics, fonts and sounds</div></div><p></p><ol><li>Close the project in Visual Studio. Switch to Windows Explorer, navigate to the project location and copy two files from the <strong>Source\Assets\Media\Images\Icons</strong> folder of this lab into the “AlienGame” directory, replacing the existing files:<ul><li><strong>Game.ico</strong></li><li><strong>GameThumbnail.png</strong></li></ul></li><li>Re-open Visual Studio 2010 and open the AlienGame project.<p>Most
 games use art in the form of models, meshes, sprites, textures, 
effects, terrains, animations, and so on. Such art assets can be created
 in many different ways and stored in many different file formats. They 
tend to change frequently in the course of game development. The Content
 Pipeline is designed to help you include such art assets in your game 
easily and automatically. An artist working on a car model can add the 
resulting file to the XNA Game Studio game project, assign the model a 
name, and choose an importer and content processor for it. Then, a 
developer who wants to make the car drive can load it by name using a 
call to <a href="http://msdn.microsoft.com/en-us/library/bb197848%28XNAGameStudio.20%29.aspx">ContentManager.Load</a>.
 This simple flow lets the artist focus on creating assets and the 
developer focus on using them, without either having to spend time 
worrying about content transformation.</p><p>The XNA Content Pipeline is
 readily integrated into your XNA Game Studio project. You just add the 
resource to your project and when you compile it, the data is imported 
and converted in a XNB (XNA Binary File) using a <em>Content Importer</em>.
 This XNB file is generated for the right platform. Content Importers 
are implemented as assemblies. In addition to the standard ones provided
 by XNA Game Studio, you can also use custom importers and processors 
that you or other third parties develop. Some of standard Content 
Importers include the following file types (partial list):</p><ul><li>Autodesk FBX format (.fbx)</li><li>DirectX Effect file format (.fx)</li><li>Font description specified in a .spritefont file</li><li>Texture file. The following types are supported: .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga</li><li>Game audio specified in the Microsoft Cross-Platform Audio Creation Tool (XACT) format (.xap)</li></ul></li><li>This lab provides a number of media resources such as fonts, sounds, and images. Add the following items to the <strong>AlienGameContent</strong> project:<ul><li>All the fonts from the <strong>Source\Assets\Media\Fonts</strong> folder</li><li>All the images from the <strong>Source\Assets\Media\Images\Content</strong> folder</li><li>All the images from the <strong>Source\Assets\Media\Sounds</strong> folder</li></ul></li><li>To add existing items right-click on the <strong>AlienGameContent</strong> project name and select <strong>Add</strong> | <strong>Existing Items</strong>:<p><img src="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_gamedevelopmentwithxnalab_topic2_021.png" alt=""></p><div class="label"><strong>Figure 18</strong><p><em>Adding existing items to the project</em></p></div><p></p></li><li>Navigate
 to the file locations and select the files. In some cases you will not 
see all the files. In this case change the filter in the file selection 
dialog to show all the files in the directory:<p><img src="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_gamedevelopmentwithxnalab_topic2_017.png" alt=""></p><div class="label"><strong>Figure 19</strong><p><em>Changing file types filter to show all the files in the folder</em></p></div><p></p></li><li>The resulting <strong>AlienGameContent</strong> project should look as follows:<p><img src="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_gamedevelopmentwithxnalab_topic2_012.png" alt=""></p><div class="label"><strong>Figure 20</strong><p><em>Resulting Contents project structure</em></p></div><p></p></li><li>Add a new project folder – right-click on AlienGame, select <strong>Add | New Folder</strong>.<p><img src="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_gamedevelopmentwithxnalab_topic2_023.png" alt=""></p><div class="label"><strong>Figure 21</strong><p><em>Adding New Project Folder</em></p></div><p></p></li><li>Name the folder <strong>ScreenManager.</strong><p>This
 folder will hold the source files provide by the lab. Those files will 
help to manage the complexity of creation game screens, menus, and 
changing between them.</p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> This code implements the standard approach for creating XNA Game Studio menus and screens.</div></div><p></p></li><li>Select the folder and add all existing Screen Manager files from the <strong>Source\Assets\Code\ScreenManager</strong> folder of this lab.</li><li>Add the <strong>ParticleSystem.cs</strong> file from the <strong>Source\Assets\Code</strong> folder to the root of the <strong>AlienGame</strong> project.</li><li>The resulting project should look as follows:<p><img src="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_gamedevelopmentwithxnalab_topic2_019.png" alt=""></p><div class="label"><strong>Figure 22</strong><p><em>Resulting AlienGame project structure</em></p></div><p></p></li><li>Add a new class to the AlienGame project and name it <strong>BackgroundScreen</strong>:<p><img src="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_gamedevelopmentwithxnalab_topic2_014.png" alt=""></p><div class="label"><strong>Figure 23</strong><p><em>Adding a new class to the project</em></p></div><p></p></li><li>Open the new class and add the following <em>using</em> statements:<p>(Code Snippet – <em>Game Development with XNA – Background Screen using statements</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">using</span>&nbsp;AlienGameSample;<span class="cs__keyword">using</span>&nbsp;Microsoft.Xna.Framework.Graphics;<span class="cs__keyword">using</span>&nbsp;Microsoft.Xna.Framework;</li></ol></code></pre></div><p></p></li><li>Derive a new class from the <em>GameScreen</em> class (the GameScreen class is defined in classes added previously to the ScreenManager folder):<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">class</span>&nbsp;BackgroundScreen&nbsp;:&nbsp;GameScreen{}</li></ol></code></pre></div><p></p></li><li>Add the following class variables to be used later for loading resources:<p>(Code Snippet – <em>Game Development with XNA – Background Screen class variables</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li>Texture2D&nbsp;title;Texture2D&nbsp;background;</li></ol></code></pre></div><p></p></li><li>Define class constructor as follows:<p>(Code Snippet – <em>Game Development with XNA – Background Screen Constructor</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;BackgroundScreen(){&nbsp;TransitionOnTime&nbsp;=&nbsp;TimeSpan.FromSeconds(<span class="cs__number">0.0</span>);&nbsp;TransitionOffTime&nbsp;=&nbsp;TimeSpan.FromSeconds(<span class="cs__number">0.5</span>);}</li></ol></code></pre></div><p></p></li><li>The <strong>GameScreen</strong>
 Class defines some core game functionality according to what was 
described in the exercise preface: LoadContent, Update, and Draw. 
Override the base class <strong>LoadContent</strong> functionality:<p>(Code Snippet – <em>Game Development with XNA – Background Screen LoadContent method</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;LoadContent(){&nbsp;title&nbsp;=&nbsp;ScreenManager.Game.Content.Load&lt;Texture2D&gt;(<span class="cs__string">"title"</span>);&nbsp;background&nbsp;=&nbsp;ScreenManager.Game.Content.Load&lt;Texture2D&gt;(<span class="cs__string">"background"</span>);}</li></ol></code></pre></div><p></p><p>This code snippet loads the content from resources of the game. The content is loaded by name.</p></li><li>Now create a <strong>LoadingScreen</strong> class. The screen presented with the class will be presented while game resources being loaded.<div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"><strong>&nbsp;</strong>To create a new class, in Solution Explorer right-click the AlienGame project and select <strong>Add | Class</strong>.</div></div><p></p></li><li>Add following <em>using</em> statements to the <strong>LoadingScreen</strong> class:<p>(Code Snippet – <em>Game Development with XNA – Loading Screen using statements</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">using</span>&nbsp;AlienGameSample;<span class="cs__keyword">using</span>&nbsp;System.Threading;<span class="cs__keyword">using</span>&nbsp;Microsoft.Xna.Framework;</li></ol></code></pre></div><p></p></li><li>Derive a new class from the <strong>GameScreen</strong> base class (like you did for the previous class), and add the constructor as follows:<p>(Code Snippet – <em>Game Development with XNA – Loading Screen constructor</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">class</span>&nbsp;LoadingScreen&nbsp;:&nbsp;GameScreen{&nbsp;<span class="cs__keyword">public</span>&nbsp;LoadingScreen()&nbsp;{&nbsp;TransitionOnTime&nbsp;=&nbsp;TimeSpan.FromSeconds(<span class="cs__number">0.0</span>);&nbsp;TransitionOffTime&nbsp;=&nbsp;TimeSpan.FromSeconds(<span class="cs__number">0.0</span>);&nbsp;}}</li></ol></code></pre></div><p></p></li><li>Add a class variable to hold the Thread which will be used to load the components:<p>(Code Snippet – <em>Game Development with XNA – Loading Screen class variables</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">private</span>&nbsp;Thread&nbsp;backgroundThread;</li></ol></code></pre></div><p></p></li><li>Create a method to load the content. This approach is part of the standard loading procedures in XNA programming:<p>(Code Snippet – <em>Game Development with XNA – Loading Screen BackgroundLoadContent method</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">void</span>&nbsp;BackgroundLoadContent(){&nbsp;ScreenManager.Game.Content.Load&lt;<span class="cs__keyword">object</span>&gt;(<span class="cs__string">"alien_hit"</span>);&nbsp;ScreenManager.Game.Content.Load&lt;<span class="cs__keyword">object</span>&gt;(<span class="cs__string">"alien1"</span>);&nbsp;ScreenManager.Game.Content.Load&lt;<span class="cs__keyword">object</span>&gt;(<span class="cs__string">"background"</span>);&nbsp;ScreenManager.Game.Content.Load&lt;<span class="cs__keyword">object</span>&gt;(<span class="cs__string">"badguy_blue"</span>);&nbsp;ScreenManager.Game.Content.Load&lt;<span class="cs__keyword">object</span>&gt;(<span class="cs__string">"badguy_green"</span>);&nbsp;ScreenManager.Game.Content.Load&lt;<span class="cs__keyword">object</span>&gt;(<span class="cs__string">"badguy_orange"</span>);&nbsp;ScreenManager.Game.Content.Load&lt;<span class="cs__keyword">object</span>&gt;(<span class="cs__string">"badguy_red"</span>);&nbsp;ScreenManager.Game.Content.Load&lt;<span class="cs__keyword">object</span>&gt;(<span class="cs__string">"bullet"</span>);&nbsp;ScreenManager.Game.Content.Load&lt;<span class="cs__keyword">object</span>&gt;(<span class="cs__string">"cloud1"</span>);&nbsp;ScreenManager.Game.Content.Load&lt;<span class="cs__keyword">object</span>&gt;(<span class="cs__string">"cloud2"</span>);&nbsp;ScreenManager.Game.Content.Load&lt;<span class="cs__keyword">object</span>&gt;(<span class="cs__string">"fire"</span>);&nbsp;ScreenManager.Game.Content.Load&lt;<span class="cs__keyword">object</span>&gt;(<span class="cs__string">"gamefont"</span>);&nbsp;ScreenManager.Game.Content.Load&lt;<span class="cs__keyword">object</span>&gt;(<span class="cs__string">"ground"</span>);&nbsp;ScreenManager.Game.Content.Load&lt;<span class="cs__keyword">object</span>&gt;(<span class="cs__string">"hills"</span>);&nbsp;ScreenManager.Game.Content.Load&lt;<span class="cs__keyword">object</span>&gt;(<span class="cs__string">"laser"</span>);&nbsp;ScreenManager.Game.Content.Load&lt;<span class="cs__keyword">object</span>&gt;(<span class="cs__string">"menufont"</span>);&nbsp;ScreenManager.Game.Content.Load&lt;<span class="cs__keyword">object</span>&gt;(<span class="cs__string">"moon"</span>);&nbsp;ScreenManager.Game.Content.Load&lt;<span class="cs__keyword">object</span>&gt;(<span class="cs__string">"mountains_blurred"</span>);&nbsp;ScreenManager.Game.Content.Load&lt;<span class="cs__keyword">object</span>&gt;(<span class="cs__string">"player_hit"</span>);&nbsp;ScreenManager.Game.Content.Load&lt;<span class="cs__keyword">object</span>&gt;(<span class="cs__string">"scorefont"</span>);&nbsp;ScreenManager.Game.Content.Load&lt;<span class="cs__keyword">object</span>&gt;(<span class="cs__string">"smoke"</span>);&nbsp;ScreenManager.Game.Content.Load&lt;<span class="cs__keyword">object</span>&gt;(<span class="cs__string">"sun"</span>);&nbsp;ScreenManager.Game.Content.Load&lt;<span class="cs__keyword">object</span>&gt;(<span class="cs__string">"tank"</span>);&nbsp;ScreenManager.Game.Content.Load&lt;<span class="cs__keyword">object</span>&gt;(<span class="cs__string">"tank_fire"</span>);&nbsp;ScreenManager.Game.Content.Load&lt;<span class="cs__keyword">object</span>&gt;(<span class="cs__string">"tank_tire"</span>);&nbsp;ScreenManager.Game.Content.Load&lt;<span class="cs__keyword">object</span>&gt;(<span class="cs__string">"tank_top"</span>);&nbsp;ScreenManager.Game.Content.Load&lt;<span class="cs__keyword">object</span>&gt;(<span class="cs__string">"title"</span>);&nbsp;ScreenManager.Game.Content.Load&lt;<span class="cs__keyword">object</span>&gt;(<span class="cs__string">"titlefont"</span>);}</li></ol></code></pre></div><p></p></li><li>Override the base class <strong>LoadContent</strong> method and start the loader method as a new thread to achieve asynchronous loading of the resources:<div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 In our simple game the resources will be loaded momentarily, but for 
more complex games, this approach enables showing a progress indicator 
or a splash screen.</div></div><p>(Code Snippet – <em>Game Development with XNA – Loading Screen LoadContent method</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;LoadContent(){&nbsp;<span class="cs__keyword">if</span>&nbsp;(backgroundThread&nbsp;==&nbsp;<span class="cs__keyword">null</span>)&nbsp;{&nbsp;backgroundThread&nbsp;=&nbsp;<span class="cs__keyword">new</span>&nbsp;Thread(BackgroundLoadContent);&nbsp;backgroundThread.Start();&nbsp;}&nbsp;<span class="cs__keyword">base</span>.LoadContent();}</li></ol></code></pre></div><p></p></li><li>Override the base class <strong>Update</strong> method to wait for <strong>LoadContent</strong> to finish and jump to the MainMenu screen (added in next steps):<p>(Code Snippet – <em>Game Development with XNA – Loading Screen Update method</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;Update(GameTime&nbsp;gameTime,&nbsp;<span class="cs__keyword">bool</span>&nbsp;otherScreenHasFocus,&nbsp;<span class="cs__keyword">bool</span>&nbsp;coveredByOtherScreen){&nbsp;<span class="cs__keyword">if</span>&nbsp;(backgroundThread&nbsp;!=&nbsp;<span class="cs__keyword">null</span>&nbsp;&amp;&amp;&nbsp;backgroundThread.Join(<span class="cs__number">10</span>))&nbsp;{&nbsp;backgroundThread&nbsp;=&nbsp;<span class="cs__keyword">null</span>;&nbsp;<span class="cs__keyword">this</span>.ExitScreen();&nbsp;ScreenManager.AddScreen(<span class="cs__keyword">new</span>&nbsp;MainMenuScreen());&nbsp;ScreenManager.Game.ResetElapsedTime();&nbsp;}&nbsp;<span class="cs__keyword">base</span>.Update(gameTime,&nbsp;otherScreenHasFocus,&nbsp;coveredByOtherScreen);}</li></ol></code></pre></div><p></p></li><li>Now add a new class and name it <strong>MainMenuScreen</strong>. When created, add the following <em>using</em> statement to it:<p>(Code Snippet – <em>Game Development with XNA – MainMenu Screen using statement</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">using</span>&nbsp;AlienGameSample;</li></ol></code></pre></div><p></p></li><li>Derive the new class from the <strong>MenuScreen</strong> base class. This class is also defined in classes added to <strong>ScreenManager</strong> folder and facilitates all typical functionality needed to show/interact with menu and menu items.</li><li>Create <strong>MainMenuScreen</strong> class constructor:<p>(Code Snippet – <em>Game Development with XNA –</em> MainMenu Screen constructor)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">class</span>&nbsp;MainMenuScreen&nbsp;:&nbsp;MenuScreen{&nbsp;<span class="cs__keyword">public</span>&nbsp;MainMenuScreen()&nbsp;:&nbsp;<span class="cs__keyword">base</span>(<span class="cs__string">"Main"</span>)&nbsp;{&nbsp;<span class="cs__com">//&nbsp;Create&nbsp;our&nbsp;menu&nbsp;entries.&nbsp;MenuEntry&nbsp;startGameMenuEntry&nbsp;=&nbsp;new&nbsp;MenuEntry("START&nbsp;GAME");&nbsp;MenuEntry&nbsp;exitMenuEntry&nbsp;=&nbsp;new&nbsp;MenuEntry("QUIT");&nbsp;//&nbsp;Hook&nbsp;up&nbsp;menu&nbsp;event&nbsp;handlers.&nbsp;startGameMenuEntry.Selected&nbsp;+=&nbsp;StartGameMenuEntrySelected;&nbsp;exitMenuEntry.Selected&nbsp;+=&nbsp;OnCancel;&nbsp;//&nbsp;Add&nbsp;entries&nbsp;to&nbsp;the&nbsp;menu.&nbsp;MenuEntries.Add(startGameMenuEntry);&nbsp;MenuEntries.Add(exitMenuEntry);&nbsp;}}</span></li></ol></code></pre></div><p></p></li><li>In
 the constructor you subscribed for two events, which will fire when the
 user selects the menu items. Create the event handler methods to handle
 those events:<p>(Code Snippet – <em>Game Development with XNA – MainMenu Screen event handlers</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">void</span>&nbsp;StartGameMenuEntrySelected(<span class="cs__keyword">object</span>&nbsp;sender,&nbsp;EventArgs&nbsp;e){}<span class="cs__keyword">protected</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;OnCancel(){&nbsp;ScreenManager.Game.Exit();}</li></ol></code></pre></div><p></p></li><li>Open the <strong>AlienGame.cs</strong> file and add the following <em>using</em> statement:<p>(Code Snippet – <em>Game Development with XNA – AlienGame using statement</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">using</span>&nbsp;AlienGameSample;</li></ol></code></pre></div><p></p></li><li>Add the following class variable:<p>(Code Snippet – <em>Game Development with XNA – AlienGame variables</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li>ScreenManager&nbsp;screenManager;</li></ol></code></pre></div><p></p></li><li>Delete the spriteBatch variable created by Visual Studio:<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li>SpriteBatch&nbsp;spriteBatch;</li></ol></code></pre></div><p></p></li><li>Delete all the code except for the class’s constructor and the variable declarations.</li><li>After
 initializing the main game class, you need to load the game resources 
and present the user with some background for the menu. The menu screen 
will follow the loading process. In addition, we recommend that you 
define the preferred resolution to the graphical device. To achieve 
this, change the constructor method according to the following code 
snippet:<p>(Code Snippet – <em>Game Development with XNA – AlienGame Constructor</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;AlienGame(){&nbsp;graphics&nbsp;=&nbsp;<span class="cs__keyword">new</span>&nbsp;GraphicsDeviceManager(<span class="cs__keyword">this</span>);&nbsp;<span class="cs__com">//Set&nbsp;the&nbsp;Windows&nbsp;Phone&nbsp;screen&nbsp;resolution&nbsp;graphics.PreferredBackBufferWidth&nbsp;=&nbsp;480;&nbsp;graphics.PreferredBackBufferHeight&nbsp;=&nbsp;800;&nbsp;Content.RootDirectory&nbsp;=&nbsp;"Content";&nbsp;//&nbsp;Frame&nbsp;rate&nbsp;is&nbsp;30&nbsp;fps&nbsp;by&nbsp;default&nbsp;for&nbsp;Windows&nbsp;Phone.&nbsp;TargetElapsedTime&nbsp;=&nbsp;TimeSpan.FromSeconds(1&nbsp;/&nbsp;30.0);&nbsp;//Create&nbsp;a&nbsp;new&nbsp;instance&nbsp;of&nbsp;the&nbsp;Screen&nbsp;Manager&nbsp;screenManager&nbsp;=&nbsp;new&nbsp;ScreenManager(this);&nbsp;Components.Add(screenManager);&nbsp;//Add&nbsp;two&nbsp;new&nbsp;screens&nbsp;screenManager.AddScreen(new&nbsp;BackgroundScreen());&nbsp;screenManager.AddScreen(new&nbsp;LoadingScreen());}</span></li></ol></code></pre></div><p></p></li><li>Compile and run the application. After the application loads, the main menu screen should appear:<p><img src="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_gamedevelopmentwithxnalab_topic2_013.png" alt=""></p><div class="label"><strong>Figure 24</strong><p><em>Running application with main menu</em></p></div><p></p></li><li>Stop the debugging and return to editing the application.</li></ol><p>During
 this task you added provided resources to the game, created a number of
 screens to present the user with some basic user interfaces while 
loading the game, and created a main menu. </p><a id="_Toc256011798" href="#"></a><a id="_Toc256012405" href="#"></a><a id="_Toc256012607" href="#"></a><a id="_Toc256012754" href="#"></a><a id="_Toc256012779" href="#"></a><p></p><a id="_Toc265144528" href="#"></a><h3>Task 3 – XNA Game Studio Game Loop</h3><p>In this task you will focus on two remaining parts of the game – overriding the <strong>Update</strong> and <strong>Draw</strong> functionalities.</p><ol><li>Open <strong>BackgroundScreen.cs</strong>.</li><li>Override the base class <strong>Update</strong> method as follows:<p>(Code Snippet – <em>Game Development with XNA – Background Screen Update method</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;Update(GameTime&nbsp;gameTime,&nbsp;<span class="cs__keyword">bool</span>&nbsp;otherScreenHasFocus,&nbsp;&nbsp;<span class="cs__keyword">bool</span>&nbsp;coveredByOtherScreen){&nbsp;<span class="cs__keyword">base</span>.Update(gameTime,&nbsp;otherScreenHasFocus,&nbsp;<span class="cs__keyword">false</span>);}</li></ol></code></pre></div><p></p></li><li>Override the base class <strong>Draw</strong> method. The Draw method will use the <strong>SpriteBatch</strong> class from the <strong>Microsoft.Xna.Framewok.Graphics</strong> namespace to draw on the graphics device. It enables a group of sprites to be drawn using the same settings. Change the <strong>Draw</strong> method to match the following code snippet:<p>(Code Snippet – <em>Game Development with XNA – Background Screen Draw method</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;Draw(GameTime&nbsp;gameTime){&nbsp;SpriteBatch&nbsp;spriteBatch&nbsp;=&nbsp;ScreenManager.SpriteBatch;&nbsp;<span class="cs__com">//&nbsp;Make&nbsp;the&nbsp;menu&nbsp;slide&nbsp;into&nbsp;place&nbsp;during&nbsp;transitions,&nbsp;using&nbsp;a&nbsp;//&nbsp;power&nbsp;curve&nbsp;to&nbsp;make&nbsp;things&nbsp;look&nbsp;more&nbsp;interesting&nbsp;(this&nbsp;makes&nbsp;//&nbsp;the&nbsp;movement&nbsp;slow&nbsp;down&nbsp;as&nbsp;it&nbsp;nears&nbsp;the&nbsp;end).&nbsp;float&nbsp;transitionOffset&nbsp;=&nbsp;(float)Math.Pow(TransitionPosition,&nbsp;2);&nbsp;spriteBatch.Begin();&nbsp;//&nbsp;Draw&nbsp;Background&nbsp;spriteBatch.Draw(background,&nbsp;new&nbsp;Vector2(0,&nbsp;0),&nbsp;&nbsp;new&nbsp;Color(255,&nbsp;255,&nbsp;255,&nbsp;TransitionAlpha));&nbsp;//&nbsp;Draw&nbsp;Title&nbsp;spriteBatch.Draw(title,&nbsp;new&nbsp;Vector2(60,&nbsp;55),&nbsp;&nbsp;new&nbsp;Color(255,&nbsp;255,&nbsp;255,&nbsp;TransitionAlpha));&nbsp;spriteBatch.End();}</span></li></ol></code></pre></div><p></p></li><li>Press <strong>F5</strong> to compile and run the application.<p><img src="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_gamedevelopmentwithxnalab_topic2_020.png" alt=""></p><div class="label"><strong>Figure 25</strong><p><em>Running application after changing Update and Draw methods</em></p></div><p></p></li><li>Stop the debugging (<strong>SHIFT</strong>+<strong>F5</strong>) and return to editing the application.</li><li>Add an additional class to the application and set its name to <strong>GameplayScreen.</strong><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"><strong>&nbsp;</strong>To create a new class, in Solution Explorer right-click the AlienGame project and select <strong>Add | Class</strong>.</div></div><p></p></li><li>Add the following <em>using</em> statements to the new class:<p>(Code Snippet – <em>Game Development with XNA – Gameplay Screen using statements</em> )</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">using</span>&nbsp;AlienGameSample;<span class="cs__keyword">using</span>&nbsp;Microsoft.Xna.Framework;<span class="cs__keyword">using</span>&nbsp;Microsoft.Xna.Framework.Graphics;<span class="cs__keyword">using</span>&nbsp;Microsoft.Xna.Framework.Audio;<span class="cs__keyword">using</span>&nbsp;System.IO.IsolatedStorage;<span class="cs__keyword">using</span>&nbsp;System.IO;</li></ol></code></pre></div><p></p></li><li>Derive the class from <strong>GameScreen</strong>.<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">class</span>&nbsp;GameplayScreen&nbsp;:&nbsp;GameScreen{}</li></ol></code></pre></div><p></p></li><li>Add
 following class variables (you will use them in the game). Those 
variables will be used later in the lab to handle game logic, user 
input, drawing, etc.:<p>(Code Snippet – <em>Game Development with XNA – Gameplay Screen variables</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__com">////&nbsp;Game&nbsp;Play&nbsp;Members//Rectangle&nbsp;worldBounds;bool&nbsp;gameOver;int&nbsp;baseLevelKillCount;int&nbsp;levelKillCount;float&nbsp;alienSpawnTimer;float&nbsp;alienSpawnRate;float&nbsp;alienMaxAccuracy;float&nbsp;alienSpeedMin;float&nbsp;alienSpeedMax;int&nbsp;alienScore;int&nbsp;nextLife;int&nbsp;hitStreak;int&nbsp;highScore;Random&nbsp;random;////&nbsp;Rendering&nbsp;Members//Texture2D&nbsp;cloud1Texture;Texture2D&nbsp;cloud2Texture;Texture2D&nbsp;sunTexture;Texture2D&nbsp;moonTexture;Texture2D&nbsp;groundTexture;Texture2D&nbsp;tankTexture;Texture2D&nbsp;alienTexture;Texture2D&nbsp;badguy_blue;Texture2D&nbsp;badguy_red;Texture2D&nbsp;badguy_green;Texture2D&nbsp;badguy_orange;Texture2D&nbsp;mountainsTexture;Texture2D&nbsp;hillsTexture;Texture2D&nbsp;bulletTexture;Texture2D&nbsp;laserTexture;SpriteFont&nbsp;scoreFont;SpriteFont&nbsp;menuFont;Vector2&nbsp;cloud1Position;Vector2&nbsp;cloud2Position;Vector2&nbsp;sunPosition;//&nbsp;Level&nbsp;changes,&nbsp;nighttime&nbsp;transitions,&nbsp;etcfloat&nbsp;transitionFactor;&nbsp;//&nbsp;0.0f&nbsp;==&nbsp;day,&nbsp;1.0f&nbsp;==&nbsp;nightfloat&nbsp;transitionRate;&nbsp;//&nbsp;&gt;&nbsp;0.0f&nbsp;==&nbsp;day&nbsp;to&nbsp;nightParticleSystem&nbsp;particles;////&nbsp;Audio&nbsp;Members//SoundEffect&nbsp;alienFired;SoundEffect&nbsp;alienDied;SoundEffect&nbsp;playerFired;SoundEffect&nbsp;playerDied;//Screen&nbsp;dimension&nbsp;constsconst&nbsp;float&nbsp;screenHeight&nbsp;=&nbsp;800.0f;const&nbsp;float&nbsp;screenWidth&nbsp;=&nbsp;480.0f;const&nbsp;int&nbsp;leftOffset&nbsp;=&nbsp;25;const&nbsp;int&nbsp;topOffset&nbsp;=&nbsp;50;const&nbsp;int&nbsp;bottomOffset&nbsp;=&nbsp;20;</span></li></ol></code></pre></div><p></p></li><li>The <strong>GamePlay</strong>
 class constructor defines the speed of screen transitions (between the 
Gameplay Screen and other screens in the game) and the size of “game 
world” – the place where all the game actions are handled. Add this 
class constructor as follows:<p>(Code Snippet – <em>Game Development with XNA – Gameplay Screen Constructor</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;GameplayScreen(){&nbsp;random&nbsp;=&nbsp;<span class="cs__keyword">new</span>&nbsp;Random();&nbsp;worldBounds&nbsp;=&nbsp;<span class="cs__keyword">new</span>&nbsp;Rectangle(<span class="cs__number">0</span>,&nbsp;<span class="cs__number">0</span>,&nbsp;(<span class="cs__keyword">int</span>)screenWidth,&nbsp;(<span class="cs__keyword">int</span>)screenHeight);&nbsp;gameOver&nbsp;=&nbsp;<span class="cs__keyword">true</span>;&nbsp;TransitionOnTime&nbsp;=&nbsp;TimeSpan.FromSeconds(<span class="cs__number">0.0</span>);&nbsp;TransitionOffTime&nbsp;=&nbsp;TimeSpan.FromSeconds(<span class="cs__number">0.0</span>);}</li></ol></code></pre></div><p></p></li><li>Now let’s create content Loading and Unloading functionality. Override the base class <strong>LoadContent</strong> and <strong>UnloadContent</strong> methods. <p>Add the <strong>LoadContent</strong> code snippet:</p><p>(Code Snippet – <em>Game Development with XNA – Gameplay Screen LoadContent method</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;LoadContent(){&nbsp;cloud1Texture&nbsp;=&nbsp;ScreenManager.Game.Content.Load&lt;Texture2D&gt;(<span class="cs__string">"cloud1"</span>);&nbsp;cloud2Texture&nbsp;=&nbsp;ScreenManager.Game.Content.Load&lt;Texture2D&gt;(<span class="cs__string">"cloud2"</span>);&nbsp;sunTexture&nbsp;=&nbsp;ScreenManager.Game.Content.Load&lt;Texture2D&gt;(<span class="cs__string">"sun"</span>);&nbsp;moonTexture&nbsp;=&nbsp;ScreenManager.Game.Content.Load&lt;Texture2D&gt;(<span class="cs__string">"moon"</span>);&nbsp;groundTexture&nbsp;=&nbsp;ScreenManager.Game.Content.Load&lt;Texture2D&gt;(<span class="cs__string">"ground"</span>);&nbsp;tankTexture&nbsp;=&nbsp;ScreenManager.Game.Content.Load&lt;Texture2D&gt;(<span class="cs__string">"tank"</span>);&nbsp;mountainsTexture&nbsp;=&nbsp;ScreenManager.Game.Content.Load&lt;Texture2D&gt;(<span class="cs__string">"mountains_blurred"</span>);&nbsp;hillsTexture&nbsp;=&nbsp;ScreenManager.Game.Content.Load&lt;Texture2D&gt;(<span class="cs__string">"hills"</span>);&nbsp;alienTexture&nbsp;=&nbsp;ScreenManager.Game.Content.Load&lt;Texture2D&gt;(<span class="cs__string">"alien1"</span>);&nbsp;badguy_blue&nbsp;=&nbsp;ScreenManager.Game.Content.Load&lt;Texture2D&gt;(<span class="cs__string">"badguy_blue"</span>);&nbsp;badguy_red&nbsp;=&nbsp;ScreenManager.Game.Content.Load&lt;Texture2D&gt;(<span class="cs__string">"badguy_red"</span>);&nbsp;badguy_green&nbsp;=&nbsp;ScreenManager.Game.Content.Load&lt;Texture2D&gt;(<span class="cs__string">"badguy_green"</span>);&nbsp;badguy_orange&nbsp;=&nbsp;ScreenManager.Game.Content.Load&lt;Texture2D&gt;(<span class="cs__string">"badguy_orange"</span>);&nbsp;bulletTexture&nbsp;=&nbsp;ScreenManager.Game.Content.Load&lt;Texture2D&gt;(<span class="cs__string">"bullet"</span>);&nbsp;laserTexture&nbsp;=&nbsp;ScreenManager.Game.Content.Load&lt;Texture2D&gt;(<span class="cs__string">"laser"</span>);&nbsp;alienFired&nbsp;=&nbsp;ScreenManager.Game.Content.Load&lt;SoundEffect&gt;(<span class="cs__string">"Tank_Fire"</span>);&nbsp;alienDied&nbsp;=&nbsp;ScreenManager.Game.Content.Load&lt;SoundEffect&gt;(<span class="cs__string">"Alien_Hit"</span>);&nbsp;playerFired&nbsp;=&nbsp;ScreenManager.Game.Content.Load&lt;SoundEffect&gt;(<span class="cs__string">"Tank_Fire"</span>);&nbsp;playerDied&nbsp;=&nbsp;ScreenManager.Game.Content.Load&lt;SoundEffect&gt;(<span class="cs__string">"Player_Hit"</span>);&nbsp;scoreFont&nbsp;=&nbsp;ScreenManager.Game.Content.Load&lt;SpriteFont&gt;(<span class="cs__string">"ScoreFont"</span>);&nbsp;menuFont&nbsp;=&nbsp;ScreenManager.Game.Content.Load&lt;SpriteFont&gt;(<span class="cs__string">"MenuFont"</span>);&nbsp;cloud1Position&nbsp;=&nbsp;<span class="cs__keyword">new</span>&nbsp;Vector2(<span class="cs__number">224</span>&nbsp;-&nbsp;cloud1Texture.Width,&nbsp;<span class="cs__number">32</span>);&nbsp;cloud2Position&nbsp;=&nbsp;<span class="cs__keyword">new</span>&nbsp;Vector2(<span class="cs__number">64</span>,&nbsp;<span class="cs__number">80</span>);&nbsp;sunPosition&nbsp;=&nbsp;<span class="cs__keyword">new</span>&nbsp;Vector2(<span class="cs__number">16</span>,&nbsp;<span class="cs__number">16</span>);&nbsp;particles&nbsp;=&nbsp;<span class="cs__keyword">new</span>&nbsp;ParticleSystem(ScreenManager.Game.Content,&nbsp;ScreenManager.SpriteBatch);&nbsp;<span class="cs__keyword">base</span>.LoadContent();}</li></ol></code></pre></div><p></p></li><li>Add the <strong>UnloadContent</strong> code snippet:<p>(Code Snippet – <em>Game Development with XNA – Gameplay Screen Unload method</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;UnloadContent(){&nbsp;particles&nbsp;=&nbsp;<span class="cs__keyword">null</span>;&nbsp;<span class="cs__keyword">base</span>.UnloadContent();}</li></ol></code></pre></div><p></p></li><li>Override the base class <strong>Update</strong> functionality:<div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> This method will be changed later during the lab to provide the game logic.</div></div><p>(Code Snippet – <em>Game Development with XNA – Gameplay Screen Update method)</em></p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__com">///&nbsp;&lt;summary&gt;///&nbsp;Runs&nbsp;one&nbsp;frame&nbsp;of&nbsp;update&nbsp;for&nbsp;the&nbsp;game.///&nbsp;&lt;/summary&gt;///&nbsp;&lt;param&nbsp;name="gameTime"&gt;Provides&nbsp;a&nbsp;snapshot&nbsp;of&nbsp;timing&nbsp;values.&lt;/param&gt;public&nbsp;override&nbsp;void&nbsp;Update(GameTime&nbsp;gameTime,&nbsp;&nbsp;bool&nbsp;otherScreenHasFocus,&nbsp;bool&nbsp;coveredByOtherScreen){&nbsp;float&nbsp;elapsed&nbsp;=&nbsp;(float)gameTime.ElapsedGameTime.TotalSeconds;&nbsp;base.Update(gameTime,&nbsp;otherScreenHasFocus,&nbsp;coveredByOtherScreen);}</span></li></ol></code></pre></div><p></p></li><li>Override the base class Draw functionality that draws the current “game world” state up to 30 times per second.<p>(Code Snippet – <em>Game Development with XNA – Gameplay Screen Draw region</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__com">///&nbsp;&lt;summary&gt;///&nbsp;Draw&nbsp;the&nbsp;game&nbsp;world,&nbsp;effects,&nbsp;and&nbsp;HUD///&nbsp;&lt;/summary&gt;///&nbsp;&lt;param&nbsp;name="gameTime"&gt;The&nbsp;elapsed&nbsp;time&nbsp;since&nbsp;last&nbsp;Draw&lt;/param&gt;public&nbsp;override&nbsp;void&nbsp;Draw(GameTime&nbsp;gameTime){&nbsp;float&nbsp;elapsedTime&nbsp;=&nbsp;(float)gameTime.ElapsedGameTime.TotalSeconds;&nbsp;ScreenManager.SpriteBatch.Begin();&nbsp;ScreenManager.SpriteBatch.End();}</span></li></ol></code></pre></div><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> The GameTime could be used to calculate the drawing locations of various game items.</div></div><p></p></li><li>Open <strong>MainMenuScreen.cs</strong>, locate the <strong>StartGameMenuEntrySelected</strong> method, which should be still empty, and add the following code. This will add the <strong>GameplayScreen</strong> screen to the <strong>ScreenManager</strong> when user clicks “START GAME” button:<p>(Code Snippet – <em>Game Development with XNA – MainMenu Screen – GameMenuEntrySelected handler</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">void</span>&nbsp;StartGameMenuEntrySelected(<span class="cs__keyword">object</span>&nbsp;sender,&nbsp;EventArgs&nbsp;e){&nbsp;ScreenManager.AddScreen(<span class="cs__keyword">new</span>&nbsp;GameplayScreen());}</li></ol></code></pre></div><p></p></li><li>Compile
 and run the application. Click the “START GAME” menu entry and observe 
the main menu items scrolling down from the screen.<p><img src="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_gamedevelopmentwithxnalab_topic2_018.png" alt=""></p><div class="label"><strong>Figure 26</strong><p><em>Running the game</em></p></div><p></p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> The GameplayScreen is still empty, thus you will not see any additional change at the current stage of the game development.</div></div><p></p></li><li>Stop the debugging and return to editing the application.</li></ol><p>During this task you created a main game class, and overrode basic game functionality.</p><p></p><a id="_Toc256011799" href="#"></a><a id="_Toc256012406" href="#"></a><a id="_Toc256012608" href="#"></a><a id="_Toc256012755" href="#"></a><a id="_Toc256012780" href="#"></a><a id="_Toc265144529" href="#"></a><h3>Task 4 – XNA Game Studio Game Input</h3><p>In
 this task, you will add an input for the game. In the Windows Phone, 
input is done via the Touch panel and Accelerometer. As accelerometer is
 not supported in the Windows Phone emulator, this lab prepares the 
solution with keyboard support to simulate and substitute the 
functionality of the Accelerometer. This will not work on the real 
device, but will work on the emulator.</p><ol><li>Add a reference to the <strong>Microsoft.Device.Sensors</strong> assembly.<p><img src="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_gamedevelopmentwithxnalab_topic2_005.png" alt=""></p><div class="label"><strong>Figure 1</strong><p><em>Adding a reference to the Microsoft.Devices.Sensors assembly</em></p></div><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"><strong>&nbsp;</strong>To add a reference, in Solution Explorer right-click the <strong>References</strong> node, under the <strong>AlienGame</strong> project and select <strong>Add References</strong>.</div></div><p></p></li><li>Open <strong>GameplayScreen.cs</strong> (if not opened already).</li><li>Add the following additional <em>using</em> statements to the class:<p>(Code Snippet – <em>Game Development with XNA – Gameplay Screen – more using statements</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">using</span>&nbsp;Microsoft.Xna.Framework.Input;<span class="cs__keyword">using</span>&nbsp;Microsoft.Xna.Framework.Input.Touch;<span class="cs__keyword">using</span>&nbsp;Microsoft.Devices.Sensors;</li></ol></code></pre></div><p></p></li><li>Add additional class variables to hold Touch and Accelerometer states:<p>(Code Snippet – <em>Game Development with XNA – Gameplay Screen – more class variables</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__com">//Input&nbsp;MembersAccelerometerReadingEventArgs&nbsp;accelState;TouchCollection&nbsp;touchState;Accelerometer&nbsp;Accelerometer;&nbsp;</span></li></ol></code></pre></div><p></p></li><li>Initialize accelerometer and subscribe to its events. To do this add the following code snippet to the class constructor:<p>(Code Snippet – <em>Game Development with XNA – Gameplay Screen – Accelerometer Initialization</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li>Accelerometer&nbsp;=&nbsp;<span class="cs__keyword">new</span>&nbsp;Accelerometer();<span class="cs__keyword">if</span>&nbsp;(Accelerometer.State&nbsp;==&nbsp;SensorState.Ready){&nbsp;Accelerometer.ReadingChanged&nbsp;+=&nbsp;(s,&nbsp;e)&nbsp;=&gt;&nbsp;{&nbsp;accelState&nbsp;=&nbsp;e;&nbsp;};&nbsp;Accelerometer.Start();}</li></ol></code></pre></div><p></p></li><li>Create the “Input” region within the <strong>GameplayScreen</strong> class:<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__preproc">#region&nbsp;Input#endregion</span></li></ol></code></pre></div><p></p></li><li>Add an override to the base class <strong>HandleInput</strong> method inside the <strong>Input</strong> region:<p>This method will read the current user’s input and be used later to respond with changes in game variables.</p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 In the emulator, mouse clicks will be exposed as touches and keyboard 
input. In case of the Windows Phone device, the keyboard input will 
never occur.</div></div><p></p><p>(Code Snippet – <em>Game Development with XNA – Gameplan Screen – HandleInput method</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__com">///&nbsp;&lt;summary&gt;///&nbsp;Input&nbsp;helper&nbsp;method&nbsp;provided&nbsp;by&nbsp;GameScreen.&nbsp;Packages&nbsp;up&nbsp;the&nbsp;various&nbsp;input///&nbsp;values&nbsp;for&nbsp;ease&nbsp;of&nbsp;use.&nbsp;Here&nbsp;it&nbsp;checks&nbsp;for&nbsp;pausing&nbsp;and&nbsp;handles&nbsp;controlling///&nbsp;the&nbsp;player's&nbsp;tank.///&nbsp;&lt;/summary&gt;///&nbsp;&lt;param&nbsp;name="input"&gt;The&nbsp;state&nbsp;of&nbsp;the&nbsp;gamepads&lt;/param&gt;public&nbsp;override&nbsp;void&nbsp;HandleInput(InputState&nbsp;input){&nbsp;if&nbsp;(input&nbsp;==&nbsp;null)&nbsp;throw&nbsp;new&nbsp;ArgumentNullException("input");&nbsp;if&nbsp;(input.PauseGame)&nbsp;{&nbsp;if&nbsp;(gameOver&nbsp;==&nbsp;true)&nbsp;finishCurrentGame();&nbsp;}&nbsp;else&nbsp;{&nbsp;touchState&nbsp;=&nbsp;TouchPanel.GetState();&nbsp;bool&nbsp;buttonTouched&nbsp;=&nbsp;false;&nbsp;//interpret&nbsp;touch&nbsp;screen&nbsp;presses&nbsp;foreach&nbsp;(TouchLocation&nbsp;location&nbsp;in&nbsp;touchState)&nbsp;{&nbsp;switch&nbsp;(location.State)&nbsp;{&nbsp;case&nbsp;TouchLocationState.Pressed:&nbsp;buttonTouched&nbsp;=&nbsp;true;&nbsp;break;&nbsp;case&nbsp;TouchLocationState.Moved:&nbsp;break;&nbsp;case&nbsp;TouchLocationState.Released:&nbsp;break;&nbsp;}&nbsp;}&nbsp;float&nbsp;movement&nbsp;=&nbsp;0.0f;&nbsp;if&nbsp;(accelState&nbsp;!=&nbsp;null)&nbsp;{&nbsp;if&nbsp;(Math.Abs(accelState.X)&nbsp;&gt;&nbsp;0.10f)&nbsp;{&nbsp;if&nbsp;(accelState.X&nbsp;&gt;&nbsp;0.0f)&nbsp;movement&nbsp;=&nbsp;1.0f;&nbsp;else&nbsp;movement&nbsp;=&nbsp;-1.0f;&nbsp;}&nbsp;}&nbsp;//TODO:&nbsp;Update&nbsp;player&nbsp;Velocity&nbsp;over&nbsp;X&nbsp;axis&nbsp;#1&nbsp;//This&nbsp;section&nbsp;handles&nbsp;tank&nbsp;movement.&nbsp;We&nbsp;only&nbsp;allow&nbsp;one&nbsp;"movement"&nbsp;action&nbsp;//to&nbsp;occur&nbsp;at&nbsp;once&nbsp;so&nbsp;that&nbsp;touchpad&nbsp;devices&nbsp;don't&nbsp;get&nbsp;double&nbsp;hits.&nbsp;KeyboardState&nbsp;keyState&nbsp;=&nbsp;Keyboard.GetState();&nbsp;if&nbsp;(input.CurrentGamePadStates[0].DPad.Left&nbsp;==&nbsp;ButtonState.Pressed&nbsp;||&nbsp;keyState.IsKeyDown(Keys.Left))&nbsp;{&nbsp;//TODO:&nbsp;Update&nbsp;player&nbsp;velocity&nbsp;over&nbsp;X&nbsp;axis&nbsp;#2&nbsp;}&nbsp;else&nbsp;if&nbsp;(input.CurrentGamePadStates[0].DPad.Right&nbsp;==&nbsp;ButtonState.Pressed&nbsp;||&nbsp;keyState.IsKeyDown(Keys.Right))&nbsp;{&nbsp;//TODO:&nbsp;Update&nbsp;player&nbsp;velocity&nbsp;over&nbsp;X&nbsp;axis&nbsp;#3&nbsp;}&nbsp;else&nbsp;{&nbsp;//TODO:&nbsp;Update&nbsp;player&nbsp;velocity&nbsp;over&nbsp;X&nbsp;axis&nbsp;#4&nbsp;}&nbsp;//&nbsp;B&nbsp;button,&nbsp;or&nbsp;pressing&nbsp;on&nbsp;the&nbsp;upper&nbsp;half&nbsp;of&nbsp;the&nbsp;pad&nbsp;or&nbsp;space&nbsp;on&nbsp;keyboard&nbsp;or&nbsp;touching&nbsp;the&nbsp;touch&nbsp;panel&nbsp;fires&nbsp;the&nbsp;weapon.&nbsp;if&nbsp;(input.CurrentGamePadStates[0].IsButtonDown(Buttons.B)&nbsp;||&nbsp;input.CurrentGamePadStates[0].IsButtonDown(Buttons.A)&nbsp;||&nbsp;input.CurrentGamePadStates[0].ThumbSticks.Left.Y&nbsp;&gt;&nbsp;0.25f&nbsp;||keyState.IsKeyDown(Keys.Space)&nbsp;||&nbsp;buttonTouched)&nbsp;{&nbsp;if&nbsp;(!gameOver)&nbsp;{&nbsp;//TODO:&nbsp;Fire&nbsp;the&nbsp;bullet&nbsp;}&nbsp;else&nbsp;if&nbsp;(gameOver)&nbsp;finishCurrentGame();&nbsp;}&nbsp;}}</span></li></ol></code></pre></div><p></p></li><li>Add helper method to finish the game according to the following code snippet:<p>(Code Snippet – <em>Game Development with XNA – Gameplay Screen – finishCurrentGame method</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">private</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;finishCurrentGame(){&nbsp;<span class="cs__keyword">foreach</span>&nbsp;(GameScreen&nbsp;screen&nbsp;<span class="cs__keyword">in</span>&nbsp;ScreenManager.GetScreens())&nbsp;screen.ExitScreen();&nbsp;ScreenManager.AddScreen(<span class="cs__keyword">new</span>&nbsp;BackgroundScreen());&nbsp;ScreenManager.AddScreen(<span class="cs__keyword">new</span>&nbsp;MainMenuScreen());}</li></ol></code></pre></div><p></p></li><li>Compile the application.</li></ol><a id="_Toc256011800" href="#"></a><a id="_Toc256012407" href="#"></a><a id="_Toc256012609" href="#"></a><a id="_Toc256012756" href="#"></a><a id="_Toc256012781" href="#"></a><p>During
 this task you created an input-handling sub-system of the game. It will
 be used in the next task to create the game logic.</p><p></p><a id="_Toc265144530" href="#"></a><h3>Task 5 – Alien Game Specific Logic</h3><p>In this task, you will create game-specific logic, helper methods, and classes.</p><ol><li>In <strong>GameplayScreen.cs</strong> file, create a new helper class (outside of the GameplayScreen class) according to the following code snippet:<p>(Code Snippet – <em>Game Development with XNA – Gameplay Screen – Bullet class</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__com">///&nbsp;&lt;summary&gt;///&nbsp;Represents&nbsp;either&nbsp;an&nbsp;alien&nbsp;or&nbsp;player&nbsp;bullet///&nbsp;&lt;/summary&gt;public&nbsp;class&nbsp;Bullet{&nbsp;public&nbsp;Vector2&nbsp;Position;&nbsp;public&nbsp;Vector2&nbsp;Velocity;&nbsp;public&nbsp;bool&nbsp;IsAlive;}</span></li></ol></code></pre></div><p></p></li><li>Add two helper classes after the Bullet class:<p>(Code Snippet – <em>Game Development with XNA – Gameplay Screen – Player and Alien classes</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__com">///&nbsp;&lt;summary&gt;///&nbsp;The&nbsp;player's&nbsp;state///&nbsp;&lt;/summary&gt;public&nbsp;class&nbsp;Player{&nbsp;public&nbsp;Vector2&nbsp;Position;&nbsp;public&nbsp;Vector2&nbsp;Velocity;&nbsp;public&nbsp;float&nbsp;Width;&nbsp;public&nbsp;float&nbsp;Height;&nbsp;public&nbsp;bool&nbsp;IsAlive;&nbsp;public&nbsp;float&nbsp;FireTimer;&nbsp;public&nbsp;float&nbsp;RespawnTimer;&nbsp;public&nbsp;string&nbsp;Name;&nbsp;public&nbsp;Texture2D&nbsp;Picture;&nbsp;public&nbsp;int&nbsp;Score;&nbsp;public&nbsp;int&nbsp;Lives;}///&nbsp;&lt;summary&gt;///&nbsp;Data&nbsp;for&nbsp;an&nbsp;alien.&nbsp;The&nbsp;only&nbsp;difference&nbsp;between&nbsp;the&nbsp;ships///&nbsp;and&nbsp;the&nbsp;badguys&nbsp;are&nbsp;the&nbsp;texture&nbsp;used.///&nbsp;&lt;/summary&gt;public&nbsp;class&nbsp;Alien{&nbsp;public&nbsp;Vector2&nbsp;Position;&nbsp;public&nbsp;Texture2D&nbsp;Texture;&nbsp;public&nbsp;Vector2&nbsp;Velocity;&nbsp;public&nbsp;float&nbsp;Width;&nbsp;public&nbsp;float&nbsp;Height;&nbsp;public&nbsp;int&nbsp;Score;&nbsp;public&nbsp;bool&nbsp;IsAlive;&nbsp;public&nbsp;float&nbsp;FireTimer;&nbsp;public&nbsp;float&nbsp;Accuracy;&nbsp;public&nbsp;int&nbsp;FireCount;}</span></li></ol></code></pre></div><p></p></li><li>Add the following <strong>GameplayScreen</strong> class variables:<p>(Code Snippet – <em>Game Development with XNA – Gameplay Screen – even more variables</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li>Player&nbsp;player;List&lt;Alien&gt;&nbsp;aliens;List&lt;Bullet&gt;&nbsp;alienBullets;List&lt;Bullet&gt;&nbsp;playerBullets;</li></ol></code></pre></div><p></p></li><li>Initialize the variables in the class constructor as shown in the following code snippet:<p>(Code Snippet – <em>Game Development with XNA – Gameplay Screen – Player and Alien Initialization</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;GameplayScreen(){&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;player&nbsp;=&nbsp;<span class="cs__keyword">new</span>&nbsp;Player();&nbsp;playerBullets&nbsp;=&nbsp;<span class="cs__keyword">new</span>&nbsp;List&lt;Bullet&gt;();&nbsp;aliens&nbsp;=&nbsp;<span class="cs__keyword">new</span>&nbsp;List&lt;Alien&gt;();&nbsp;alienBullets&nbsp;=&nbsp;<span class="cs__keyword">new</span>&nbsp;List&lt;Bullet&gt;();&nbsp;&nbsp;&nbsp;&nbsp;Accelerometer&nbsp;=&nbsp;<span class="cs__keyword">new</span>&nbsp;Accelerometer();&nbsp;&nbsp;&nbsp;&nbsp;<span class="cs__keyword">if</span>&nbsp;(AccelerometerSensor.Default.State&nbsp;==&nbsp;SensorState.Ready)&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;...}</li></ol></code></pre></div><p></p></li><li>Initialize the player variables Width and Height in the <strong>LoadContent</strong> method (after initializing the <strong>ParticleSystem</strong>):<p>(Code Snippet – <em>Game Development with XNA – Gameplay Screen – Player Initialization in LoadContent method</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;LoadContent(){&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;&nbsp;&nbsp;&nbsp;particles&nbsp;=&nbsp;<span class="cs__keyword">new</span>&nbsp;ParticleSystem(ScreenManager.Game.Content,&nbsp;ScreenManager.SpriteBatch);&nbsp;player.Width&nbsp;=&nbsp;tankTexture.Width;&nbsp;player.Height&nbsp;=&nbsp;tankTexture.Height;&nbsp;&nbsp;&nbsp;&nbsp;<span class="cs__keyword">base</span>.LoadContent();}</li></ol></code></pre></div><p></p></li><li>The
 next few code snippets will add the logic of the game. They will change
 the way “player1” moves in response to the user’s input. Navigate to 
the <strong>HandleInput</strong> method, and locate following line:<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__com">//TODO:&nbsp;Update&nbsp;player&nbsp;Velocity&nbsp;over&nbsp;X&nbsp;axis&nbsp;#1</span></li></ol></code></pre></div><p></p><p>Add the next code snippet after it:</p><p>(Code Snippet – <em>Game Development with XNA – Gameplay Screen – Player Movements 1 in HandleInput method</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li>player.Velocity.X&nbsp;=&nbsp;movement;</li></ol></code></pre></div><p></p></li><li>Locate following line (in the HandleInput method):<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__com">//TODO:&nbsp;Update&nbsp;player&nbsp;velocity&nbsp;over&nbsp;X&nbsp;axis&nbsp;#2</span></li></ol></code></pre></div><p></p><p>Add the following code snippet after it:</p><p>(Code Snippet – <em>Game Development with XNA – Gameplay Screen – Player Movements 2 in HandleInput method</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li>player.Velocity.X&nbsp;=&nbsp;-<span class="cs__number">1</span>.0f;</li></ol></code></pre></div><p></p></li><li>Locate the following line (in HandleInput method):<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__com">//TODO:&nbsp;Update&nbsp;player&nbsp;velocity&nbsp;over&nbsp;X&nbsp;axis&nbsp;#3</span></li></ol></code></pre></div><p></p><p>Add the following code snippet after it:</p><p>(Code Snippet – <em>Game Development with XNA – Gameplay Screen – Player Movements 3 in HandleInput method</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li>player.Velocity.X&nbsp;=&nbsp;<span class="cs__number">1</span>.0f;</li></ol></code></pre></div><p></p></li><li>Locate the following line (in HandleInput method):<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__com">//TODO:&nbsp;Update&nbsp;player&nbsp;velocity&nbsp;over&nbsp;X&nbsp;axis&nbsp;#4</span></li></ol></code></pre></div><p></p><p>Add the following code snippet after it:</p><p>(Code Snippet – <em>Game Development with XNA – Gameplay Screen – Player Movements 4 in HandleInput method</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li>player.Velocity.X&nbsp;=&nbsp;MathHelper.Min(input.CurrentGamePadStates[<span class="cs__number">0</span>].ThumbSticks.Left.X&nbsp;*&nbsp;<span class="cs__number">2</span>.0f,&nbsp;<span class="cs__number">1</span>.0f);</li></ol></code></pre></div><p></p></li><li>Locate following line:<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__com">//TODO:&nbsp;Fire&nbsp;the&nbsp;bullet</span></li></ol></code></pre></div><p></p><p>Change the “if” statement according to the following code snippet:</p><p>(Code Snippet – <em>Game Development with XNA – Gameplay Screen – HandleInput firing the bullet code</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">if</span>&nbsp;(player.FireTimer&nbsp;&lt;=&nbsp;<span class="cs__number">0</span>.0f&nbsp;&amp;&amp;&nbsp;player.IsAlive&nbsp;&amp;&amp;&nbsp;!gameOver){&nbsp;Bullet&nbsp;bullet&nbsp;=&nbsp;CreatePlayerBullet();&nbsp;bullet.Position&nbsp;=&nbsp;<span class="cs__keyword">new</span>&nbsp;Vector2((<span class="cs__keyword">int</span>)(player.Position.X&nbsp;+&nbsp;player.Width&nbsp;/&nbsp;<span class="cs__number">2</span>)&nbsp;-&nbsp;bulletTexture.Width&nbsp;/&nbsp;<span class="cs__number">2</span>,&nbsp;player.Position.Y&nbsp;-&nbsp;<span class="cs__number">4</span>);&nbsp;bullet.Velocity&nbsp;=&nbsp;<span class="cs__keyword">new</span>&nbsp;Vector2(<span class="cs__number">0</span>,&nbsp;-<span class="cs__number">256</span>.0f);&nbsp;player.FireTimer&nbsp;=&nbsp;<span class="cs__number">1</span>.0f;&nbsp;particles.CreatePlayerFireSmoke(player);&nbsp;playerFired.Play();}<span class="cs__keyword">else</span>&nbsp;<span class="cs__keyword">if</span>&nbsp;(gameOver)&nbsp;finishCurrentGame();</li></ol></code></pre></div><p></p></li><li>Create the following method inside the <strong>GameplayScreen</strong> class:<p>This method will create an instance of Bullet class (defined before). This instance was used in a previous code snippet.</p><p>(Code Snippet – <em>Game Development with XNA – Gameplay Screen – CreatePlayerBullet method</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__com">///&nbsp;&lt;summary&gt;///&nbsp;Returns&nbsp;an&nbsp;instance&nbsp;of&nbsp;a&nbsp;usable&nbsp;player&nbsp;bullet.&nbsp;Prefers&nbsp;reusing&nbsp;an&nbsp;///&nbsp;existing&nbsp;(dead)///&nbsp;bullet&nbsp;over&nbsp;creating&nbsp;a&nbsp;new&nbsp;instance.///&nbsp;&lt;/summary&gt;///&nbsp;&lt;returns&gt;A&nbsp;bullet&nbsp;ready&nbsp;to&nbsp;place&nbsp;into&nbsp;the&nbsp;world.&lt;/returns&gt;Bullet&nbsp;CreatePlayerBullet(){&nbsp;Bullet&nbsp;b&nbsp;=&nbsp;null;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;playerBullets.Count;&nbsp;++i)&nbsp;{&nbsp;if&nbsp;(playerBullets[i].IsAlive&nbsp;==&nbsp;false)&nbsp;{&nbsp;b&nbsp;=&nbsp;playerBullets[i];&nbsp;break;&nbsp;}&nbsp;}&nbsp;if&nbsp;(b&nbsp;==&nbsp;null)&nbsp;{&nbsp;b&nbsp;=&nbsp;new&nbsp;Bullet();&nbsp;playerBullets.Add(b);&nbsp;}&nbsp;b.IsAlive&nbsp;=&nbsp;true;&nbsp;return&nbsp;b;}</span></li></ol></code></pre></div><p></p></li><li>Change the <strong>Update</strong> method. Add the following blue-highlighted code snippet <em>before</em> the “<strong>base.Update(…)</strong>” method call:<p>This
 block of the code actually provides the “game logic” – it moves the 
player and calls the methods to update the Aliens and recalculate the 
Bullets' positions.</p><p>(Code Snippet – <em>Game Development with XNA – Gameplay Screen – Update method</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;Update(GameTime&nbsp;gameTime,&nbsp;&nbsp;&nbsp;&nbsp;<span class="cs__keyword">bool</span>&nbsp;otherScreenHasFocus,&nbsp;<span class="cs__keyword">bool</span>&nbsp;coveredByOtherScreen){&nbsp;&nbsp;&nbsp;&nbsp;<span class="cs__keyword">float</span>&nbsp;elapsed&nbsp;=&nbsp;(<span class="cs__keyword">float</span>)gameTime.ElapsedGameTime.TotalSeconds;&nbsp;<span class="cs__keyword">if</span>&nbsp;(IsActive)&nbsp;{&nbsp;<span class="cs__com">//&nbsp;Move&nbsp;the&nbsp;player&nbsp;if&nbsp;(player.IsAlive&nbsp;==&nbsp;true)&nbsp;{&nbsp;player.Position&nbsp;+=&nbsp;player.Velocity&nbsp;*&nbsp;128.0f&nbsp;*&nbsp;elapsed;&nbsp;player.FireTimer&nbsp;-=&nbsp;elapsed;&nbsp;if&nbsp;(player.Position.X&nbsp;&lt;=&nbsp;0.0f)&nbsp;player.Position&nbsp;=&nbsp;new&nbsp;Vector2(0.0f,&nbsp;player.Position.Y);&nbsp;if&nbsp;(player.Position.X&nbsp;+&nbsp;player.Width&nbsp;&gt;=&nbsp;worldBounds.Right)&nbsp;player.Position&nbsp;=&nbsp;new&nbsp;Vector2(worldBounds.Right&nbsp;-&nbsp;player.Width,&nbsp;player.Position.Y);&nbsp;}&nbsp;Respawn(elapsed);&nbsp;UpdateAliens(elapsed);&nbsp;UpdateBullets(elapsed);&nbsp;CheckHits();&nbsp;if&nbsp;(player.IsAlive&nbsp;&amp;&amp;&nbsp;player.Velocity.LengthSquared()&nbsp;&gt;&nbsp;0.0f)&nbsp;particles.CreatePlayerDust(player);&nbsp;particles.Update(elapsed);&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;base.Update(gameTime,&nbsp;otherScreenHasFocus,&nbsp;coveredByOtherScreen);}</span></li></ol></code></pre></div><p></p></li><li>Add following helper methods to the <strong>GameplayScreen</strong> class:<div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> The following code snippet adds a number of helper methods. The method purposes are as follows:<p></p><em>Respawn</em>:
 Checks if the player is “dead”, and the game is not over. If this is 
the case, it waits for respawnTimer to finish and creates a new player 
instance in the middle of the screen.<p></p><em>UpdateBullets</em>: Checks and updates the positions of the Player’s and Alien’s bullets on the screen.<p></p><em>UpdateAliens</em>: Moves the Aliens and calculates if they should fire a bullet and in which direction.<p></p><em>CheckHits</em>:
 Checks for all bullet and player/alien collisions. In addition, it 
handles game logic when a hit occurs, such as killing something, adding 
to the score, ending the game, etc.</div></div><p></p><p>(Code Snippet – <em>Game Development with XNA – Gameplay Screen – Helper update methods</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__com">///&nbsp;&lt;summary&gt;///&nbsp;Handles&nbsp;respawning&nbsp;the&nbsp;player&nbsp;if&nbsp;we&nbsp;are&nbsp;playing&nbsp;a&nbsp;game&nbsp;and&nbsp;the&nbsp;player&nbsp;is&nbsp;dead.///&nbsp;&lt;/summary&gt;///&nbsp;&lt;param&nbsp;name="elapsed"&gt;Time&nbsp;elapsed&nbsp;since&nbsp;Respawn&nbsp;was&nbsp;called&nbsp;last.&lt;/param&gt;void&nbsp;Respawn(float&nbsp;elapsed){&nbsp;if&nbsp;(gameOver)&nbsp;return;&nbsp;if&nbsp;(!player.IsAlive)&nbsp;{&nbsp;player.RespawnTimer&nbsp;-=&nbsp;elapsed;&nbsp;if&nbsp;(player.RespawnTimer&nbsp;&lt;=&nbsp;0.0f)&nbsp;{&nbsp;//&nbsp;See&nbsp;if&nbsp;there&nbsp;are&nbsp;any&nbsp;bullets&nbsp;close...&nbsp;int&nbsp;left&nbsp;=&nbsp;worldBounds.Width&nbsp;/&nbsp;2&nbsp;-&nbsp;tankTexture.Width&nbsp;/&nbsp;2&nbsp;-&nbsp;8;&nbsp;int&nbsp;right&nbsp;=&nbsp;worldBounds.Width&nbsp;/&nbsp;2&nbsp;+&nbsp;tankTexture.Width&nbsp;/&nbsp;2&nbsp;+&nbsp;8;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;alienBullets.Count;&nbsp;++i)&nbsp;{&nbsp;if&nbsp;(alienBullets[i].IsAlive&nbsp;==&nbsp;false)&nbsp;continue;&nbsp;if&nbsp;(alienBullets[i].Position.X&nbsp;&gt;=&nbsp;left&nbsp;||&nbsp;alienBullets[i].Position.X&nbsp;&lt;=&nbsp;right)&nbsp;return;&nbsp;}&nbsp;player.IsAlive&nbsp;=&nbsp;true;&nbsp;player.Position&nbsp;=&nbsp;new&nbsp;Vector2(worldBounds.Width&nbsp;/&nbsp;2&nbsp;-&nbsp;player.Width&nbsp;/&nbsp;2,&nbsp;worldBounds.Bottom&nbsp;-&nbsp;groundTexture.Height&nbsp;+&nbsp;2&nbsp;-&nbsp;player.Height);&nbsp;player.Velocity&nbsp;=&nbsp;Vector2.Zero;&nbsp;player.Lives--;&nbsp;}&nbsp;}}///&nbsp;&lt;summary&gt;///&nbsp;Moves&nbsp;all&nbsp;of&nbsp;the&nbsp;bullets&nbsp;(player&nbsp;and&nbsp;alien)&nbsp;and&nbsp;prunes&nbsp;"dead"&nbsp;bullets.///&nbsp;&lt;/summary&gt;///&nbsp;&lt;param&nbsp;name="elapsed"&gt;&lt;/param&gt;void&nbsp;UpdateBullets(float&nbsp;elapsed){&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;playerBullets.Count;&nbsp;++i)&nbsp;{&nbsp;if&nbsp;(playerBullets[i].IsAlive&nbsp;==&nbsp;false)&nbsp;continue;&nbsp;playerBullets[i].Position&nbsp;+=&nbsp;playerBullets[i].Velocity&nbsp;*&nbsp;elapsed;&nbsp;if&nbsp;(playerBullets[i].Position.Y&nbsp;&lt;&nbsp;-32)&nbsp;{&nbsp;playerBullets[i].IsAlive&nbsp;=&nbsp;false;&nbsp;hitStreak&nbsp;=&nbsp;0;&nbsp;}&nbsp;}&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;alienBullets.Count;&nbsp;++i)&nbsp;{&nbsp;if&nbsp;(alienBullets[i].IsAlive&nbsp;==&nbsp;false)&nbsp;continue;&nbsp;alienBullets[i].Position&nbsp;+=&nbsp;alienBullets[i].Velocity&nbsp;*&nbsp;elapsed;&nbsp;if&nbsp;(alienBullets[i].Position.Y&nbsp;&gt;&nbsp;worldBounds.Height&nbsp;-&nbsp;groundTexture.Height&nbsp;-&nbsp;laserTexture.Height)&nbsp;alienBullets[i].IsAlive&nbsp;=&nbsp;false;&nbsp;}}///&nbsp;&lt;summary&gt;///&nbsp;Moves&nbsp;the&nbsp;aliens&nbsp;and&nbsp;performs&nbsp;their&nbsp;"thinking"&nbsp;by&nbsp;determining&nbsp;if&nbsp;they///&nbsp;should&nbsp;shoot&nbsp;and&nbsp;where.///&nbsp;&lt;/summary&gt;///&nbsp;&lt;param&nbsp;name="elapsed"&gt;The&nbsp;elapsed&nbsp;time&nbsp;since&nbsp;UpdateAliens&nbsp;was&nbsp;called&nbsp;last.&lt;/param&gt;private&nbsp;void&nbsp;UpdateAliens(float&nbsp;elapsed){&nbsp;//&nbsp;See&nbsp;if&nbsp;it's&nbsp;time&nbsp;to&nbsp;spawn&nbsp;an&nbsp;alien;&nbsp;alienSpawnTimer&nbsp;-=&nbsp;elapsed;&nbsp;if&nbsp;(alienSpawnTimer&nbsp;&lt;=&nbsp;0.0f)&nbsp;{&nbsp;SpawnAlien();&nbsp;alienSpawnTimer&nbsp;+=&nbsp;alienSpawnRate;&nbsp;}&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;aliens.Count;&nbsp;++i)&nbsp;{&nbsp;if&nbsp;(aliens[i].IsAlive&nbsp;==&nbsp;false)&nbsp;continue;&nbsp;aliens[i].Position&nbsp;+=&nbsp;aliens[i].Velocity&nbsp;*&nbsp;elapsed;&nbsp;if&nbsp;((aliens[i].Position.X&nbsp;&lt;&nbsp;-aliens[i].Width&nbsp;-&nbsp;64&nbsp;&amp;&amp;&nbsp;aliens[i].Velocity.X&nbsp;&lt;&nbsp;0.0f)&nbsp;||&nbsp;(aliens[i].Position.X&nbsp;&gt;&nbsp;worldBounds.Width&nbsp;+&nbsp;64&nbsp;&amp;&amp;&nbsp;aliens[i].Velocity.X&nbsp;&gt;&nbsp;0.0f))&nbsp;{&nbsp;aliens[i].IsAlive&nbsp;=&nbsp;false;&nbsp;continue;&nbsp;}&nbsp;aliens[i].FireTimer&nbsp;-=&nbsp;elapsed;&nbsp;if&nbsp;(aliens[i].FireTimer&nbsp;&lt;=&nbsp;0.0f&nbsp;&amp;&amp;&nbsp;aliens[i].FireCount&nbsp;&gt;&nbsp;0)&nbsp;{&nbsp;if&nbsp;(player.IsAlive)&nbsp;{&nbsp;Bullet&nbsp;bullet&nbsp;=&nbsp;CreateAlienBullet();&nbsp;bullet.Position.X&nbsp;=&nbsp;aliens[i].Position.X&nbsp;+&nbsp;aliens[i].Width&nbsp;/&nbsp;2&nbsp;-&nbsp;laserTexture.Width&nbsp;/&nbsp;2;&nbsp;bullet.Position.Y&nbsp;=&nbsp;aliens[i].Position.Y&nbsp;+&nbsp;aliens[i].Height;&nbsp;if&nbsp;((float)random.NextDouble()&nbsp;&lt;=&nbsp;aliens[i].Accuracy)&nbsp;{&nbsp;bullet.Velocity&nbsp;=&nbsp;Vector2.Normalize(player.Position&nbsp;-&nbsp;aliens[i].Position)&nbsp;*&nbsp;64.0f;&nbsp;}&nbsp;else&nbsp;{&nbsp;bullet.Velocity&nbsp;=&nbsp;new&nbsp;Vector2(-8.0f&nbsp;+&nbsp;16.0f&nbsp;*&nbsp;(float)random.NextDouble(),&nbsp;64.0f);&nbsp;}&nbsp;alienFired.Play();&nbsp;}&nbsp;aliens[i].FireCount--;&nbsp;}&nbsp;}}///&nbsp;&lt;summary&gt;///&nbsp;Performs&nbsp;all&nbsp;bullet&nbsp;and&nbsp;player/alien&nbsp;collision&nbsp;detection.&nbsp;Also&nbsp;handles&nbsp;game&nbsp;logic///&nbsp;when&nbsp;a&nbsp;hit&nbsp;occurs,&nbsp;such&nbsp;as&nbsp;killing&nbsp;something,&nbsp;adding&nbsp;score,&nbsp;ending&nbsp;the&nbsp;game,&nbsp;etc.///&nbsp;&lt;/summary&gt;void&nbsp;CheckHits(){&nbsp;if&nbsp;(gameOver)&nbsp;return;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;playerBullets.Count;&nbsp;++i)&nbsp;{&nbsp;if&nbsp;(playerBullets[i].IsAlive&nbsp;==&nbsp;false)&nbsp;continue;&nbsp;for&nbsp;(int&nbsp;a&nbsp;=&nbsp;0;&nbsp;a&nbsp;&lt;&nbsp;aliens.Count;&nbsp;++a)&nbsp;{&nbsp;if&nbsp;(aliens[a].IsAlive&nbsp;==&nbsp;false)&nbsp;continue;&nbsp;if&nbsp;((playerBullets[i].Position.X&nbsp;&gt;=&nbsp;aliens[a].Position.X&nbsp;&amp;&amp;&nbsp;playerBullets[i].Position.X&nbsp;&lt;=&nbsp;aliens[a].Position.X&nbsp;+&nbsp;aliens[a].Width)&nbsp;&amp;&amp;&nbsp;(playerBullets[i].Position.Y&nbsp;&gt;=&nbsp;aliens[a].Position.Y&nbsp;&amp;&amp;&nbsp;playerBullets[i].Position.Y&nbsp;&lt;=&nbsp;aliens[a].Position.Y&nbsp;+&nbsp;aliens[a].Height))&nbsp;{&nbsp;playerBullets[i].IsAlive&nbsp;=&nbsp;false;&nbsp;aliens[a].IsAlive&nbsp;=&nbsp;false;&nbsp;hitStreak++;&nbsp;player.Score&nbsp;+=&nbsp;aliens[a].Score&nbsp;*&nbsp;(hitStreak&nbsp;/&nbsp;5&nbsp;+&nbsp;1);&nbsp;if&nbsp;(player.Score&nbsp;&gt;&nbsp;highScore)&nbsp;highScore&nbsp;=&nbsp;player.Score;&nbsp;if&nbsp;(player.Score&nbsp;&gt;&nbsp;nextLife)&nbsp;{&nbsp;player.Lives++;&nbsp;nextLife&nbsp;+=&nbsp;nextLife;&nbsp;}&nbsp;levelKillCount--;&nbsp;if&nbsp;(levelKillCount&nbsp;&lt;=&nbsp;0)&nbsp;AdvanceLevel();&nbsp;particles.CreateAlienExplosion(new&nbsp;Vector2(aliens[a].Position.X&nbsp;+&nbsp;aliens[a].Width&nbsp;/&nbsp;2,&nbsp;aliens[a].Position.Y&nbsp;+&nbsp;aliens[a].Height&nbsp;/&nbsp;2));&nbsp;alienDied.Play();&nbsp;}&nbsp;}&nbsp;}&nbsp;if&nbsp;(player.IsAlive&nbsp;==&nbsp;false)&nbsp;return;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;alienBullets.Count;&nbsp;++i)&nbsp;{&nbsp;if&nbsp;(alienBullets[i].IsAlive&nbsp;==&nbsp;false)&nbsp;continue;&nbsp;if&nbsp;((alienBullets[i].Position.X&nbsp;&gt;=&nbsp;player.Position.X&nbsp;+&nbsp;2&nbsp;&amp;&amp;&nbsp;alienBullets[i].Position.X&nbsp;&lt;=&nbsp;player.Position.X&nbsp;+&nbsp;player.Width&nbsp;-&nbsp;2)&nbsp;&amp;&amp;&nbsp;(alienBullets[i].Position.Y&nbsp;&gt;=&nbsp;player.Position.Y&nbsp;+&nbsp;2&nbsp;&amp;&amp;&nbsp;alienBullets[i].Position.Y&nbsp;&lt;=&nbsp;player.Position.Y&nbsp;+&nbsp;player.Height))&nbsp;{&nbsp;alienBullets[i].IsAlive&nbsp;=&nbsp;false;&nbsp;player.IsAlive&nbsp;=&nbsp;false;&nbsp;hitStreak&nbsp;=&nbsp;0;&nbsp;player.RespawnTimer&nbsp;=&nbsp;3.0f;&nbsp;particles.CreatePlayerExplosion(new&nbsp;Vector2(player.Position.X&nbsp;+&nbsp;player.Width&nbsp;/&nbsp;2,&nbsp;player.Position.Y&nbsp;+&nbsp;player.Height&nbsp;/&nbsp;2));&nbsp;playerDied.Play();&nbsp;if&nbsp;(player.Lives&nbsp;&lt;=&nbsp;0)&nbsp;{&nbsp;gameOver&nbsp;=&nbsp;true;&nbsp;}&nbsp;}&nbsp;}}///&nbsp;&lt;summary&gt;///&nbsp;Advances&nbsp;the&nbsp;difficulty&nbsp;of&nbsp;the&nbsp;game&nbsp;one&nbsp;level.///&nbsp;&lt;/summary&gt;void&nbsp;AdvanceLevel(){&nbsp;baseLevelKillCount&nbsp;+=&nbsp;5;&nbsp;levelKillCount&nbsp;=&nbsp;baseLevelKillCount;&nbsp;alienScore&nbsp;+=&nbsp;25;&nbsp;alienSpawnRate&nbsp;-=&nbsp;0.3f;&nbsp;alienMaxAccuracy&nbsp;+=&nbsp;0.1f;&nbsp;if&nbsp;(alienMaxAccuracy&nbsp;&gt;&nbsp;0.75f)&nbsp;alienMaxAccuracy&nbsp;=&nbsp;0.75f;&nbsp;alienSpeedMin&nbsp;*=&nbsp;1.35f;&nbsp;alienSpeedMax&nbsp;*=&nbsp;1.35f;&nbsp;if&nbsp;(alienSpawnRate&nbsp;&lt;&nbsp;0.33f)&nbsp;alienSpawnRate&nbsp;=&nbsp;0.33f;&nbsp;if&nbsp;(transitionFactor&nbsp;==&nbsp;1.0f)&nbsp;{&nbsp;transitionRate&nbsp;=&nbsp;-0.5f;&nbsp;}&nbsp;else&nbsp;{&nbsp;transitionRate&nbsp;=&nbsp;0.5f;&nbsp;}}</span></li></ol></code></pre></div><p></p></li><li>And the following code snippet to the <strong>GameplayScreen</strong> class:<div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> The following code snippet also adds a number of helper methods. Their purposes are as follows:<p></p><em>CreateAlienBullet</em>: Create an instance of Alien’s bullet which will be used by Alien to fire over the Player.<p></p><em>SpawnAlien</em>: Initializes an instance of a new Alien, sets the initial location, velocity, chooses the color of texture, etc. <p></p><em>CreateAlien</em>: Creates an instance of new Alien and adds it to the Aliens collection</div></div><p></p><p>(Code Snippet – <em>Game Development with XNA – Gameplay Screen – Helper aliens methods</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__com">///&nbsp;&lt;summary&gt;///&nbsp;Returns&nbsp;an&nbsp;instance&nbsp;of&nbsp;a&nbsp;usable&nbsp;alien&nbsp;bullet.&nbsp;Prefers&nbsp;reusing&nbsp;an&nbsp;existing&nbsp;(dead)///&nbsp;bullet&nbsp;over&nbsp;creating&nbsp;a&nbsp;new&nbsp;instance.///&nbsp;&lt;/summary&gt;///&nbsp;&lt;returns&gt;A&nbsp;bullet&nbsp;ready&nbsp;to&nbsp;place&nbsp;into&nbsp;the&nbsp;world.&lt;/returns&gt;Bullet&nbsp;CreateAlienBullet(){&nbsp;Bullet&nbsp;b&nbsp;=&nbsp;null;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;alienBullets.Count;&nbsp;++i)&nbsp;{&nbsp;if&nbsp;(alienBullets[i].IsAlive&nbsp;==&nbsp;false)&nbsp;{&nbsp;b&nbsp;=&nbsp;alienBullets[i];&nbsp;break;&nbsp;}&nbsp;}&nbsp;if&nbsp;(b&nbsp;==&nbsp;null)&nbsp;{&nbsp;b&nbsp;=&nbsp;new&nbsp;Bullet();&nbsp;alienBullets.Add(b);&nbsp;}&nbsp;b.IsAlive&nbsp;=&nbsp;true;&nbsp;return&nbsp;b;}///&nbsp;&lt;summary&gt;///&nbsp;Creates&nbsp;an&nbsp;instance&nbsp;of&nbsp;an&nbsp;alien,&nbsp;sets&nbsp;the&nbsp;initial&nbsp;state,&nbsp;and&nbsp;places&nbsp;it&nbsp;into&nbsp;the&nbsp;world.///&nbsp;&lt;/summary&gt;private&nbsp;void&nbsp;SpawnAlien(){&nbsp;Alien&nbsp;newAlien&nbsp;=&nbsp;CreateAlien();&nbsp;if&nbsp;(random.Next(2)&nbsp;==&nbsp;1)&nbsp;{&nbsp;newAlien.Position.X&nbsp;=&nbsp;-64.0f;&nbsp;newAlien.Velocity.X&nbsp;=&nbsp;random.Next((int)alienSpeedMin,&nbsp;(int)alienSpeedMax);&nbsp;}&nbsp;else&nbsp;{&nbsp;newAlien.Position.X&nbsp;=&nbsp;worldBounds.Width&nbsp;+&nbsp;32;&nbsp;newAlien.Velocity.X&nbsp;=&nbsp;-random.Next((int)alienSpeedMin,&nbsp;(int)alienSpeedMax);&nbsp;}&nbsp;newAlien.Position.Y&nbsp;=&nbsp;24.0f&nbsp;+&nbsp;80.0f&nbsp;*&nbsp;(float)random.NextDouble();&nbsp;//&nbsp;Aliens&nbsp;if&nbsp;(transitionFactor&nbsp;&gt;&nbsp;0.0f)&nbsp;{&nbsp;switch&nbsp;(random.Next(4))&nbsp;{&nbsp;case&nbsp;0:&nbsp;newAlien.Texture&nbsp;=&nbsp;badguy_blue;&nbsp;break;&nbsp;case&nbsp;1:&nbsp;newAlien.Texture&nbsp;=&nbsp;badguy_red;&nbsp;break;&nbsp;case&nbsp;2:&nbsp;newAlien.Texture&nbsp;=&nbsp;badguy_green;&nbsp;break;&nbsp;case&nbsp;3:&nbsp;newAlien.Texture&nbsp;=&nbsp;badguy_orange;&nbsp;break;&nbsp;}&nbsp;}&nbsp;else&nbsp;{&nbsp;newAlien.Texture&nbsp;=&nbsp;alienTexture;&nbsp;}&nbsp;newAlien.Width&nbsp;=&nbsp;newAlien.Texture.Width;&nbsp;newAlien.Height&nbsp;=&nbsp;newAlien.Texture.Height;&nbsp;newAlien.IsAlive&nbsp;=&nbsp;true;&nbsp;newAlien.Score&nbsp;=&nbsp;alienScore;&nbsp;float&nbsp;duration&nbsp;=&nbsp;screenHeight&nbsp;/&nbsp;newAlien.Velocity.Length();&nbsp;newAlien.FireTimer&nbsp;=&nbsp;duration&nbsp;*&nbsp;(float)random.NextDouble();&nbsp;newAlien.FireCount&nbsp;=&nbsp;1;&nbsp;newAlien.Accuracy&nbsp;=&nbsp;alienMaxAccuracy;}///&nbsp;&lt;summary&gt;///&nbsp;Returns&nbsp;an&nbsp;instance&nbsp;of&nbsp;a&nbsp;usable&nbsp;alien&nbsp;instance.&nbsp;Prefers&nbsp;reusing&nbsp;an&nbsp;existing&nbsp;(dead)///&nbsp;alien&nbsp;over&nbsp;creating&nbsp;a&nbsp;new&nbsp;instance.///&nbsp;&lt;/summary&gt;///&nbsp;&lt;returns&gt;An&nbsp;alien&nbsp;ready&nbsp;to&nbsp;place&nbsp;into&nbsp;the&nbsp;world.&lt;/returns&gt;Alien&nbsp;CreateAlien(){&nbsp;Alien&nbsp;b&nbsp;=&nbsp;null;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;aliens.Count;&nbsp;++i)&nbsp;{&nbsp;if&nbsp;(aliens[i].IsAlive&nbsp;==&nbsp;false)&nbsp;{&nbsp;b&nbsp;=&nbsp;aliens[i];&nbsp;break;&nbsp;}&nbsp;}&nbsp;if&nbsp;(b&nbsp;==&nbsp;null)&nbsp;{&nbsp;b&nbsp;=&nbsp;new&nbsp;Alien();&nbsp;aliens.Add(b);&nbsp;}&nbsp;b.IsAlive&nbsp;=&nbsp;true;&nbsp;return&nbsp;b;}</span></li></ol></code></pre></div><p></p></li><li>Navigate to Draw method and add the following blue-highlighted code snippet between the calls to <em>Screen.SpriteBatch.Begin()</em> and <em>Screen.SpriteBatch.End()</em>:<p>This change to the Draw method will call to the helper methods in order to draw changes calculated by Update on the screen.</p><p>(Code Snippet – <em>Game Development with XNA – Gameplay Screen – Draw method update</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;Draw(GameTime&nbsp;gameTime){&nbsp;&nbsp;&nbsp;&nbsp;<span class="cs__keyword">float</span>&nbsp;elapsedTime&nbsp;=&nbsp;(<span class="cs__keyword">float</span>)gameTime.ElapsedGameTime.TotalSeconds;&nbsp;&nbsp;&nbsp;&nbsp;ScreenManager.SpriteBatch.Begin();&nbsp;DrawBackground(elapsedTime);&nbsp;DrawAliens();&nbsp;DrawPlayer();&nbsp;DrawBullets();&nbsp;particles.Draw();&nbsp;DrawForeground(elapsedTime);&nbsp;DrawHud();&nbsp;&nbsp;&nbsp;&nbsp;ScreenManager.SpriteBatch.End();}</li></ol></code></pre></div><p></p></li><li>Add the following methods after the <strong>Draw</strong> method:<div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> The following code snippet adds a number of drawing-related helper methods. The method purposes are as follows:<p></p><em>DrawPlayer</em>: Draws the player’s tank.<p></p><em>DrawAliens</em>: Draws all aliens.<p></p><em>DrawBullets</em>: Draws all bullets (both the player’s and the alien’s).<p></p><em>DrawForeground</em>: Draws the clouds as the foreground and moves them. <p></p><em>DrawBackground</em>: Draws the grass, hills, mountains, and sun/moon. Also handles transitioning between day and night.<p></p><em>DrawHud</em>: Draws the score elements, lives remaining, and the “GAME OVER” when needed.<p></p><em>DrawString</em>: Generic method to draw shadowed text.</div></div><p></p><p>(Code Snippet – <em>Game Development with XNA – Gameplay Screen – Draw methods</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__com">///&nbsp;&lt;summary&gt;///&nbsp;Draws&nbsp;the&nbsp;player's&nbsp;tank///&nbsp;&lt;/summary&gt;void&nbsp;DrawPlayer(){&nbsp;if&nbsp;(!gameOver&nbsp;&amp;&amp;&nbsp;player.IsAlive)&nbsp;{&nbsp;ScreenManager.SpriteBatch.Draw(tankTexture,&nbsp;player.Position,&nbsp;Color.White);&nbsp;}}///&nbsp;&lt;summary&gt;///&nbsp;Draws&nbsp;all&nbsp;of&nbsp;the&nbsp;aliens.///&nbsp;&lt;/summary&gt;void&nbsp;DrawAliens(){&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;aliens.Count;&nbsp;++i)&nbsp;{&nbsp;if&nbsp;(aliens[i].IsAlive)&nbsp;ScreenManager.SpriteBatch.Draw(aliens[i].Texture,&nbsp;new&nbsp;Rectangle((int)aliens[i].Position.X,&nbsp;(int)aliens[i].Position.Y,&nbsp;(int)aliens[i].Width,&nbsp;(int)aliens[i].Height),&nbsp;Color.White);&nbsp;}}///&nbsp;&lt;summary&gt;///&nbsp;Draw&nbsp;both&nbsp;the&nbsp;player&nbsp;and&nbsp;alien&nbsp;bullets.///&nbsp;&lt;/summary&gt;private&nbsp;void&nbsp;DrawBullets(){&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;playerBullets.Count;&nbsp;++i)&nbsp;{&nbsp;if&nbsp;(playerBullets[i].IsAlive)&nbsp;ScreenManager.SpriteBatch.Draw(bulletTexture,&nbsp;playerBullets[i].Position,&nbsp;Color.White);&nbsp;}&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;alienBullets.Count;&nbsp;++i)&nbsp;{&nbsp;if&nbsp;(alienBullets[i].IsAlive)&nbsp;ScreenManager.SpriteBatch.Draw(laserTexture,&nbsp;alienBullets[i].Position,&nbsp;Color.White);&nbsp;}}///&nbsp;&lt;summary&gt;///&nbsp;Draw&nbsp;the&nbsp;foreground,&nbsp;which&nbsp;is&nbsp;basically&nbsp;the&nbsp;clouds.&nbsp;I&nbsp;think&nbsp;I&nbsp;had&nbsp;planned&nbsp;on&nbsp;one&nbsp;point///&nbsp;having&nbsp;foreground&nbsp;grass&nbsp;that&nbsp;was&nbsp;drawn&nbsp;in&nbsp;front&nbsp;of&nbsp;the&nbsp;tank.///&nbsp;&lt;/summary&gt;///&nbsp;&lt;param&nbsp;name="elapsedTime"&gt;The&nbsp;elapsed&nbsp;time&nbsp;since&nbsp;last&nbsp;Draw&lt;/param&gt;private&nbsp;void&nbsp;DrawForeground(float&nbsp;elapsedTime){&nbsp;//&nbsp;Move&nbsp;the&nbsp;clouds.&nbsp;Movement&nbsp;seems&nbsp;like&nbsp;an&nbsp;Update&nbsp;thing&nbsp;to&nbsp;do,&nbsp;but&nbsp;this&nbsp;animations&nbsp;//&nbsp;have&nbsp;no&nbsp;impact&nbsp;over&nbsp;gameplay.&nbsp;cloud1Position&nbsp;+=&nbsp;new&nbsp;Vector2(24.0f,&nbsp;0.0f)&nbsp;*&nbsp;elapsedTime;&nbsp;if&nbsp;(cloud1Position.X&nbsp;&gt;&nbsp;screenWidth)&nbsp;cloud1Position.X&nbsp;=&nbsp;-cloud1Texture.Width&nbsp;*&nbsp;2.0f;&nbsp;cloud2Position&nbsp;+=&nbsp;new&nbsp;Vector2(16.0f,&nbsp;0.0f)&nbsp;*&nbsp;elapsedTime;&nbsp;if&nbsp;(cloud2Position.X&nbsp;&gt;&nbsp;screenWidth)&nbsp;cloud2Position.X&nbsp;=&nbsp;-cloud1Texture.Width&nbsp;*&nbsp;2.0f;&nbsp;ScreenManager.SpriteBatch.Draw(cloud1Texture,&nbsp;cloud1Position,&nbsp;Color.White);&nbsp;ScreenManager.SpriteBatch.Draw(cloud2Texture,&nbsp;cloud2Position,&nbsp;Color.White);}///&nbsp;&lt;summary&gt;///&nbsp;Draw&nbsp;the&nbsp;grass,&nbsp;hills,&nbsp;mountains,&nbsp;and&nbsp;sun/moon.&nbsp;Handle&nbsp;transitioning///&nbsp;between&nbsp;day&nbsp;and&nbsp;night&nbsp;as&nbsp;well.///&nbsp;&lt;/summary&gt;///&nbsp;&lt;param&nbsp;name="elapsedTime"&gt;The&nbsp;elapsed&nbsp;time&nbsp;since&nbsp;last&nbsp;Draw&lt;/param&gt;private&nbsp;void&nbsp;DrawBackground(float&nbsp;elapsedTime){&nbsp;transitionFactor&nbsp;+=&nbsp;transitionRate&nbsp;*&nbsp;elapsedTime;&nbsp;if&nbsp;(transitionFactor&nbsp;&lt;&nbsp;0.0f)&nbsp;{&nbsp;transitionFactor&nbsp;=&nbsp;0.0f;&nbsp;transitionRate&nbsp;=&nbsp;0.0f;&nbsp;}&nbsp;if&nbsp;(transitionFactor&nbsp;&gt;&nbsp;1.0f)&nbsp;{&nbsp;transitionFactor&nbsp;=&nbsp;1.0f;&nbsp;transitionRate&nbsp;=&nbsp;0.0f;&nbsp;}&nbsp;Vector3&nbsp;day&nbsp;=&nbsp;Color.White.ToVector3();&nbsp;Vector3&nbsp;night&nbsp;=&nbsp;new&nbsp;Color(80,&nbsp;80,&nbsp;180).ToVector3();&nbsp;Vector3&nbsp;dayClear&nbsp;=&nbsp;Color.CornflowerBlue.ToVector3();&nbsp;Vector3&nbsp;nightClear&nbsp;=&nbsp;night;&nbsp;Color&nbsp;clear&nbsp;=&nbsp;new&nbsp;Color(Vector3.Lerp(dayClear,&nbsp;nightClear,&nbsp;transitionFactor));&nbsp;Color&nbsp;tint&nbsp;=&nbsp;new&nbsp;Color(Vector3.Lerp(day,&nbsp;night,&nbsp;transitionFactor));&nbsp;//&nbsp;Clear&nbsp;the&nbsp;background,&nbsp;using&nbsp;the&nbsp;day/night&nbsp;color&nbsp;ScreenManager.Game.GraphicsDevice.Clear(clear);&nbsp;//&nbsp;Draw&nbsp;the&nbsp;mountains&nbsp;ScreenManager.SpriteBatch.Draw(mountainsTexture,&nbsp;new&nbsp;Vector2(0,&nbsp;screenHeight&nbsp;-&nbsp;mountainsTexture.Height),&nbsp;tint);&nbsp;//&nbsp;Draw&nbsp;the&nbsp;hills&nbsp;ScreenManager.SpriteBatch.Draw(hillsTexture,&nbsp;new&nbsp;Vector2(0,&nbsp;screenHeight&nbsp;-&nbsp;hillsTexture.Height),&nbsp;tint);&nbsp;//&nbsp;Draw&nbsp;the&nbsp;ground&nbsp;ScreenManager.SpriteBatch.Draw(groundTexture,&nbsp;new&nbsp;Vector2(0,&nbsp;screenHeight&nbsp;-&nbsp;groundTexture.Height),&nbsp;tint);&nbsp;//&nbsp;Draw&nbsp;the&nbsp;sun&nbsp;or&nbsp;moon&nbsp;(based&nbsp;on&nbsp;time)&nbsp;ScreenManager.SpriteBatch.Draw(sunTexture,&nbsp;sunPosition,&nbsp;new&nbsp;Color(255,&nbsp;255,&nbsp;255,&nbsp;(byte)(255.0f&nbsp;*&nbsp;(1.0f&nbsp;-&nbsp;transitionFactor))));&nbsp;ScreenManager.SpriteBatch.Draw(moonTexture,&nbsp;sunPosition,&nbsp;new&nbsp;Color(255,&nbsp;255,&nbsp;255,&nbsp;(byte)(255.0f&nbsp;*&nbsp;transitionFactor)));}///&nbsp;&lt;summary&gt;///&nbsp;Draw&nbsp;the&nbsp;hud,&nbsp;which&nbsp;consists&nbsp;of&nbsp;the&nbsp;score&nbsp;elements&nbsp;and&nbsp;the&nbsp;GAME&nbsp;OVER&nbsp;tag.///&nbsp;&lt;/summary&gt;void&nbsp;DrawHud(){&nbsp;float&nbsp;scale&nbsp;=&nbsp;2.0f;&nbsp;if&nbsp;(gameOver)&nbsp;{&nbsp;Vector2&nbsp;size&nbsp;=&nbsp;menuFont.MeasureString("GAME&nbsp;OVER");&nbsp;DrawString(menuFont,&nbsp;"GAME&nbsp;OVER",&nbsp;new&nbsp;Vector2(ScreenManager.Game.GraphicsDevice.Viewport.Width&nbsp;/&nbsp;2&nbsp;-&nbsp;size.X,&nbsp;ScreenManager.Game.GraphicsDevice.Viewport.Height&nbsp;/&nbsp;2&nbsp;-&nbsp;size.Y&nbsp;/&nbsp;2),&nbsp;new&nbsp;Color(255,&nbsp;64,&nbsp;64),&nbsp;scale);&nbsp;}&nbsp;else&nbsp;{&nbsp;int&nbsp;bonus&nbsp;=&nbsp;100&nbsp;*&nbsp;(hitStreak&nbsp;/&nbsp;5);&nbsp;string&nbsp;bonusString&nbsp;=&nbsp;(bonus&nbsp;&gt;&nbsp;0&nbsp;?&nbsp;"&nbsp;("&nbsp;+&nbsp;bonus.ToString(System.Globalization.CultureInfo.CurrentCulture)&nbsp;+&nbsp;"%)"&nbsp;:&nbsp;"");&nbsp;//&nbsp;Score&nbsp;DrawString(scoreFont,&nbsp;"SCORE:&nbsp;"&nbsp;+&nbsp;player.Score.ToString(System.Globalization.CultureInfo&nbsp;.CurrentCulture)&nbsp;+&nbsp;bonusString,&nbsp;new&nbsp;Vector2(leftOffset,&nbsp;topOffset),&nbsp;Color.Yellow,&nbsp;scale);&nbsp;string&nbsp;text&nbsp;=&nbsp;"LIVES:&nbsp;"&nbsp;+&nbsp;player.Lives.ToString(System.Globalization.CultureInfo&nbsp;.CurrentCulture);&nbsp;Vector2&nbsp;size&nbsp;=&nbsp;scoreFont.MeasureString(text);&nbsp;size&nbsp;*=&nbsp;scale;&nbsp;//&nbsp;Lives&nbsp;DrawString(scoreFont,&nbsp;text,&nbsp;new&nbsp;Vector2(screenWidth&nbsp;-&nbsp;leftOffset&nbsp;-&nbsp;(int)size.X,&nbsp;topOffset),&nbsp;Color.Yellow,&nbsp;scale);&nbsp;DrawString(scoreFont,&nbsp;"LEVEL:&nbsp;"&nbsp;+&nbsp;(((baseLevelKillCount&nbsp;-&nbsp;5)&nbsp;/&nbsp;5)&nbsp;+&nbsp;1).ToString(System.Globalization.CultureInfo.CurrentCulture),&nbsp;new&nbsp;Vector2(leftOffset,&nbsp;screenHeight&nbsp;-&nbsp;bottomOffset),&nbsp;Color.Yellow,&nbsp;scale);&nbsp;text&nbsp;=&nbsp;"HIGH&nbsp;SCORE:&nbsp;"&nbsp;+&nbsp;highScore.ToString(System.Globalization.CultureInfo.CurrentCulture);&nbsp;size&nbsp;=&nbsp;scoreFont.MeasureString(text);&nbsp;DrawString(scoreFont,&nbsp;text,&nbsp;new&nbsp;Vector2(screenWidth&nbsp;-&nbsp;leftOffset&nbsp;-&nbsp;(int)size.X&nbsp;*&nbsp;2,&nbsp;screenHeight&nbsp;-&nbsp;bottomOffset),&nbsp;Color.Yellow,&nbsp;scale);&nbsp;}}///&nbsp;&lt;summary&gt;///&nbsp;A&nbsp;simple&nbsp;helper&nbsp;to&nbsp;draw&nbsp;shadowed&nbsp;text.///&nbsp;&lt;/summary&gt;void&nbsp;DrawString(SpriteFont&nbsp;font,&nbsp;string&nbsp;text,&nbsp;&nbsp;Vector2&nbsp;position,&nbsp;Color&nbsp;color){&nbsp;ScreenManager.SpriteBatch.DrawString(font,&nbsp;text,&nbsp;new&nbsp;Vector2(position.X&nbsp;+&nbsp;1,&nbsp;position.Y&nbsp;+&nbsp;1),&nbsp;Color.Black);&nbsp;ScreenManager.SpriteBatch.DrawString(font,&nbsp;text,&nbsp;position,&nbsp;color);}///&nbsp;&lt;summary&gt;///&nbsp;A&nbsp;simple&nbsp;helper&nbsp;to&nbsp;draw&nbsp;shadowed&nbsp;text.///&nbsp;&lt;/summary&gt;void&nbsp;DrawString(SpriteFont&nbsp;font,&nbsp;string&nbsp;text,&nbsp;&nbsp;Vector2&nbsp;position,&nbsp;Color&nbsp;color,&nbsp;float&nbsp;fontScale){&nbsp;ScreenManager.SpriteBatch.DrawString(font,&nbsp;text,&nbsp;new&nbsp;Vector2(position.X&nbsp;+&nbsp;1,&nbsp;position.Y&nbsp;+&nbsp;1),&nbsp;Color.Black,&nbsp;0,&nbsp;new&nbsp;Vector2(0,&nbsp;font.LineSpacing&nbsp;/&nbsp;2),&nbsp;fontScale,&nbsp;SpriteEffects.None,&nbsp;0);&nbsp;ScreenManager.SpriteBatch.DrawString(font,&nbsp;text,&nbsp;position,&nbsp;color,&nbsp;0,&nbsp;new&nbsp;Vector2(0,&nbsp;font.LineSpacing&nbsp;/&nbsp;2),&nbsp;fontScale,&nbsp;SpriteEffects.None,&nbsp;0);}</span></li></ol></code></pre></div><p></p></li><li>Locate the <strong>LoadContent</strong> method and add the following code snippet after the <em>base.LoadContent()</em> method call:<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;LoadContent(){&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;&nbsp;&nbsp;&nbsp;player.Width&nbsp;=&nbsp;tankTexture.Width;&nbsp;&nbsp;&nbsp;&nbsp;player.Height&nbsp;=&nbsp;tankTexture.Height;&nbsp;&nbsp;&nbsp;&nbsp;<span class="cs__keyword">base</span>.LoadContent();&nbsp;LoadHighscore();&nbsp;Start();}</li></ol></code></pre></div><p></p></li><li>Locate the <strong>UnloadContent</strong> method and add the following code snippet before the “<em>particles = null;</em>” statement:<div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">public</span>&nbsp;<span class="cs__keyword">override</span>&nbsp;<span class="cs__keyword">void</span>&nbsp;UnloadContent(){&nbsp;SaveHighscore();&nbsp;&nbsp;&nbsp;&nbsp;particles&nbsp;=&nbsp;<span class="cs__keyword">null</span>;&nbsp;&nbsp;&nbsp;&nbsp;<span class="cs__keyword">base</span>.UnloadContent();}</li></ol></code></pre></div><p></p></li><li>Create
 a new region with loading/unloading high scores logic. To save/load 
data to the Windows Phone file system, you have to use the Isolated 
Storage that is provided for each application. Use the following code 
snippet to create this logic in the <strong>GameplayScreen</strong> class:<p>(Code Snippet – <em>Game Development with XNA – Gameplay Screen – Highscore storage methods</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__preproc">#region&nbsp;Highscore&nbsp;loading/saving&nbsp;logic///&nbsp;&lt;summary&gt;///&nbsp;Saves&nbsp;the&nbsp;current&nbsp;highscore&nbsp;to&nbsp;a&nbsp;text&nbsp;file.&nbsp;The&nbsp;StorageDevice&nbsp;was&nbsp;selected&nbsp;during&nbsp;screen&nbsp;loading.///&nbsp;&lt;/summary&gt;private&nbsp;void&nbsp;SaveHighscore(){&nbsp;using&nbsp;(IsolatedStorageFile&nbsp;isf&nbsp;=&nbsp;IsolatedStorageFile.GetUserStoreForApplication())&nbsp;{&nbsp;using&nbsp;(IsolatedStorageFileStream&nbsp;isfs&nbsp;=&nbsp;new&nbsp;IsolatedStorageFileStream("highscores.txt",&nbsp;FileMode.Create,&nbsp;isf))&nbsp;{&nbsp;using&nbsp;(StreamWriter&nbsp;writer&nbsp;=&nbsp;new&nbsp;StreamWriter(isfs))&nbsp;{&nbsp;writer.Write(highScore.ToString(System.Globalization.CultureInfo.InvariantCulture));&nbsp;writer.Flush();&nbsp;writer.Close();&nbsp;}&nbsp;}&nbsp;}}///&nbsp;&lt;summary&gt;///&nbsp;Loads&nbsp;the&nbsp;high&nbsp;score&nbsp;from&nbsp;a&nbsp;text&nbsp;file.&nbsp;The&nbsp;StorageDevice&nbsp;was&nbsp;selected&nbsp;during&nbsp;the&nbsp;loading&nbsp;screen.///&nbsp;&lt;/summary&gt;private&nbsp;void&nbsp;LoadHighscore(){&nbsp;using&nbsp;(IsolatedStorageFile&nbsp;isf&nbsp;=&nbsp;IsolatedStorageFile.GetUserStoreForApplication())&nbsp;{&nbsp;if&nbsp;(isf.FileExists("highscores.txt"))&nbsp;{&nbsp;using&nbsp;(IsolatedStorageFileStream&nbsp;isfs&nbsp;=&nbsp;new&nbsp;IsolatedStorageFileStream("highscores.txt",&nbsp;FileMode.Open,&nbsp;isf))&nbsp;{&nbsp;using&nbsp;(StreamReader&nbsp;reader&nbsp;=&nbsp;new&nbsp;StreamReader(isfs))&nbsp;{&nbsp;try&nbsp;{&nbsp;highScore&nbsp;=&nbsp;Int32.Parse(reader.ReadToEnd(),&nbsp;System.Globalization.CultureInfo.InvariantCulture);&nbsp;}&nbsp;catch&nbsp;(FormatException)&nbsp;{&nbsp;highScore&nbsp;=&nbsp;10000;&nbsp;}&nbsp;finally&nbsp;{&nbsp;if&nbsp;(reader&nbsp;!=&nbsp;null)&nbsp;reader.Close();&nbsp;}&nbsp;}&nbsp;}&nbsp;}&nbsp;}}#endregion</span></li></ol></code></pre></div><p></p></li><li>Create the <strong>Start</strong> method to start a new game inside the <strong>GameplayScreen</strong> class:<p>(Code Snippet – <em>Game Development with XNA – Gameplay Screen – Start method</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__com">///&nbsp;&lt;summary&gt;///&nbsp;Starts&nbsp;a&nbsp;new&nbsp;game&nbsp;session,&nbsp;setting&nbsp;all&nbsp;game&nbsp;states&nbsp;to&nbsp;initial&nbsp;values.///&nbsp;&lt;/summary&gt;void&nbsp;Start(){&nbsp;if&nbsp;(gameOver)&nbsp;{&nbsp;player.Score&nbsp;=&nbsp;0;&nbsp;player.Lives&nbsp;=&nbsp;3;&nbsp;player.RespawnTimer&nbsp;=&nbsp;0.0f;&nbsp;gameOver&nbsp;=&nbsp;false;&nbsp;aliens.Clear();&nbsp;alienBullets.Clear();&nbsp;playerBullets.Clear();&nbsp;Respawn(0.0f);&nbsp;}&nbsp;transitionRate&nbsp;=&nbsp;0.0f;&nbsp;transitionFactor&nbsp;=&nbsp;0.0f;&nbsp;levelKillCount&nbsp;=&nbsp;5;&nbsp;baseLevelKillCount&nbsp;=&nbsp;5;&nbsp;alienScore&nbsp;=&nbsp;25;&nbsp;alienSpawnRate&nbsp;=&nbsp;1.0f;&nbsp;alienMaxAccuracy&nbsp;=&nbsp;0.25f;&nbsp;alienSpeedMin&nbsp;=&nbsp;24.0f;&nbsp;alienSpeedMax&nbsp;=&nbsp;32.0f;&nbsp;alienSpawnRate&nbsp;=&nbsp;2.0f;&nbsp;alienSpawnTimer&nbsp;=&nbsp;alienSpawnRate;&nbsp;nextLife&nbsp;=&nbsp;5000;}</span></li></ol></code></pre></div><p></p></li><li>Open <strong>ParticleSystem.cs</strong>.</li><li>Add following <em>using</em> statement:<p>(Code Snippet – <em>Game Development with XNA – ParticleSystem – using statement</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__keyword">using</span>&nbsp;AlienGame;</li></ol></code></pre></div><p></p></li><li>During
 this step you will add two methods to create the mud/dust effect when 
the player’s tank moves and fire effect when the player fires a bullet. 
Add the following methods to the <strong>ParticleSystem</strong> class:<p>(Code Snippet – <em>Game Development with XNA – ParticleSystem – Helper player effects methods</em>)</p><div class="CodeHighlighter"> <pre><code class="csharp"><ol><li><span class="cs__com">///&nbsp;&lt;summary&gt;///&nbsp;Creates&nbsp;the&nbsp;mud/dust&nbsp;effect&nbsp;when&nbsp;the&nbsp;player&nbsp;moves.///&nbsp;&lt;/summary&gt;///&nbsp;&lt;param&nbsp;name="position"&gt;Where&nbsp;on&nbsp;the&nbsp;screen&nbsp;to&nbsp;create&nbsp;the&nbsp;effect.&lt;/param&gt;&nbsp;public&nbsp;void&nbsp;CreatePlayerDust(Player&nbsp;player){&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;2;&nbsp;++i)&nbsp;{&nbsp;Particle&nbsp;p&nbsp;=&nbsp;CreateParticle();&nbsp;p.Texture&nbsp;=&nbsp;smoke;&nbsp;p.Color&nbsp;=&nbsp;new&nbsp;Color(125,&nbsp;108,&nbsp;43);&nbsp;p.Position.X&nbsp;=&nbsp;player.Position.X&nbsp;+&nbsp;player.Width&nbsp;*&nbsp;(float)random.NextDouble();&nbsp;p.Position.Y&nbsp;=&nbsp;player.Position.Y&nbsp;+&nbsp;player.Height&nbsp;-&nbsp;3.0f&nbsp;*&nbsp;(float)random.NextDouble();&nbsp;p.Alpha&nbsp;=&nbsp;1.0f;&nbsp;p.AlphaRate&nbsp;=&nbsp;-2.0f;&nbsp;p.Life&nbsp;=&nbsp;0.5f;&nbsp;p.Rotation&nbsp;=&nbsp;0.0f;&nbsp;p.RotationRate&nbsp;=&nbsp;-2.0f&nbsp;+&nbsp;4.0f&nbsp;*&nbsp;(float)random.NextDouble();&nbsp;p.Scale&nbsp;=&nbsp;0.25f;&nbsp;p.ScaleRate&nbsp;=&nbsp;0.5f;&nbsp;p.Velocity.X&nbsp;=&nbsp;-4&nbsp;+&nbsp;8.0f&nbsp;*&nbsp;(float)random.NextDouble();&nbsp;p.Velocity.Y&nbsp;=&nbsp;-8&nbsp;+&nbsp;4.0f&nbsp;*&nbsp;(float)random.NextDouble();&nbsp;}}///&nbsp;&lt;summary&gt;///&nbsp;Creates&nbsp;the&nbsp;effect&nbsp;for&nbsp;when&nbsp;the&nbsp;player&nbsp;fires&nbsp;a&nbsp;bullet.///&nbsp;&lt;/summary&gt;///&nbsp;&lt;param&nbsp;name="position"&gt;Where&nbsp;on&nbsp;the&nbsp;screen&nbsp;to&nbsp;create&nbsp;the&nbsp;effect.&lt;/param&gt;&nbsp;public&nbsp;void&nbsp;CreatePlayerFireSmoke(Player&nbsp;player){&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;8;&nbsp;++i)&nbsp;{&nbsp;Particle&nbsp;p&nbsp;=&nbsp;CreateParticle();&nbsp;p.Texture&nbsp;=&nbsp;smoke;&nbsp;p.Color&nbsp;=&nbsp;Color.White;&nbsp;p.Position.X&nbsp;=&nbsp;player.Position.X&nbsp;+&nbsp;player.Width&nbsp;/&nbsp;2;&nbsp;p.Position.Y&nbsp;=&nbsp;player.Position.Y;&nbsp;p.Alpha&nbsp;=&nbsp;1.0f;&nbsp;p.AlphaRate&nbsp;=&nbsp;-1.0f;&nbsp;p.Life&nbsp;=&nbsp;1.0f;&nbsp;p.Rotation&nbsp;=&nbsp;0.0f;&nbsp;p.RotationRate&nbsp;=&nbsp;-2.0f&nbsp;+&nbsp;4.0f&nbsp;*&nbsp;(float)random.NextDouble();&nbsp;p.Scale&nbsp;=&nbsp;0.25f;&nbsp;p.ScaleRate&nbsp;=&nbsp;0.25f;&nbsp;p.Velocity.X&nbsp;=&nbsp;-4&nbsp;+&nbsp;8.0f&nbsp;*&nbsp;(float)random.NextDouble();&nbsp;p.Velocity.Y&nbsp;=&nbsp;-16.0f&nbsp;+&nbsp;-32.0f&nbsp;*&nbsp;(float)random.NextDouble();&nbsp;}}</span></li></ol></code></pre></div><p></p></li><li>Compile and run the application. Select the “START GAME” menu entry and enjoy the game. <div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text">
 To use the desktop keyboard for moving the vehicle in the Emulator you 
need to first press the PAUSE/BREAK key. This will toggle between the 
Emulator Software Input Panel (SIP) and the desktop keyboard, which 
cannot be active at the same time. This is a known issue and will be 
fixed in future releases.</div></div><p></p><p><img src="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/wp7trainingcourse_gamedevelopmentwithxnalab_topic2_002.png" alt=""></p><div class="label"><strong>Figure 28</strong><p><em>Finished game</em></p></div><p></p><p>This step concludes the lab.</p><p>During
 this task you created the AlienGame logic, including the player’s and 
alien’s movement calculations, hit detection, screen draw, and others.</p><div class="CCI_Container clsNote"><div class="CCI_Header"><strong>Note:</strong></div><div class="CCI_Text"> The complete solution for this exercise is located at the<strong>Source\Ex1-AlienGame\End</strong> folder of this lab.</div></div></li></ol><p></p><div class="Center"><div class="BostonPostCard"><h4><strong><a href="http://msdn.microsoft.com/en-us/wp7trainingcourse_gamedevelopmentwithxnalab_topic1"> &lt; previous </a> | <a href="http://msdn.microsoft.com/en-us/wp7trainingcourse_gamedevelopmentwithxnalab_topic3"> next &gt; </a></strong></h4></div></div></div></td><td valign="top"><div class="RightAdRail"><div class="BostonPostCard"> <div style="width: 300px; height: 250px;" id="c_d96dcbcf996646f782117bfb521dbfbb" align="center"><iframe src="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/a_002.htm" name="dapIfM0" id="dapIfM0" width="300" frameborder="0" height="250" scrolling="no"></iframe></div> <p></p><h4>Contents</h4><ul class="bulletedlist"><li><a href="http://msdn.microsoft.com/en-us/wp7trainingcourse_gamedevelopmentwithxnalab_topic1#_Toc265144524#_Toc265144524"> Overview </a></li><li><strong><a href="http://msdn.microsoft.com/en-us/wp7trainingcourse_gamedevelopmentwithxnalab_topic2#_Toc265144525#_Toc265144525"> Exercise 1: XNA Game Studio Games on the Windows Phone 7 </a></strong><ul><li><a href="http://msdn.microsoft.com/en-us/wp7trainingcourse_gamedevelopmentwithxnalab_topic2#_Toc265144526#_Toc265144526"> Task 1 – XNA Game Studio Game Basics </a></li><li><a href="http://msdn.microsoft.com/en-us/wp7trainingcourse_gamedevelopmentwithxnalab_topic2#_Toc265144527#_Toc265144527"> Task 2 – XNA Framework Game Resources </a></li><li><a href="http://msdn.microsoft.com/en-us/wp7trainingcourse_gamedevelopmentwithxnalab_topic2#_Toc265144528#_Toc265144528"> Task 3 – XNA Game Studio Game Loop </a></li><li><a href="http://msdn.microsoft.com/en-us/wp7trainingcourse_gamedevelopmentwithxnalab_topic2#_Toc265144529#_Toc265144529"> Task 4 – XNA Game Studio Game Input </a></li><li><a href="http://msdn.microsoft.com/en-us/wp7trainingcourse_gamedevelopmentwithxnalab_topic2#_Toc265144530#_Toc265144530"> Task 5 – Alien Game Specific Logic </a></li></ul></li><li><a href="http://msdn.microsoft.com/en-us/wp7trainingcourse_gamedevelopmentwithxnalab_topic3#_Toc265144531#_Toc265144531"> Summary </a></li></ul></div></div></td></tr></tbody></table></div></div> <div id="footerAd" style="margin-left: auto; margin-right: auto; display: table;"> <p> </p><div style="width: 728px; height: 90px;" id="c_23857106c48a41c795e9d533779cb894" align="center"><iframe src="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/a_002.htm" name="dapIfM1" id="dapIfM1" width="728" frameborder="0" height="90" scrolling="no"></iframe></div> <p></p> </div> </div> </div> </div> <div class="ClearBottom"> </div> <div class="bottomleftcorner"> </div> <div class="bottomrightcorner"> </div> <div class="FooterLinks"><span class="FooterCopyright" title="© 2010  Microsoft Corporation. All rights reserved.">© 2010 Microsoft Corporation. All rights reserved.</span><a href="http://msdn.microsoft.com/cc300389.aspx" title="Terms of Use">Terms of Use</a><span class="Pipe">|</span><a href="http://www.microsoft.com/library/toolbar/3.0/trademarks/en-us.mspx" title="Trademarks">Trademarks</a><span class="Pipe">|</span><a href="http://www.microsoft.com/info/privacy.mspx" title="Privacy Statement">Privacy Statement</a><span class="Pipe" id="ctl00_Footer_PipeSpan3">|</span><a target="_blank" id="bottomsitefeedbacklink" title="Site Feedback" href="https://lab.msdn.microsoft.com/mailform/contactus.aspx?refurl=http://msdn.microsoft.com/en-us/wp7trainingcourse_gamedevelopmentwithxnalab_topic2&amp;loc=en-us">Site Feedback</a></div> </div> </div> </div> </div> <noscript><img alt="DCSIMG" width="1" height="1" src="http://m.webtrends.com/dcsmgru7m99k7mqmgrhudo0k8_8c6m/njs.gif?dcsuri=/nojavascript&amp;WT.js=No" /></noscript><noscript><a href="http://www.omniture.com" title="Web Analytics"><img src="http://msstonojsmsdn.112.2o7.net/b/ss/msstonojsmsdn/1/H.20.2--NS/0" height="1" width="1" border="0" alt="" /></a></noscript> <script type="text/javascript" src="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/global.js"></script><script type="text/javascript">
    function SearchClick() {
        window.location = "http://social.msdn.microsoft.com/search/en-us/?query=" + document.getElementById("HeaderSearchTextBox").value();
    }

    function SearchClientClick() {
        if (document.getElementById("HeaderSearchTextBox").value == document.getElementById("HeaderSearchTextBox").title) return false;
        document.HeaderSearchForm.submit();return true;
    }
</script><script type="text/javascript" id="mscom.srch.searchBox" src="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/SearchBox.js" defer="defer"></script><script src="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/jquery.js" type="text/javascript"></script><script src="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/recipes.js" type="text/javascript"></script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript">ChiliBook.lineNumbers = true; ChiliBook.automatic = true;</script><script type="text/javascript" src="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/dap.js"></script><script type="text/javascript">
      try {
        dapMgr.enableACB("c_d96dcbcf996646f782117bfb521dbfbb", false);
        dapMgr.renderAd("c_d96dcbcf996646f782117bfb521dbfbb", "&amp;PG=CMS3DB&amp;AP=1089", "300", "250");
      } catch (ex) { }
    </script><script type="text/javascript">
      try {
        dapMgr.enableACB("c_23857106c48a41c795e9d533779cb894", false);
        dapMgr.renderAd("c_23857106c48a41c795e9d533779cb894", "&amp;PG=CMS3DL&amp;AP=1390", "728", "90");
      } catch (ex) { }
    </script><script type="text/javascript">

      var wt_nvr_ru = "WT_NVR_RU";
      var wt_fpcdom = ".microsoft.com";
      var wt_domlist = "msdn.microsoft.com";
      var wt_pathlist = "";var wt_paramlist = "DCSext.mtps_devcenter";
      var wt_siteid = "MSDN";
      var gDomain="m.webtrends.com";
var gDcsId = "dcsmgru7m99k7mqmgrhudo0k8_8c6m";
var gFpc = "WT_FPC";
/*<![CDATA[*/
if (document.cookie.indexOf(gFpc + "=") == -1) { document.write("<scr" + "ipt type='text/javascript' src='" + "http" + (window.location.protocol.indexOf('https:') == 0 ? 's' : '') + "://" + gDomain + "/" + gDcsId + "/wtid.js" + "'><\/scr" + "ipt>"); }
/*]]>*/
var detectedLocale = "en-us";
var wtsp = "_msdn_";
var gTrackEvents = "1";
</script><script type="text/javascript" src="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/webtrendsscript.js"></script><script type="text/javascript">var omni_guid = 'c_8839a881c0f9420d90b175416d751cb9';</script><script language="javascript" type="text/javascript" src="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/broker.js"></script><!-- HtmlResponseFilter:109:ms --><script src="wp7trainingcourse_gamedevelopmentwithxnalab_topic2_files/broker-config.js"></script></body></html>